<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>vue3 脚手架（五）</title>
    <url>/blog/2021/07/07/vite-vue-5/</url>
    <content><![CDATA[<blockquote>
<p>本文仓库地址为: <a href="https://github.com/lost-dream/vue3-template" target="_blank" rel="noopener">vue3-template</a></p>
</blockquote>
<h2 id="css-scss-优化"><a href="#css-scss-优化" class="headerlink" title="css/scss 优化"></a>css/scss 优化</h2><p>经验丰富的老开发都知道 css 定义模块和变量的重要性，这里我不打算细说，而且在之前的项目搭建中也专门给 css 预留了模块的位置。那么在使用 <code>css/scss</code> 变量、方法的时候还是会存在一些问题:</p>
<ul>
<li>所有的变量和方法需要引入才可以使用，也就是说我的每一页都需要先引入 <code>var.scss</code> 和 <code>mixins.scss</code> 才可以使用，太麻烦了…</li>
<li>目前常见的 UI 框架当中大部分组件都有直接的定义组件颜色的属性，或者就算没有直接的属性可以修改，开发中我们也更习惯直接在行内修改组件的样式，那么，如何把我在 <code>scss</code> 中定义的变量，使用在 <code>vue</code> 的 <code>js</code>中呢？</li>
</ul>
<p>先说前者，在 <code>webpack</code> 的时候，可以使用 <code>sass-resources-loader</code> 处理，<code>vite</code>中则是有直接的<a href="https://cn.vitejs.dev/config/#css-preprocessoroptions" target="_blank" rel="noopener">配置项</a>可以实现。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>/src/hooks/glob.ts</span></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    preprocessorOptions: &#123;</span><br><span class="line">      scss: &#123;</span><br><span class="line">        additionalData: <span class="string">`@import "./src/styles/variables/index.scss";`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>而且 <code>sass</code> 支持导出变量，使用 <code>:export</code> 可以导出 <code>sass</code>变量</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>/src/hooks/glob.ts</span></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$--color-primary</span>: rgba(<span class="number">21</span>, <span class="number">134</span>, <span class="number">179</span>, <span class="number">0.9</span>);</span><br><span class="line"></span><br><span class="line">:export &#123;</span><br><span class="line">  themeColor: <span class="variable">$--color-primary</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>直接导入就可以拿到颜色的，但是直接获取的结果是纯文本，需要处理一下保存成 <code>json</code> 才可以使用。按照惯例，把它放在 <code>hooks</code>中</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>/src/hooks/glob.ts</span></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'@/styles/variables/var.scss'</span></span><br><span class="line"><span class="comment">// 可以查看一下直接引入的结果</span></span><br><span class="line"><span class="built_in">console</span>.log(styles)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useGlobCss = (): <span class="function"><span class="params">any</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cssStr = styles</span><br><span class="line">    .replace(<span class="string">':export'</span>, <span class="string">''</span>)</span><br><span class="line">    .replaceAll(<span class="string">';'</span>, <span class="string">','</span>)</span><br><span class="line">    .replace(<span class="regexp">/(?:\s*['"]*)?((rgb.+\))|(#?[a-zA-Z0-9]+))(?:['"]*\s*)?/g</span>, <span class="string">"'$1'"</span>)</span><br><span class="line">  <span class="keyword">const</span> css = <span class="built_in">eval</span>(<span class="string">`(<span class="subst">$&#123;cssStr&#125;</span>)`</span>)</span><br><span class="line">  <span class="keyword">return</span> css</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在使用的地方引用即可</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>/src/views/Home/index.vue</span></span><span class="mac-panel__language">DIFF</span></header><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="addition">+  &lt;el-button :style="&#123; color: styles.themeColor &#125;"&gt;按钮&lt;/el-button&gt;</span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang="ts"&gt;</span><br><span class="line"><span class="addition">+  import &#123; import &#123; useGlobCss &#125; from '@/hooks/globCss' &#125;</span></span><br><span class="line">   setup() &#123;</span><br><span class="line"><span class="addition">+    const styles = useGlobCss()</span></span><br><span class="line">     return &#123;</span><br><span class="line"><span class="addition">+      styles</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>
<h2 id="添加开发环境-mock-数据"><a href="#添加开发环境-mock-数据" class="headerlink" title="添加开发环境 mock 数据"></a>添加开发环境 mock 数据</h2><p>添加 <code>mockjs</code> 和 <code>vite-plugin-mock</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add mockjs</span><br><span class="line">yarn add vite-plugin-mock -D</span><br></pre></td></tr></table></figure></div>
<p>修改 <code>vite-config.ts</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">DIFF</span></header><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+  import &#123; viteMockServe &#125; from 'vite-plugin-mock'</span></span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    vue(),</span><br><span class="line"><span class="addition">+   viteMockServe(&#123;</span></span><br><span class="line"><span class="addition">+     mockPath: 'mock',</span></span><br><span class="line"><span class="addition">+     localEnabled: command === 'serve',</span></span><br><span class="line"><span class="addition">+     prodEnabled: false,</span></span><br><span class="line">    &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>
<p>修改 <code>mock</code>文件夹中的模拟请求文件，返回数据的类型为 <code>vite-plugin-mock</code> 定义的 <code>MockMethod</code></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue3</tag>
        <tag>vite</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3 脚手架（四）</title>
    <url>/blog/2021/07/06/vite-vue-4/</url>
    <content><![CDATA[<blockquote>
<p>本文仓库地址为: <a href="https://github.com/lost-dream/vue3-template" target="_blank" rel="noopener">vue3-template</a><br>书写过程中未必包含每一个细节，包括一些开发环境的依赖添加，包括一些 <code>utils</code> 函数的实现，包括一些很大的比如 <code>axios</code>模块，我都可能漏写或者没有精力详细写进去，有兴趣的可以自己去看源码</p>
</blockquote>
<h2 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h2><p>安装 <code>element-plus</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add element-plus@latest</span><br></pre></td></tr></table></figure></div>
<p>新建 <code>src/plugins</code>文件夹，管理第三方插件。该目录下新建 <code>index.ts</code> 作为出口文件暴露所有插件。新建 <code>element-ui</code> 文件夹，编辑 <code>element-plus</code> 相关配置。如果再添加其他插件，参考 <code>element-plus</code>逻辑。最终结构如下:</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">├── plugins</span><br><span class="line">│   ├── index.ts        所有插件汇总统一暴露的出口文件</span><br><span class="line">│   └── element-ui      element-plus 配置文件夹</span><br><span class="line">│       ├── index.ts    js 配置</span><br><span class="line">│       └── index.scss  自定义主题文件</span><br></pre></td></tr></table></figure></div>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">TS</span></header><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** src/plugins/element-ui/index.scss */</span></span><br><span class="line">$--color-primary: pink;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 改变 icon 字体路径变量，必需 */</span></span><br><span class="line">$--font-path: <span class="string">'node_modules/element-plus/lib/theme-chalk/fonts'</span>;</span><br><span class="line"><span class="meta">@import</span> <span class="string">'node_modules/element-plus/packages/theme-chalk/src/index.scss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** src/plugins/element-ui/index.ts */</span></span><br><span class="line"><span class="keyword">import</span> Element <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.scss'</span></span><br><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setupElementUI</span>(<span class="params">app: App&lt;Element&gt;</span>) </span>&#123;</span><br><span class="line">  app.config.globalProperties.$ELEMENT = &#123; size: <span class="string">'medium'</span>, zIndex: <span class="number">3000</span> &#125;</span><br><span class="line">  app.use(Element)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** src/plugins/index.ts */</span></span><br><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; setupElementUI &#125; <span class="keyword">from</span> <span class="string">'./element-ui'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setupGlobPlugins</span>(<span class="params">app: App&lt;Element&gt;</span>) </span>&#123;</span><br><span class="line">  setupElementUI(app)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在 <code>main.ts</code> 中注册插件</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">DIFF</span></header><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+  &#123; setupGlobPlugins &#125; from './plugins'</span></span><br><span class="line">async function bootstrap() &#123;</span><br><span class="line"><span class="addition">+  await setupGlobPlugins(app)</span></span><br><span class="line">  await setupStore(app)</span><br><span class="line">  await setupRouter(app)</span><br><span class="line"></span><br><span class="line">  // 所有组件注册完成</span><br><span class="line">  await router.isReady()</span><br><span class="line">  app.mount('#app')</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="tailwindcss"><a href="#tailwindcss" class="headerlink" title="tailwindcss"></a>tailwindcss</h2><p>参考<a href="https://tailwindcss.com/docs/guides/vue-3-vite#setting-up-tailwind-css" target="_blank" rel="noopener">官方文档</a>, 安装配置</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue3</tag>
        <tag>vite</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3 脚手架（三）</title>
    <url>/blog/2021/07/05/vite-vue-3/</url>
    <content><![CDATA[<blockquote>
<p>本文仓库地址为: <a href="https://github.com/lost-dream/vue3-template" target="_blank" rel="noopener">vue3-template</a></p>
</blockquote>
<p>开发环境和开发工具初步配置完成，开始加入 <code>vite脚手架配置</code> 和 <code>vue全家桶</code></p>
<blockquote>
<p>vue3.x 全家桶语法都有些变化，加上我在尝试 <code>composition API</code>语法，也在学习 ts，所以写起来和 vue2.x 会有很大的不同</p>
</blockquote>
<h2 id="vite-脚手架"><a href="#vite-脚手架" class="headerlink" title="vite 脚手架"></a>vite 脚手架</h2><p>关于 <code>vite</code> 的脚手架具体配置可以到<a href="https://cn.vitejs.dev/config/" target="_blank" rel="noopener">官方文档</a>查看，我这里只是简单配置了一下，更具体的配置可以写具体业务的时候再添加。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>vite.config.js</span></span><span class="mac-panel__language">DIFF</span></header><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- import &#123; defineConfig &#125; from 'vite'</span></span><br><span class="line"><span class="addition">+ import &#123; UserConfigExport, ConfigEnv &#125; from 'vite'</span></span><br><span class="line">import vue from '@vitejs/plugin-vue'</span><br><span class="line"><span class="addition">+ import &#123; resolve &#125; from 'path'</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">- export default defineConfig(&#123;</span></span><br><span class="line"><span class="addition">+ export default (&#123; command &#125;: ConfigEnv): UserConfigExport =&gt; &#123;</span></span><br><span class="line"><span class="addition">+   console.log('command :&gt;&gt; ', command)</span></span><br><span class="line"><span class="addition">+   return &#123;</span></span><br><span class="line"><span class="deletion">-   plugins: [vue()]</span></span><br><span class="line"><span class="addition">+   plugins: [vue()],</span></span><br><span class="line"><span class="addition">+   resolve: &#123;</span></span><br><span class="line"><span class="addition">+     alias: [</span></span><br><span class="line"><span class="addition">+       &#123;</span></span><br><span class="line"><span class="addition">+         find: /^@\//,</span></span><br><span class="line"><span class="addition">+         replacement: resolve(__dirname, 'src') + '/',</span></span><br><span class="line"><span class="addition">+       &#125;,</span></span><br><span class="line"><span class="addition">+       &#123;</span></span><br><span class="line"><span class="addition">+         find: /^\/#\//,</span></span><br><span class="line"><span class="addition">+         replacement: resolve(__dirname, 'types') + '/',</span></span><br><span class="line"><span class="addition">+       &#125;,</span></span><br><span class="line"><span class="addition">+     ],</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="deletion">-&#125;)</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p>参考官网，安装 <code>vue-router</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>/src/router/index.ts</span></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add vue-router@4</span><br></pre></td></tr></table></figure></div>
<p>修改路由文件配置</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>/src/router/index.ts</span></span><span class="mac-panel__language">TS</span></header><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; RouteRecordRaw &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history: createWebHashHistory(),</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'root'</span>,</span><br><span class="line">      component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/Home/index.vue'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/about'</span>,</span><br><span class="line">      name: <span class="string">'about'</span>,</span><br><span class="line">      component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/About/index.vue'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  ] <span class="keyword">as</span> RouteRecordRaw[],</span><br><span class="line">  strict: <span class="literal">true</span>,</span><br><span class="line">  scrollBehavior: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; left: <span class="number">0</span>, top: <span class="number">0</span> &#125;),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// config-router</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setupRouter</span>(<span class="params">app: App&lt;Element&gt;</span>) </span>&#123;</span><br><span class="line">  app.use(router)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在 <code>main.ts</code> 中加入 <code>vue-router</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>/src/main.ts</span></span><span class="mac-panel__language">TS</span></header><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; router, setupRouter &#125; <span class="keyword">from</span> <span class="string">'@/router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> setupRouter(app)</span><br><span class="line">  <span class="keyword">await</span> router.isReady()</span><br><span class="line">  app.mount(<span class="string">'#app'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bootstrap()</span><br></pre></td></tr></table></figure></div>
<p>修改 <code>app.vue</code>，加入 <code>router-view</code>，创建两个视图<code>Home</code>和<code>About</code>，测试 <code>router</code>是否成功。</p>
<p><strong>注意: 每一个视图组件都应该遵守以下规范:</strong></p>
<ul>
<li>视图组件为文件夹，这样方便管理只属于该模块下的子组件、静态资源、ts 模块等</li>
<li>命名必须遵循首字母大写</li>
<li>入口文件必须为 <code>index.vue</code></li>
</ul>
<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>参考官网，安装 <code>vuex</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add vuex@next vuex-persistedstate --save</span><br></pre></td></tr></table></figure></div>
<p>创建 <code>store</code>，并分割成模块，<strong>模块结构应该遵循以下规范:</strong></p>
<ul>
<li><code>store</code> 根目录下创建 <code>index.ts</code> 作为出口文件，创建 <code>types.ts</code> 作为根目录的 <code>ts</code> 类型文件。</li>
<li><code>store</code> 根目录下创建 <code>modules</code> 文件夹， <code>modules</code> 文件夹下创建各自模块的文件，同样的，每个模块下创建 <code>index.ts</code> 作为该模块的出口文件，创建 <code>types.ts</code> 作为该模块的 <code>ts</code> 类型文件。</li>
</ul>
<p>以 <code>user</code> 模块举例，此时 <code>store</code> 模块结构为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">├── store</span><br><span class="line">    ├── modules</span><br><span class="line">    │   └── user          用户模块目录</span><br><span class="line">    │       ├── index.ts  用户模块出口文件</span><br><span class="line">    │       └── types.ts  用户模块 ts 类型</span><br><span class="line">    ├── index.ts          vuex 整体出口文件</span><br><span class="line">    └── types.ts          vuex 全局 ts 类型</span><br></pre></td></tr></table></figure></div>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">TS</span></header><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/modules/user/types.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">interface</span> UserState &#123;</span><br><span class="line">  token?: <span class="built_in">string</span></span><br><span class="line">  name?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// store/modules/user/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> RootState <span class="keyword">from</span> <span class="string">'@/store/types'</span></span><br><span class="line"><span class="keyword">import</span> UserState <span class="keyword">from</span> <span class="string">'./types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userModule: Module&lt;UserState, RootState&gt; = &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    token: <span class="string">'AUTH_TOKEN_123456'</span>,</span><br><span class="line">    name: <span class="string">'赵晨敏'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    SET_TOKEN: <span class="function">(<span class="params">state, token</span>) =&gt;</span> &#123;</span><br><span class="line">      state.token = token</span><br><span class="line">    &#125;,</span><br><span class="line">    SET_NAME: <span class="function">(<span class="params">state, name</span>) =&gt;</span> &#123;</span><br><span class="line">      state.name = name</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> userModule</span><br><span class="line"></span><br><span class="line"><span class="comment">// store/user/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; InjectionKey, App &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, Store, useStore <span class="keyword">as</span> baseUseStore &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> &#123; AllState &#125; <span class="keyword">from</span> <span class="string">'./types'</span></span><br><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">'vuex-persistedstate'</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">'./modules/user'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = createStore&lt;AllState&gt;(&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    createPersistedState(&#123;</span><br><span class="line">      storage: <span class="built_in">window</span>.sessionStorage,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  modules: &#123;</span><br><span class="line">    user,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> key: InjectionKey&lt;Store&lt;AllState&gt;&gt; = Symbol(<span class="string">'vue-store'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useStore</span>&lt;<span class="title">T</span> = <span class="title">AllState</span>&gt;(<span class="params"></span>): <span class="title">Store</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> baseUseStore&lt;T&gt;(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setupStore</span>(<span class="params">app: App&lt;Element&gt;</span>) </span>&#123;</span><br><span class="line">  app.use(store, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// store/types.ts</span></span><br><span class="line"><span class="keyword">import</span> UserState <span class="keyword">from</span> <span class="string">'./modules/user/types'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/no-empty-interface</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">interface</span> RootState &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> AllState <span class="keyword">extends</span> RootState &#123;</span><br><span class="line">  user: UserState</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在 <code>main.ts</code> 中加入 <code>vuex</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">DIFF</span></header><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+  import &#123; setupStore &#125; from './store'</span></span><br><span class="line"></span><br><span class="line">async function bootstrap() &#123;</span><br><span class="line"><span class="addition">+  await setupStore(app)</span></span><br><span class="line">  await setupRouter(app)</span><br><span class="line">  await router.isReady()</span><br><span class="line">  app.mount('#app')</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在 <code>Home/index.vue</code> 中测试是否正确添加</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    &#123;&#123; name &#125;&#125; -- &#123;&#123; token &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"changeName('李四')"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; computed, defineComponent, reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">'@/store'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'Home'</span>,</span></span><br><span class="line">  setup() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> store = useStore()</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">      msg: <span class="string">'hello, home'</span>,</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> name = computed(<span class="function"><span class="params">()</span> =&gt;</span> store.state.user.name)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> token = computed(<span class="function"><span class="params">()</span> =&gt;</span> store.state.user.token)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params">name</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      store.commit(<span class="string">'user/SET_NAME'</span>, name)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      ...toRefs(state),</span><br><span class="line">      name,</span><br><span class="line">      token,</span><br><span class="line">      changeName,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>基本功能已经添加完成了，但作为开发模板还缺少 UI 功能，下一篇补充 UI 框架和 css 框架。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue3</tag>
        <tag>vite</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3 脚手架（二）</title>
    <url>/blog/2021/07/01/vite-vue-2/</url>
    <content><![CDATA[<blockquote>
<p>本文仓库地址为: <a href="https://github.com/lost-dream/vue3-template" target="_blank" rel="noopener">vue3-template</a></p>
</blockquote>
<h2 id="editorconfig"><a href="#editorconfig" class="headerlink" title="editorconfig"></a>editorconfig</h2><p>每个人都有自己的编辑器习惯，包括<code>mac</code>和<code>windows</code>环境之间编辑器本身也会有很多差异。这个时候需要一份文件统一编辑器格式。所幸现在主流的编辑器全部支持<code>.editorconfig</code>文件。同样的，具体的配置可以自行查阅文档，这里只附上我自己团队的配置。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset=utf-8</span><br><span class="line">end_of_line=lf</span><br><span class="line">insert_final_newline=true</span><br><span class="line">indent_style=space</span><br><span class="line">indent_size=2</span><br><span class="line">max_line_length = 100</span><br><span class="line"></span><br><span class="line">[*.&#123;yml,yaml,json&#125;]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">trim_trailing_whitespace = false</span><br><span class="line"></span><br><span class="line">[Makefile]</span><br><span class="line">indent_style = tab</span><br></pre></td></tr></table></figure></div>
<h2 id="vscode-配置"><a href="#vscode-配置" class="headerlink" title="vscode 配置"></a>vscode 配置</h2><p>vscode的强大归功于它的插件系统，通过各种插件可以扩展编辑器各种功能。<code>vscode</code>基于<code>js</code>语法开发，它的各种配置都可以通过写入配置文件生效。除了系统配置文件外，还支持项目定制配置。其中系统文件配置的文件，是所有使用vscode项目打开都会生效，称为<code>user</code>，项目定制的配置文件，写在项目根目录<code>.vscode</code>文件夹下，只有当前项目使用vscode 打开时才会生效，称为<code>workspace</code>。<code>.vscode</code>文件夹下通过写入配置文件来扩展各种功能，不同的文件有不同的作用，常用的文件为:</p>
<ul>
<li>extensions.json: 推荐扩展列表</li>
<li>settings.json: 项目专属设置配置信息</li>
<li>launch.json: 调试配置</li>
<li>task.json: 任务配置</li>
<li>xxx.code-snippets: 用户代码片段</li>
</ul>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>使用过vscode 的人，应该不需要我再重新强调一遍插件的强大了。这里主要说几个事情:</p>
<ul>
<li>我电脑上装了几十个插件，换了电脑开发以后还要重装一遍好麻烦…</li>
<li>我电脑上装了几十个插件，其中很多插件可以提升开发的效率，我希望我的项目在别人打开时，可以安装那些我认为优秀的插件来提升他人的效率</li>
<li>我电脑上已经配置了我自己的开发规范，奈何团队项目的规范与我本人不同，该如何保证只在那一个项目中生效别的规则呢？</li>
</ul>
<p>关于第一个问题，vscode 有一个好用的插件<a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener">Setting Sync</a>，支持将自己的插件上传到<code>github</code>，新的设备只要同步下来就可以了很方便。你也可以选择执行<code>code --list-extensions | xargs -L 1 echo code --install-extension</code>打印出本地所有的插件，然后在新机器上执行安装全部插件。</p>
<p>关于第二个问题，通过<code>code --list-extensions</code>打印出所有本地插件之后，可以在<code>.vscode</code>文件夹中新建<code>extensions.json</code>，写入你想要推荐安装的插件名字即可，写法如下:</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JSON</span></header><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"recommendations"</span>: [</span><br><span class="line">    <span class="string">"octref.vetur"</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>而解决第三个问题当然就是需要在项目的<code>settings.json</code>中覆盖系统的设置。这个文件和系统的设置文件书写格式相同，需要注意的是:</p>
<ul>
<li>虽然是<code>json</code>文件，但支持注释，建议写好注释否则插件数量增加导致配置项也增加，看上去会很乱不容易维护</li>
<li>插件列表中有丰富的插件设置，可以参考文档进行自定义</li>
<li>项目的配置会覆盖系统的配置</li>
</ul>
<h3 id="task-launch"><a href="#task-launch" class="headerlink" title="task/launch"></a>task/launch</h3><p><code>task.json</code>和<code>launch.json</code>更多用于<code>nodeJs</code>后端模块调试，我着重前端方向就不献丑了，具体可以搜索相关配置教程。</p>
<h3 id="用户代码片段"><a href="#用户代码片段" class="headerlink" title="用户代码片段"></a>用户代码片段</h3><p>比如我最喜欢用的就是 vue 的语法，在<code>系统 -- 首选项 -- 代码片段</code>中，我常常选择创建一些代码片段很方便的创建代码的模板。比如只要输入<code>vue + tab</code> 就可以生成一份 <code>vue</code> 的文件模板，那么这么强大的功能，需要我告诉团队中每个人都在自己电脑上创建一次吗？当然是不需要的。只需要创建<code>vue.code-snippets</code>文件，vscode就会记录这个代码片段，可以直接使用了。具体的片段语法可以<a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets" target="_blank" rel="noopener">看这里</a>。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue3</tag>
        <tag>vite</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3 脚手架（一）</title>
    <url>/blog/2021/06/29/vite-vue-1/</url>
    <content><![CDATA[<blockquote>
<p>这系列文章借由 vue3 脚手架搭建，过程中顺便写写自己的开发规范和编辑器习惯。<br>本文仓库地址为: <a href="https://github.com/lost-dream/vue3-template" target="_blank" rel="noopener">vue3-template</a><br><strong>所有的规范都以我的团队的开发习惯为示例，文章中只针对开发规范本身，所有的规范参照自己的团队开发</strong></p>
</blockquote>
<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello, world"></a>hello, world</h2><p>首先通过<code>vite-cli</code>搭建基础的脚手架，使用<code>vue-ts</code>模板</p>
<blockquote>
<p>vite 需要 node.js 版本 &gt;= 12.0.0</p>
</blockquote>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>.eslintrc.js</span></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yarn create @vitejs/app vue3-template --template vue-ts</span><br></pre></td></tr></table></figure></div>
<h2 id="修改项目结构"><a href="#修改项目结构" class="headerlink" title="修改项目结构"></a>修改项目结构</h2><p>安装完成后，需要修改为我们更常用的项目配置。<strong>以下是我的开发习惯</strong></p>
<ul>
<li>根目录新建<code>types</code>文件夹，用来存放各种全局的<code>ts声明文件</code>。上一步新建的项目中，<code>src</code>文件夹下的<code>shims-vue.d.ts</code>和<code>vite-env.d.ts</code>也要转移到该文件夹下统一管理。</li>
<li>根目录新建<code>mock</code>文件夹，用于开发环境模拟运行数据</li>
<li>根目录新建<code>test</code>文件夹，用于开发环境单元测试</li>
<li><code>src</code>目录下新建<ul>
<li><code>api</code>文件夹统一管理后台请求，具体到业务开发中，需要细分为和后端相同的各个功能子模块，以便日后统一开发维护</li>
<li><code>styles</code>文件夹统一管理各种全局样式文件、全局css变量、全局 css 方法等（个人使用 sass）</li>
<li><code>hooks</code>文件夹统一管理<code>composition API</code>的函数片段</li>
<li><code>router</code>文件夹管理路由</li>
<li><code>store</code>文件夹管理<code>vuex</code></li>
<li><code>utils</code>文件夹管理各种功能函数</li>
<li><code>views</code>文件夹管理各个 vue 模块</li>
</ul>
</li>
</ul>
<p>结合到项目开发中，可能还需要更多复杂的模块诸如</p>
<ul>
<li><code>locales</code> – 语言包</li>
<li><code>layout</code> – 布局结构</li>
<li><code>enums</code> – 枚举类型统一管理</li>
<li><code>directives</code>、 <code>filters</code> – vue 语法扩展</li>
<li>…</li>
</ul>
<p>根据需要再做补充</p>
<h2 id="添加开发规范"><a href="#添加开发规范" class="headerlink" title="添加开发规范"></a>添加开发规范</h2><p>没有规矩不成方圆，开发规范是团队维护项目减少开发成本最有效的方式之一</p>
<h3 id="eslint-prettier"><a href="#eslint-prettier" class="headerlink" title="eslint / prettier"></a>eslint / prettier</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>.eslintrc.js</span></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add --dev eslint prettier eslint-config-prettier eslint-plugin-prettier eslint-define-config eslint-plugin-vue @typescript-eslint/eslint-plugin @typescript-eslint/parser</span><br></pre></td></tr></table></figure></div>
<p>依赖有点多，其中<code>eslint-config-prettier</code> / <code>eslint-plugin-prettier</code> 是<code>eslint</code>的<code>prettier</code>插件，<code>eslint-plugin-vue</code>是 <code>eslint</code>的<code>vue</code>语法插件，剩下的是<code>typescript</code>语法支持。</p>
<h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>.eslintrc.js</span></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">'eslint-define-config'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = defineConfig(&#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">    es6: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  parser: <span class="string">'vue-eslint-parser'</span>,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    parser: <span class="string">'@typescript-eslint/parser'</span>,</span><br><span class="line">    ecmaVersion: <span class="number">2020</span>,</span><br><span class="line">    sourceType: <span class="string">'module'</span>,</span><br><span class="line">    jsxPragma: <span class="string">'React'</span>,</span><br><span class="line">    ecmaFeatures: &#123;</span><br><span class="line">      jsx: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  extends: [</span><br><span class="line">    <span class="string">'plugin:vue/vue3-recommended'</span>,</span><br><span class="line">    <span class="string">'plugin:@typescript-eslint/recommended'</span>,</span><br><span class="line">    <span class="string">'prettier'</span>,</span><br><span class="line">    <span class="string">'plugin:prettier/recommended'</span>,</span><br><span class="line">  ],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'@typescript-eslint/ban-ts-ignore'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/explicit-function-return-type'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/no-explicit-any'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/no-var-requires'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/no-empty-function'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'vue/custom-event-name-casing'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'no-use-before-define'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/no-use-before-define'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/ban-ts-comment'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/ban-types'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/no-non-null-assertion'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/explicit-module-boundary-types'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/no-unused-vars'</span>: [</span><br><span class="line">      <span class="string">'error'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        argsIgnorePattern: <span class="string">'^_'</span>,</span><br><span class="line">        varsIgnorePattern: <span class="string">'^_'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'no-unused-vars'</span>: [</span><br><span class="line">      <span class="string">'error'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        argsIgnorePattern: <span class="string">'^_'</span>,</span><br><span class="line">        varsIgnorePattern: <span class="string">'^_'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'space-before-function-paren'</span>: <span class="string">'off'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'vue/attributes-order'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'vue/one-component-per-file'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'vue/html-closing-bracket-newline'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'vue/max-attributes-per-line'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'vue/multiline-html-element-content-newline'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'vue/singleline-html-element-content-newline'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'vue/attribute-hyphenation'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'vue/require-default-prop'</span>: <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'vue/html-self-closing'</span>: [</span><br><span class="line">      <span class="string">'error'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        html: &#123;</span><br><span class="line">          <span class="keyword">void</span>: <span class="string">'always'</span>,</span><br><span class="line">          normal: <span class="string">'never'</span>,</span><br><span class="line">          component: <span class="string">'always'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        svg: <span class="string">'always'</span>,</span><br><span class="line">        math: <span class="string">'always'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>prettier.config.js</span></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  printWidth: <span class="number">100</span>,</span><br><span class="line">  tabWidth: <span class="number">2</span>,</span><br><span class="line">  useTabs: <span class="literal">false</span>,</span><br><span class="line">  semi: <span class="literal">false</span>,</span><br><span class="line">  singleQuote: <span class="literal">true</span>,</span><br><span class="line">  quoteProps: <span class="string">'as-needed'</span>,</span><br><span class="line">  bracketSpacing: <span class="literal">true</span>,</span><br><span class="line">  trailingComma: <span class="string">'es5'</span>,</span><br><span class="line">  jsxBracketSameLine: <span class="literal">false</span>,</span><br><span class="line">  jsxSingleQuote: <span class="literal">false</span>,</span><br><span class="line">  arrowParens: <span class="string">'always'</span>,</span><br><span class="line">  insertPragma: <span class="literal">false</span>,</span><br><span class="line">  requirePragma: <span class="literal">false</span>,</span><br><span class="line">  proseWrap: <span class="string">'never'</span>,</span><br><span class="line">  htmlWhitespaceSensitivity: <span class="string">'strict'</span>,</span><br><span class="line">  endOfLine: <span class="string">'lf'</span>,</span><br><span class="line">  rangeStart: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<h4 id="修改-package-json"><a href="#修改-package-json" class="headerlink" title="修改 package.json"></a>修改 package.json</h4><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>ROOT/stylelint.config.js</span></span><span class="mac-panel__language">DIFF</span></header><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line">  "scripts": &#123;</span><br><span class="line"><span class="addition">+   "lint:eslint": "eslint \"&#123;src,mock&#125;/**/*.&#123;vue,ts,tsx,js,jsx,css,scss,postcss&#125;\" --fix"</span></span><br><span class="line"><span class="addition">+   "lint": "yarn lint:eslint"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>
<p>表示格式化<code>src</code>文件夹下所有的<code>ts</code>、<code>js</code>、<code>vue</code>、<code>css</code>、<code>scss</code>、<code>json</code>文件，如果有额外补充，参照语法自己修改即可。</p>
<h3 id="stylelint"><a href="#stylelint" class="headerlink" title="stylelint"></a>stylelint</h3><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>ROOT/stylelint.config.js</span></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add --dev stylelint stylelint-config-prettier stylelint-config-standard stylelint-order</span><br></pre></td></tr></table></figure></div>
<h4 id="创建stylelint-config-js"><a href="#创建stylelint-config-js" class="headerlink" title="创建stylelint.config.js"></a>创建stylelint.config.js</h4><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>ROOT/stylelint.config.js</span></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  plugins: [<span class="string">'stylelint-order'</span>],</span><br><span class="line">  extends: [<span class="string">'stylelint-config-standard'</span>, <span class="string">'stylelint-config-prettier'</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="comment">// custom rules...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ignoreFiles: [<span class="string">'**/*.js'</span>, <span class="string">'**/*.jsx'</span>, <span class="string">'**/*.tsx'</span>, <span class="string">'**/*.ts'</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="修改-package-json-1"><a href="#修改-package-json-1" class="headerlink" title="修改 package.json"></a>修改 package.json</h4><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">DIFF</span></header><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line">  "scripts": &#123;</span><br><span class="line"><span class="addition">+   "lint:stylelint": "stylelint \"**/*.&#123;vue,postcss,css,scss&#125;\" --fix",</span></span><br><span class="line"><span class="deletion">-   "lint": "yarn lint:eslint"</span></span><br><span class="line"><span class="addition">+   "lint": "yarn lint:eslint &amp;&amp; yarn lint:stylelint"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="commitlint-以及-husky-lint-staged-配置"><a href="#commitlint-以及-husky-lint-staged-配置" class="headerlink" title="commitlint 以及 husky / lint-staged 配置"></a>commitlint 以及 husky / lint-staged 配置</h3><h4 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h4><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add --dev commitizen @commitlint/cli @commitlint/config-conventional commitlint-config-cz cz-conventional-changelog cz-customizable lint-staged</span><br></pre></td></tr></table></figure></div>
<h4 id="配置-husky"><a href="#配置-husky" class="headerlink" title="配置 husky"></a>配置 husky</h4><p>参照<a href="https://typicode.github.io/husky/#/?id=install" target="_blank" rel="noopener">官方文档</a>，安装<code>husky</code>并启用<code>git hooks</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">npx husky install</span><br></pre></td></tr></table></figure></div>
<p>修改<code>package.json</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">DIFF</span></header><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "scripts": &#123;</span><br><span class="line"><span class="addition">+    "prepare": "husky install"</span></span><br><span class="line"><span class="addition">+    "commit": "git-cz"</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="addition">+ "config": &#123;</span></span><br><span class="line"><span class="addition">+   "commitizen": &#123;</span></span><br><span class="line"><span class="addition">+     "path": "node_modules/cz-customizable"</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>添加<code>commit</code>规范相关的<code>git hooks</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">npx husky add .husky/commit-msg 'yarn commitlint --edit "$1"'</span><br></pre></td></tr></table></figure></div>
<p>创建<code>.cz-config.js</code>，自定义想要的提交格式。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  types: [</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'feat'</span>,</span><br><span class="line">      name: <span class="string">'✨  feat:         添加新功能'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'fix'</span>,</span><br><span class="line">      name: <span class="string">'🐞  fix:          修复bug'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'style'</span>,</span><br><span class="line">      name: <span class="string">'💅  style:        代码格式变动, 不影响代码功能的更改(修改空格/格式化代码等操作)'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'docs'</span>,</span><br><span class="line">      name: <span class="string">'📚  docs:         修改文档'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'test'</span>,</span><br><span class="line">      name: <span class="string">'🏁  test:         新增或修改测试用例'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'refactor'</span>,</span><br><span class="line">      name: <span class="string">'🛠   refactor:     既不是新增功能，也不是修改bug的代码变动'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'chore'</span>,</span><br><span class="line">      name: <span class="string">'🗯   chore:        更改环境配置相关文件'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'revert'</span>,</span><br><span class="line">      name: <span class="string">'⏪  revert:       版本回退'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'ui'</span>,</span><br><span class="line">      name: <span class="string">'✏️   ui:           只更新css样式，不涉及任何业务功能的修改'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  scopes: [],</span><br><span class="line">  allowCustomScopes: <span class="literal">true</span>,</span><br><span class="line">  allowBreakingChanges: [<span class="string">'feat'</span>, <span class="string">'fix'</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如此，执行<code>yarn commit</code>命令，会出现以下效果<br><img src="/blog/img/commitizen.jpg" alt="commitizen"><br>方向键选择要提交的类型，确定后输入提交的信息即可。当然如果你更喜欢命令行直接提交也是可以的，新建文件<code>commitlint.config.js</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ignores: [<span class="function">(<span class="params">commit</span>) =&gt;</span> commit.includes(<span class="string">'init'</span>)],</span><br><span class="line">  extends: [<span class="string">'@commitlint/config-conventional'</span>, <span class="string">'cz'</span>],</span><br><span class="line">  parserPreset: &#123;</span><br><span class="line">    parserOpts: &#123;</span><br><span class="line">      headerPattern: <span class="regexp">/^(\w*|[\u4e00-\u9fa5]*)(?:[\(\（](.*)[\)\）])?[\:\：] (.*)/</span>,</span><br><span class="line">      headerCorrespondence: [<span class="string">'type'</span>, <span class="string">'scope'</span>, <span class="string">'subject'</span>],</span><br><span class="line">      referenceActions: [</span><br><span class="line">        <span class="string">'close'</span>,</span><br><span class="line">        <span class="string">'closes'</span>,</span><br><span class="line">        <span class="string">'closed'</span>,</span><br><span class="line">        <span class="string">'fix'</span>,</span><br><span class="line">        <span class="string">'fixes'</span>,</span><br><span class="line">        <span class="string">'fixed'</span>,</span><br><span class="line">        <span class="string">'resolve'</span>,</span><br><span class="line">        <span class="string">'resolves'</span>,</span><br><span class="line">        <span class="string">'resolved'</span>,</span><br><span class="line">      ],</span><br><span class="line">      issuePrefixes: [<span class="string">'#'</span>],</span><br><span class="line">      noteKeywords: [<span class="string">'BREAKING CHANGE'</span>],</span><br><span class="line">      fieldPattern: <span class="regexp">/^-(.*?)-$/</span>,</span><br><span class="line">      revertPattern: <span class="regexp">/^Revert\s"([\s\S]*)"\s*This reverts commit (\w*)\./</span>,</span><br><span class="line">      revertCorrespondence: [<span class="string">'header'</span>, <span class="string">'hash'</span>],</span><br><span class="line">      warn() &#123;&#125;,</span><br><span class="line">      mergePattern: <span class="literal">null</span>,</span><br><span class="line">      mergeCorrespondence: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'body-leading-blank'</span>: [<span class="number">2</span>, <span class="string">'always'</span>],</span><br><span class="line">    <span class="string">'footer-leading-blank'</span>: [<span class="number">1</span>, <span class="string">'always'</span>],</span><br><span class="line">    <span class="string">'header-max-length'</span>: [<span class="number">2</span>, <span class="string">'always'</span>, <span class="number">108</span>],</span><br><span class="line">    <span class="string">'subject-empty'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">'type-empty'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="string">'type-enum'</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      <span class="string">'always'</span>,</span><br><span class="line">      [</span><br><span class="line">        <span class="string">'feat'</span>, <span class="comment">// 增加新功能</span></span><br><span class="line">        <span class="string">'fix'</span>, <span class="comment">// 修复 bug</span></span><br><span class="line">        <span class="string">'style'</span>, <span class="comment">// 修改不影响功能的代码格式（注意是代码格式，不是 css 样式）</span></span><br><span class="line">        <span class="string">'docs'</span>, <span class="comment">// 新增文档</span></span><br><span class="line">        <span class="string">'test'</span>, <span class="comment">// 新增测试用例</span></span><br><span class="line">        <span class="string">'refactor'</span>, <span class="comment">// 重构（既不是新增功能，也不是修改bug的代码变动）</span></span><br><span class="line">        <span class="string">'chore'</span>, <span class="comment">// 构建过程或辅助工具的变动</span></span><br><span class="line">        <span class="string">'revert'</span>, <span class="comment">// 版本回退</span></span><br><span class="line">        <span class="string">'ui'</span>, <span class="comment">// 只更新css样式，不涉及任何业务功能的修改</span></span><br><span class="line">      ],</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>具体规则可以查阅相关文档。需要注意的是，<code>rules</code>中的<code>type-enum</code>选项，一旦定义了，提交的信息就必须以规定过的<code>type</code>来开头。否则都会出现 error，阻止本次提交。简单来说，<code>commitlint</code>目的就是让开发者每次提交都按照规定，上面规则规定了提交的形式为<code>type: xxxxx</code>(注意冒号之后有空格)，其中 <code>type</code> 为上述定义的 type，这也是绝大部分开发者习惯的提交方式。</p>
<p>参考<a href="https://github.com/okonet/lint-staged#configuration" target="_blank" rel="noopener">lint-staged官方文档</a>，根目录添加<code>lint-staged.config.js</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">'*.&#123;js,jsx,ts,tsx,vue&#125;'</span>: [<span class="string">'npm run lint'</span>],</span><br><span class="line">  <span class="string">'package.json'</span>: [<span class="string">'prettier --write'</span>],</span><br><span class="line">  <span class="string">'*.&#123;css,scss,less,styl,html&#125;'</span>: [<span class="string">'stylelint --fix'</span>, <span class="string">'prettier --write'</span>],</span><br><span class="line">  <span class="string">'*.md'</span>: [<span class="string">'prettier --write'</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>修改<code>pre-commit</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">DIFF</span></header><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-  yarn lint</span></span><br><span class="line"><span class="addition">+  yarn lint-staged --allow-empty "$1"</span></span><br></pre></td></tr></table></figure></div>
<h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>如此，一个基本的开发架构就搭建完成了，没有规矩，不成方圆。这一篇主要制定了一系列开发规范来约束开发习惯，在我看来，团队合作开发，个人能力是不及规范来得重要的。我们规范了项目结构，规范了代码结构，规定了提交结构。接下来，<strong>工欲善其事必先利其器，下一节专门说说 vscode 的相关配置</strong></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue3</tag>
        <tag>vite</tag>
      </tags>
  </entry>
  <entry>
    <title>promise 详解</title>
    <url>/blog/2020/04/09/promise/</url>
    <content><![CDATA[<p>最近想重新换工作，几乎所有面试都会问到 promise，有简单理解的，也有问到一些比较复杂的实现，有些我是知道的但也有些是不清楚的，所以查阅资料，把关于 promise 的知识补充提升一下。</p>
<blockquote>
<p>本文旨在说明 promise，并未实现具体的 ajax 请求。</p>
</blockquote>
<h2 id="promise-的出现解决了什么样的问题"><a href="#promise-的出现解决了什么样的问题" class="headerlink" title="promise 的出现解决了什么样的问题"></a>promise 的出现解决了什么样的问题</h2><h3 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h3><p>假设一种业务场景，你需要取到所有开源库的列表（假设列表本身按照开源库热度排序），你需要读取当中热度第一的库名称，然后通过调用查询接口查出该库官方文档地址</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">ajax(<span class="string">'aaa'</span>, success(res) &#123;</span><br><span class="line">  <span class="keyword">const</span> lib = res</span><br><span class="line">  <span class="comment">// ...other code</span></span><br><span class="line">  ajax(<span class="string">`bbb`</span>, success(res) &#123;</span><br><span class="line">    <span class="comment">// ... other code</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p>事实上，真实的业务可能比例子复杂很多，而后一步的操作又必须基于上一步操作的结果，我们不得不将代码组织成这样的回调。然而这样的代码存在很大的问题：</p>
<ul>
<li>代码无法执行 return</li>
<li>回调层数过多会导致逻辑很难读懂，并且后期维护难度很大</li>
</ul>
<h3 id="条件返回"><a href="#条件返回" class="headerlink" title="条件返回"></a>条件返回</h3><p>在视频网站或者直播网站很常见到一种场景，视频会分多条线路（主线路、备用线路1、备用线路2…），业务上，打开网站的时候，会同时去请求这三个视频的接口，只要其中一个接口返回了数据，中断其他接口的请求。这样的业务需求在之前的方法中都没有很好地实现方法。</p>
<h2 id="promise-详解"><a href="#promise-详解" class="headerlink" title="promise 详解"></a>promise 详解</h2><h3 id="基本语法-amp-amp-成功处理"><a href="#基本语法-amp-amp-成功处理" class="headerlink" title="基本语法 &amp;&amp; 成功处理"></a>基本语法 &amp;&amp; 成功处理</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">'success'</span>)</span><br><span class="line">  reject(<span class="string">'error'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(</span><br><span class="line">  res=&gt; &#123; <span class="built_in">console</span>.log(<span class="string">'success'</span>, res) &#125;</span><br><span class="line">  err=&gt; &#123; <span class="built_in">console</span>.log(<span class="string">'error'</span>, err) &#125;</span><br><span class="line">)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span>=&gt;</span> &#123; <span class="built_in">console</span>.log(err) &#125;)</span><br></pre></td></tr></table></figure></div>
<ul>
<li>promise 有三个状态<ul>
<li>pending 等待结果返回（未完成）</li>
<li>fulfilled 实现（操作完成）</li>
<li>rejected 被拒绝（操作失败）</li>
<li>状态一旦改变，不会再次改变</li>
</ul>
</li>
<li>因此 promise 状态状态改变只有两种可能<ul>
<li>pending =&gt; fulfilled</li>
<li>pending =&gt; rejected</li>
</ul>
</li>
</ul>
<p>其中 pending =&gt; fulfilled 表示操作由未完成变为成功，这时会触发<code>resolve</code>，<strong>将操作的结果作为参数传递出去</strong>，pending =&gt; rejected 表示操作由未完成变为成功，这时会触发<code>reject</code>，<strong>将操作结果的错误信息作为参数传递出去。</strong><br><strong>必须注意的是，promise 会将状态传递出去，用于下一步骤操作的参数</strong></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span> &#123;</span><br><span class="line">  ajax(<span class="string">'aaa'</span>, success(data) &#123;</span><br><span class="line">    <span class="comment">// data = &#123;name: 'singleDogNo.1'&#125;</span></span><br><span class="line">    resolve(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span> &#123;</span><br><span class="line">    ajax(<span class="string">'bbb'</span>, success(data) &#123;</span><br><span class="line">      <span class="comment">// data = &#123;age: 27&#125;</span></span><br><span class="line">      resolve(...[res, data])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      name: 'singleDogNo.1',</span></span><br><span class="line"><span class="comment">      age: 27</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>promise 会自动捕捉异常，交给 rejected 函数处理</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error!'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err) <span class="comment">// error!</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p>这里需要注意的是链式执行异步操作时，你可以选择为每一步操作做错误处理，类似<code>a().then(b()).catch().then(c()).catch()</code>，也可以将错误处理放在最后执行，类似<code>a().then(b()).then(c()).catch()</code>。但一般推荐第二种方式，更加方便阅读。</p>
<p>还有一点需要注意的是 catch 本身也会返回 promise 实例，并且状态是 resolve，而且一旦执行到 catch 中，链式操作将会中断，不再继续执行。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    resolve()</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise3'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// promise1</span></span><br><span class="line"><span class="comment">// Error: error</span></span><br><span class="line"><span class="comment">// 不会继续执行 promise2 和 promise3</span></span><br></pre></td></tr></table></figure></div>
<h3 id="promise-all"><a href="#promise-all" class="headerlink" title="promise.all()"></a>promise.all()</h3><p>这个方法会在所有异步操作执行完成并且状态全部为成功的时候执行回调方法</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'num: '</span>, num);</span><br><span class="line">      <span class="keyword">if</span> (num &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        resolve(num)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">'randomA:数字大于5是不行的'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'num: '</span>, num);</span><br><span class="line">      <span class="keyword">if</span> (num &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        resolve(num)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">'randomB:数字大于5是不行的'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomC</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'num: '</span>, num);</span><br><span class="line">      <span class="keyword">if</span> (num &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        resolve(num)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">'randomC:数字大于5是不行的'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([randomA(), randomB(), randomC()]).then(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">  <span class="comment">// success: [1,2,3]</span></span><br><span class="line">  <span class="comment">// error: Uncaught (in promise) randomB:数字大于5是不行的</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p>可以复制上面代码运行，只有当三个方法值全部小于 5，才会返回正确的值。可以看到正确返回时，返回值是数组的形式。数组中每一项对应 all 方法中的每一个异步操作的结果。</p>
<h3 id="promise-race"><a href="#promise-race" class="headerlink" title="promise.race()"></a>promise.race()</h3><p>回想一下上面描述的视频平台切换可选线路的问题。在 promise 中可以使用<code>promise.race()</code>方法解决。这个方法完全区别于<code>promise.all()</code>，上面的方法在所有异步操作完成之后才执行，这个方法则是<strong>谁先完成就先处理谁的回调方法。</strong>先执行完的方法无论成功或失败，其余的操作还会继续执行，但是不会进入 race 的回调方法。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// promise.all 的例子，将 timeout 区分开来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'num: '</span>, num);</span><br><span class="line">      <span class="keyword">if</span> (num &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        resolve(num)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">'randomA:数字大于5是不行的'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'num: '</span>, num);</span><br><span class="line">      <span class="keyword">if</span> (num &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        resolve(num)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">'randomB:数字大于5是不行的'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomC</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'num: '</span>, num);</span><br><span class="line">      <span class="keyword">if</span> (num &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        resolve(num)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">'randomC:数字大于5是不行的'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([randomA(), randomB(), randomC()]).then(</span><br><span class="line">  res=&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'res: '</span>, res)</span><br><span class="line">  &#125;,</span><br><span class="line">  err=&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'err: '</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<h4 id="利用promise-race实现需求-如果接口-10s-内返回数据就处理数据，否则执行其他操作"><a href="#利用promise-race实现需求-如果接口-10s-内返回数据就处理数据，否则执行其他操作" class="headerlink" title="利用promise.race实现需求 - 如果接口 10s 内返回数据就处理数据，否则执行其他操作"></a>利用promise.race实现需求 - 如果接口 10s 内返回数据就处理数据，否则执行其他操作</h4><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span> &#123;</span><br><span class="line">    ajax(<span class="string">'url'</span>, success(res) &#123;</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      reject(<span class="string">'请求超时'</span>)</span><br><span class="line">    &#125;, <span class="number">10000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([getData(), timeout()])</span><br><span class="line">.then(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>es6</tag>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>使用SASS</title>
    <url>/blog/2017/10/20/%E4%BD%BF%E7%94%A8SASS/</url>
    <content><![CDATA[<blockquote>
<p>本文参考<a href="https://www.sass.hk/docs/" target="_blank" rel="noopener">sass 中文网</a>,仅作为个人速查文档使用</p>
</blockquote>
<h2 id="Sass简介"><a href="#Sass简介" class="headerlink" title="Sass简介"></a>Sass简介</h2><p>Sass 是一款强化 CSS 的辅助工具，它在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能，这些拓展令 CSS 更加强大与优雅。使用 Sass 以及 Sass 的样式库（如 Compass）有助于更好地组织管理样式文件，以及更高效地开发项目。</p>
<h2 id="语法风格"><a href="#语法风格" class="headerlink" title="语法风格"></a>语法风格</h2><p>Sass 有两种写法，一种是靠缩进代替花括号代替选择器，用换行代替分号，是一种简写格式，这种格式的文件以<code>.sass</code>结尾。另一种写法类似 css 写法，以<code>.scss</code>结尾。</p>
<blockquote>
<p>本文均为 scss 格式</p>
</blockquote>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Sass 语法 */</span></span><br><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span></span><br><span class="line">  color: <span class="number">#333</span></span><br><span class="line"></span><br><span class="line">/* Scss 语法 */</span><br><span class="line">body &#123;</span><br><span class="line">  font-size: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>以上俩段编译的结果是同样的结果</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">100%</span> Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="Sass-安装"><a href="#Sass-安装" class="headerlink" title="Sass 安装"></a>Sass 安装</h2><p>这里以 node-sass 为例</p>
<p>首先需要安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">NodeJs</a>，通过命令行安装：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g node-sass</span><br></pre></td></tr></table></figure></div>
<h2 id="Sass使用"><a href="#Sass使用" class="headerlink" title="Sass使用"></a>Sass使用</h2><p>在命令中运行 sass</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">node-sass input.scss output.css</span><br></pre></td></tr></table></figure></div>
<p>命令行监测单个 sass 文件，每次修改自动保存</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">node-sass -w input.scss output.css</span><br></pre></td></tr></table></figure></div>
<p>监视整个文件夹的变化</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">sass --watch app/sass:public/stylesheets</span><br></pre></td></tr></table></figure></div>
<p>更多命令通过<code>sass --help</code>查看帮助</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>Sass 默认的 CSS 输出格式很美观也能清晰反映文档结构，为满足其他需求 Sass 也提供了多种输出格式。</p>
<p>Sass 提供了四种输出格式，可以通过 <code>:style option</code> 选项设定，或者在命令行中使用 <code>--style</code> 选项。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">node-sass -w input.scss output.css --style expanded</span><br></pre></td></tr></table></figure></div>
<ul>
<li>nested – Nested （嵌套）样式是 Sass 默认的输出格式，能够清晰反映 CSS 与 HTML 的结构关系。选择器与属性等单独占用一行，缩进量与 Sass 文件中一致，每行的缩进量反映了其在嵌套规则内的层数。当阅读大型 CSS 文件时，这种样式可以很容易地分析文件的主要结构。</li>
<li>expanded – Expanded 输出更像是手写的样式，选择器、属性等各占用一行，属性根据选择器缩进，而选择器不做任何缩进。</li>
<li>compact – Compact 输出方式比起上面两种占用的空间更少，每条 CSS 规则只占一行，包含其下的所有属性。嵌套过的选择器在输出时没有空行，不嵌套的选择器会输出空白行作为分隔符。</li>
<li>compressed – Compressed 输出方式删除所有无意义的空格、空白行、以及注释，力求将文件体积压缩到最小，同时也会做出其他调整，比如会自动替换占用空间最小的颜色表达方式。</li>
</ul>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Sass 支持标准的 CSS 多行注释 <code>/* */</code>，以及单行注释 <code>//</code>，前者会 被完整输出到编译后的 CSS 文件中，而后者则不会。</p>
<h2 id="Sass功能扩展"><a href="#Sass功能扩展" class="headerlink" title="Sass功能扩展"></a>Sass功能扩展</h2><h3 id="嵌套结构"><a href="#嵌套结构" class="headerlink" title="嵌套结构"></a>嵌套结构</h3><p>Sass 允许将一套 CSS 样式嵌套进另一套样式中，内层的样式将它外层的选择器作为父选择器。</p>
<blockquote>
<p>注意不可以无节制地嵌套，会加大浏览器的负担</p>
</blockquote>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">97%</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">p</span>, <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="selector-tag">a</span> &#123; <span class="attribute">font-weight</span>: bold; &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">pre</span> &#123; <span class="attribute">font-size</span>: <span class="number">3em</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">97%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> <span class="selector-tag">p</span>, <span class="selector-id">#main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>, <span class="selector-id">#main</span> <span class="selector-tag">div</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> <span class="selector-tag">pre</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>嵌套功能避免了重复输入父选择器，而且令复杂的 CSS 结构更易于管理</p>
<h3 id="父选择器"><a href="#父选择器" class="headerlink" title="父选择器"></a>父选择器</h3><p>在嵌套 CSS 规则时，有时也需要直接使用嵌套外层的父选择器，例如，当给某个元素设定 hover 样式时，或者当 body 元素有某个 classname 时，可以用 &amp; 代表嵌套规则外层的父选择器。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  $<span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>值得注意的有两点:</p>
<ul>
<li>如果包含多层嵌套关系， &amp;会逐层向下传递</li>
<li>&amp;在编译时会完全解析为外层的父选择器名称，你可以以任何你需要的方式来操作它</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;-item &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-class">.menu-item</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="属性嵌套"><a href="#属性嵌套" class="headerlink" title="属性嵌套"></a>属性嵌套</h3><p>有些 CSS 属性遵循相同的命名空间 (namespace)，比如 <code>font-family</code>, <code>font-size</code>, <code>font-weight</code> 都以 <code>font</code> 作为属性的命名空间。为了便于管理这样的属性，同时也为了避免了重复输入，Sass 允许将属性嵌套在命名空间中。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    family: <span class="string">'iconfont'</span>;</span><br><span class="line">    size: <span class="number">20px</span>;</span><br><span class="line">    weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'iconfont'</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="SassScript"><a href="#SassScript" class="headerlink" title="SassScript"></a>SassScript</h2><p>Sass在 css 的基础上提供了一些名为 SassScript 的功能，允许使用变量、运算、函数等额外的功能。这也是 Sass 语言最强大的地方。</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>SassScript 最普遍的用法就是变量，变量以<code>$</code>开头，赋值方法与 CSS 属性的写法一样</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$width</span>: <span class="number">20px</span>;</span><br></pre></td></tr></table></figure></div>
<p>变量可以直接使用</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line">  <span class="variable">$width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">  <span class="selector-class">.menu-item</span> &#123;</span><br><span class="line">    <span class="variable">$width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-class">.menu-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以通过添加<code>!global</code>将局部变量转换为全局变量</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>sassScript支持 7 种主要的数据类型:</p>
<ul>
<li>数字 <code>1, 2, 3px</code></li>
<li>字符串，有引号字符串与无引号字符串 <code>&quot;foo&quot;, &#39;bar&#39;, baz</code></li>
<li>颜色 <code>blue, #04a3f9, rgba(255,0,0,0.5)</code></li>
<li>布尔型 <code>true, false</code></li>
<li>空值 <code>null</code></li>
<li>数组 (list)，用空格或逗号作分隔符 <code>1.5em 1em 0 2em, Helvetica, Arial, sans-serif</code></li>
<li>maps, 相当于 JavaScript 的 object <code>(key1: value1, key2: value2)</code></li>
</ul>
<p>SassScript 也支持其他 CSS 属性值，比如 Unicode 字符集，或 !important 声明。然而Sass 不会特殊对待这些属性值，一律视为无引号字符串。</p>
<h3 id="插值语句"><a href="#插值语句" class="headerlink" title="插值语句 #{}"></a>插值语句 <code>#{}</code></h3><p>通过 #{} 插值语句可以在选择器或属性名中使用变量,方式<strong>等同于es6语法中的<code>${}</code></strong></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span>: foo;</span><br><span class="line"><span class="variable">$attr</span>: border;</span><br><span class="line"><span class="variable">$color</span>: blue;</span><br><span class="line"><span class="selector-tag">p</span>.#&#123;<span class="variable">$name</span>&#125; &#123;</span><br><span class="line">  #&#123;<span class="variable">$attr</span>&#125;-<span class="attribute">color</span>: #&#123;<span class="variable">$color</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>使用插值可以避免 Sass 运行运算表达式，直接编译 CSS。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="variable">$font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="variable">$line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="variable">$width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font</span>: #&#123;<span class="variable">$font-size</span>&#125;/#&#123;<span class="variable">$line-height</span>&#125;;</span><br><span class="line">  <span class="attribute">width</span>: calc(<span class="number">100%</span> - #&#123;<span class="variable">$width</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="定义初始值"><a href="#定义初始值" class="headerlink" title="定义初始值"></a>定义初始值</h3><p>可以在变量的结尾添加 <code>!default</code> 给一个未通过 <code>!default</code> 声明赋值的变量赋值，此时，如果变量已经被赋值，不会再被重新赋值，但是如果变量还没有被赋值，则会被赋予新的值。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$content</span>: <span class="string">"First content"</span>;</span><br><span class="line"><span class="variable">$content</span>: <span class="string">"Second content?"</span> !default;</span><br><span class="line"><span class="variable">$new_content</span>: <span class="string">"First time reference"</span> !default;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="variable">$content</span>;</span><br><span class="line">  new-<span class="attribute">content</span>: <span class="variable">$new_content</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"First content"</span>;</span><br><span class="line">  <span class="attribute">new-content</span>: <span class="string">"First time reference"</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>所有数据类型均支持相等运算 == 或 !=，此外，每种数据类型也有其各自支持的运算方式。</p>
<h4 id="数字运算"><a href="#数字运算" class="headerlink" title="数字运算"></a>数字运算</h4><p>SassScript 支持数字的加减乘除、取整等运算 <code>(+, -, *, /, %)</code>，如果必要会在不同单位间转换值。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1in</span> + <span class="number">8pt</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1.111in</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<p>关系运算 &lt;, &gt;, &lt;=, &gt;= 也可用于数字运算，相等运算 ==, != 可用于所有数据类型。</p>
<h5 id="除法运算"><a href="#除法运算" class="headerlink" title="除法运算"></a>除法运算</h5><p><code>/</code> 在 CSS 中原本起到分隔数字的用途，SassScript 作为 CSS 语言的拓展在支持原本功能的同时也赋予了 <code>/</code> 除法运算的功能。也就是说，在 SassScript 中，<code>/</code>可以作为分隔符，也可以作为除法运算符。</p>
<p>以下三种情况 <code>/</code> 将被视为除法运算符号：</p>
<ul>
<li>如果值，或值的一部分，是变量或者函数的返回值</li>
<li>如果值被圆括号包裹</li>
<li>如果值是算数表达式的一部分</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">10px</span>/<span class="number">8px</span>;             <span class="comment">// css语法，作为分隔符使用</span></span><br><span class="line">  <span class="variable">$width</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>/<span class="number">2</span>;            <span class="comment">// 使用了变量，是除法运算</span></span><br><span class="line">  <span class="attribute">width</span>: round(<span class="number">1.5</span>)/<span class="number">2</span>;        <span class="comment">// 使用了函数，是除法运算</span></span><br><span class="line">  <span class="attribute">height</span>: (<span class="number">500px</span>/<span class="number">2</span>);          <span class="comment">// 使用了括号，是除法运算</span></span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span> + <span class="number">8px</span>/<span class="number">2px</span>; <span class="comment">// 使用了加号，是除法运算</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">10px</span>/<span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">9px</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<p>如果需要使用变量，同时又要确保 <code>/</code> 不做除法运算而是完整地编译到 CSS 文件中，只需要用 <code>#{}</code> 插值语句将变量包裹。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="variable">$font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="variable">$line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">font</span>: #&#123;<span class="variable">$font-size</span>&#125;/#&#123;<span class="variable">$line-height</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">30px</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="颜色值运算"><a href="#颜色值运算" class="headerlink" title="颜色值运算"></a>颜色值运算</h4><p>颜色值的运算是分段计算进行的，也就是分别计算红色，绿色，以及蓝色的值</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#010203</span> + <span class="number">#040506</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>计算 <code>01 + 04 = 05 02 + 05 = 07 03 + 06 = 09</code>，然后编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#050709</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<p>使用 <code>color functions</code> 比计算颜色值更方便一些。</p>
<p>数字与颜色值之间也可以进行算数运算，同样也是分段计算的，比如</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#010203</span> * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>计算 <code>01 * 2 = 02 02 * 2 = 04 03 * 2 = 06</code>，然后编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#020406</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<p>需要注意的是，如果颜色值包含 alpha channel（rgba 或 hsla 两种颜色值），必须拥有相等的 alpha 值才能进行运算，因为算术运算不会作用于 alpha 值。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: rgba(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) + rgba(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.75</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.75</span>); &#125;</span><br></pre></td></tr></table></figure></div>
<p>颜色值的 alpha channel 可以通过 opacify 或 transparentize 两个函数进行调整。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$translucent-red</span>: rgba(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: opacify(<span class="variable">$translucent-red</span>, <span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: transparentize(<span class="variable">$translucent-red</span>, <span class="number">0.25</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.25</span>); &#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h4><p><code>+</code> 可用于连接字符串</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: e + -resize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: e-resize; &#125;</span><br></pre></td></tr></table></figure></div>
<p>注意，如果有引号字符串（位于 + 左侧）连接无引号字符串，运算结果是有引号的，相反，无引号字符串（位于 + 左侧）连接有引号字符串，运算结果则没有引号。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"Foo "</span> + Bar;</span><br><span class="line">  <span class="attribute">font-family</span>: sans- + <span class="string">"serif"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"Foo Bar"</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif; &#125;</span><br></pre></td></tr></table></figure></div>
<p>运算表达式与其他值连用时，用空格做连接符：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">3px</span> + <span class="number">4px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">7px</span> auto; &#125;</span><br></pre></td></tr></table></figure></div>
<p>在有引号的文本字符串中使用 <code>#{}</code> 插值语句可以添加动态的值：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"I ate #&#123;5 + 10&#125; pies!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"I ate 15 pies!"</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="圆括号运算"><a href="#圆括号运算" class="headerlink" title="圆括号运算"></a>圆括号运算</h4><p>圆括号可以用来影响运算的顺序：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span> + (<span class="number">2em</span> * <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">7em</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="函数运算"><a href="#函数运算" class="headerlink" title="函数运算"></a>函数运算</h4><p>SassScript 定义了多种函数，有些甚至可以通过普通的 CSS 语句调用<br><!-- 把下面的函数直接粘贴上来 --></p>
<h2 id="Rules-amp-amp-指令"><a href="#Rules-amp-amp-指令" class="headerlink" title="@Rules &amp;&amp; 指令"></a>@Rules &amp;&amp; 指令</h2><p>Sass 支持所有的 CSS3 @-Rules，以及 Sass 特有的 “指令”（directives）。这一节会详细解释，更多资料请查看 <a href="#controlDirectives">控制指令</a> 与 <a href="mixinDirectives">混合指令</a> 两个部分。</p>
<h3 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h3><p>Sass 拓展了 <code>@import</code> 的功能，允许其导入 SCSS 或 Sass 文件。被导入的文件将合并编译到同一个 CSS 文件中，另外，被导入的文件中所包含的变量或者混合指令 (mixin) 都可以在导入的文件中使用。</p>
<p>Sass 在当前地址，或 Rack, Rails, Merb 的 Sass 文件地址寻找 Sass 文件，如果需要设定其他地址，可以用 <code>:load_paths</code> 选项，或者在命令行中输入 <code>--load-path</code> 命令。</p>
<p>通常，<code>@import</code> 寻找 Sass 文件并将其导入，但在以下情况下，<code>@import</code> 仅作为普通的 CSS 语句，不会导入任何 Sass 文件:</p>
<ul>
<li>文件拓展名是 <code>.css</code></li>
<li>文件名以 <code>http://</code> 开头</li>
<li>文件名是 <code>url()</code></li>
<li><code>@import</code> 包含 <code>media queries</code></li>
</ul>
<p>如果不在上述情况内，文件的拓展名是 <code>.scss</code> 或 <code>.sass</code>，则导入成功。没有指定拓展名，Sass 将会试着寻找文件名相同，拓展名为 <code>.scss</code> 或 <code>.sass</code> 的文件并将其导入。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"foo.scss"</span>;</span><br></pre></td></tr></table></figure></div>
<p>或</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"foo"</span>;</span><br></pre></td></tr></table></figure></div>
<p>都会导入文件 <code>foo.scss</code>，但是</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"foo.css"</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"foo"</span> screen;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"http://foo.com/bar"</span>;</span><br><span class="line"><span class="keyword">@import</span> url(foo);</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"foo.css"</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"foo"</span> screen;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"http://foo.com/bar"</span>;</span><br><span class="line"><span class="keyword">@import</span> url(foo);</span><br></pre></td></tr></table></figure></div>
<p>Sass 允许同时导入多个文件，例如同时导入 <code>rounded-corners</code> 与 <code>text-shadow</code> 两个文件：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"rounded-corners"</span>, <span class="string">"text-shadow"</span>;</span><br></pre></td></tr></table></figure></div>
<p>导入文件也可以使用 <code>#{ }</code> 插值语句，但不是通过变量动态导入 Sass 文件，只能作用于 CSS 的 <code>url()</code> 导入方式：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$family</span>: unquote(<span class="string">"Droid+Sans"</span>);</span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">"http://fonts.googleapis.com/css?family=\#&#123;$family&#125;"</span>);</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">"http://fonts.googleapis.com/css?family=Droid+Sans"</span>);</span><br></pre></td></tr></table></figure></div>
<h4 id="分音"><a href="#分音" class="headerlink" title="分音"></a>分音</h4><p>如果需要导入 SCSS 或者 Sass 文件，但又不希望将其编译为 CSS，只需要在文件名前添加下划线，这样会告诉 Sass 不要编译这些文件，但导入语句中却不需要添加下划线。</p>
<p>例如，将文件命名为 <code>_colors.scss</code>，便不会编译 <code>_colours.css</code> 文件。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"colors"</span>;</span><br></pre></td></tr></table></figure></div>
<p>上面的例子，导入的其实是 <code>_colors.scss</code> 文件</p>
<p>注意，不可以同时存在添加下划线与未添加下划线的同名文件，添加下划线的文件将会被忽略。</p>
<h4 id="嵌套-import"><a href="#嵌套-import" class="headerlink" title="嵌套 @import"></a>嵌套 @import</h4><p>大多数情况下，一般在文件的最外层（不在嵌套规则内）使用 <code>@import</code>，其实，也可以将 <code>@import</code> 嵌套进 CSS 样式或者 <code>@media</code> 中，与平时的用法效果相同，只是这样导入的样式只能出现在嵌套的层中。</p>
<p>假设 <code>example.scss</code> 文件包含以下样式：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后导入到 <code>#main</code> 样式内</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="keyword">@import</span> <span class="string">"example"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>将会被编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#main</span> <span class="selector-class">.example</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>不可以在混合指令 (mixin) 或控制指令 (control directives) 中嵌套 @import。</p>
<h3 id="media"><a href="#media" class="headerlink" title="@media"></a>@media</h3><p>Sass 中 <code>@media</code> 指令与 CSS 中用法一样，只是增加了一点额外的功能：允许其在 CSS 规则中嵌套。如果 <code>@media</code> 嵌套在 CSS 规则内，编译时，<code>@media</code> 将被编译到文件的最外层，包含嵌套的父选择器。这个功能让 <code>@media</code> 用起来更方便，不需要重复使用选择器，也不会打乱 CSS 的书写流程。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (orientation: landscape) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>; &#125;</span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">orientation:</span> landscape) &#123;</span><br><span class="line">    <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">500px</span>; &#125; &#125;</span><br></pre></td></tr></table></figure></div>
<p><code>@media</code> 的 queries 允许互相嵌套使用，编译时，Sass 自动添加 <code>and</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="keyword">@media</span> (orientation: landscape) &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">orientation:</span> landscape) &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>; &#125; &#125;</span><br></pre></td></tr></table></figure></div>
<p><code>@media</code> 甚至可以使用 SassScript（比如变量，函数，以及运算符）代替条件的名称或者值：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$media</span>: screen;</span><br><span class="line"><span class="variable">$feature</span>: -webkit-min-device-pixel-ratio;</span><br><span class="line"><span class="variable">$value</span>: <span class="number">1.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> #&#123;<span class="variable">$media</span>&#125; and (<span class="variable">$feature</span>: <span class="variable">$value</span>) &#123;</span><br><span class="line">  .sidebar &#123;</span><br><span class="line">    width: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio:</span> <span class="number">1.5</span>) &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>; &#125; &#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="extend"><a href="#extend" class="headerlink" title="@extend"></a>@extend</h3><p>在设计网页的时候常常遇到这种情况：一个元素使用的样式与另一个元素完全相同，但又添加了额外的样式。通常会在 HTML 中给元素定义两个 class，一个通用样式，一个特殊样式。假设现在要设计一个普通错误样式与一个严重错误样式，一般会这样写：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"error seriousError"</span>&gt;</span></span><br><span class="line">  Oh no! You've been hacked!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>样式如下</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>麻烦的是，这样做必须时刻记住使用 <code>.seriousError</code> 时需要参考 <code>.error</code> 的样式，带来了很多不便：比如加重维护负担，导致 bug，或者给 HTML 添加无语意的样式。使用 @extend 可以避免上述情况，告诉 Sass 将一个选择器下的所有样式继承给另一个选择器。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码的意思是将 <code>.error</code> 下的所有样式继承给 <code>.seriousError，border-width: 3px;</code> 是单独给 <code>.seriousError</code> 设定特殊样式，这样，使用 <code>.seriousError</code> 的地方可以不再使用 <code>.error</code>。</p>
<p>其他使用到 <code>.error</code> 的样式也会同样继承给 <code>.seriousError</code>，例如，另一个样式 <code>.error.intrusion</code> 使用了 <code>hacked.png</code> 做背景，<code>&lt;div class=&quot;seriousError intrusion&quot;&gt;</code> 也同样会使用 hacked.png 背景。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span><span class="selector-class">.intrusion</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/image/hacked.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h4><p><code>@extend</code> 的作用是将重复使用的样式 <code>(.error)</code> 延伸 <code>(extend)</code> 给需要包含这个样式的特殊样式<code>（.seriousError）</code>，刚刚的例子：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.error</span><span class="selector-class">.intrusion</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">"/image/hacked.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span>, <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span><span class="selector-class">.intrusion</span>, <span class="selector-class">.seriousError</span><span class="selector-class">.intrusion</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/image/hacked.png"</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<p>当合并选择器时，<code>@extend</code> 会很聪明地避免无谓的重复，<code>.seriousError.seriousError</code> 将编译为 <code>.seriousError</code>，不能匹配任何元素的选择器（比如 <code>#main#footer</code> ）也会删除。</p>
<h4 id="延伸复杂的选择器"><a href="#延伸复杂的选择器" class="headerlink" title="延伸复杂的选择器"></a>延伸复杂的选择器</h4><p>Class 选择器并不是唯一可以被延伸 (extend) 的，Sass 允许延伸任何定义给单个元素的选择器，比如 <code>.special.cool</code>，<code>a:hover</code> 或者 <code>a.user[href^=&quot;http://&quot;]</code> 等，例如：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hoverlink</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> a:hover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>同 class 元素一样，<code>a:hover</code> 的样式将继承给 <code>.hoverlink</code>。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hoverlink</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> a:hover;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.hoverlink</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure></div>
<p>与上面 <code>.error.intrusion</code> 的例子一样，所有 <code>a:hover</code> 的样式将继承给 <code>.hoverlink</code>，包括其他使用到 <code>a:hover</code> 的样式，例如：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hoverlink</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> a:hover;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-tag">a</span><span class="selector-class">.user</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.comment</span> <span class="selector-tag">a</span><span class="selector-class">.user</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.comment</span> <span class="selector-class">.user</span><span class="selector-class">.hoverlink</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="多重延伸"><a href="#多重延伸" class="headerlink" title="多重延伸"></a>多重延伸</h4><p>同一个选择器可以延伸给多个选择器，它所包含的属性将继承给所有被延伸的选择器：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.attention</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .error;</span><br><span class="line">  <span class="keyword">@extend</span> .attention;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span>, <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.attention</span>, <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<p>每个 <code>.seriousError</code> 将包含 <code>.error</code> 与 <code>.attention</code> 下的所有样式，这时，后定义的样式享有优先权：<code>.seriousError</code> 的背景颜色是 <code>#ff0</code> 而不是 <code>#fdd</code>，因为 <code>.attention</code> 在 <code>.error</code> 之后定义。</p>
<p>多重延伸可以使用逗号分隔选择器名，比如 <code>@extend .error, .attention;</code> 与 <code>@extend .error; @extend.attention</code> 有相同的效果。</p>
<h4 id="继续延伸"><a href="#继续延伸" class="headerlink" title="继续延伸"></a>继续延伸</h4><p>当一个选择器延伸给第二个后，可以继续将第二个选择器延伸给第三个，例如：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.criticalError</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .seriousError;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>现在，每个 <code>.seriousError</code> 选择器将包含 <code>.error</code> 的样式，而 <code>.criticalError</code> 不仅包含 <code>.seriousError</code> 的样式也会同时包含 <code>.error</code> 的所有样式，上面的代码编译为：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span>, <span class="selector-class">.seriousError</span>, <span class="selector-class">.criticalError</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seriousError</span>, <span class="selector-class">.criticalError</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.criticalError</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10%</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="选择器列"><a href="#选择器列" class="headerlink" title="选择器列"></a>选择器列</h4><p>不可以将选择器列（比如 <code>.foo .bar</code> 或 <code>.foo + .bar</code>）延伸给其他元素，但是，却可以将其他元素延伸给选择器列：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#fake-links</span> <span class="selector-class">.link</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>, <span class="selector-id">#fake-links</span> <span class="selector-class">.link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue; &#125;</span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-id">#fake-links</span> <span class="selector-class">.link</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="合并选择器列"><a href="#合并选择器列" class="headerlink" title="合并选择器列"></a>合并选择器列</h5><p>有时会遇到复杂的情况，比如选择器列中的某个元素需要延伸给另一个选择器列，这种情况下，两个选择器列需要合并，比如：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#demo</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>技术上讲能够生成所有匹配条件的结果，但是这样生成的样式表太复杂了，上面这个简单的例子就可能有 10 种结果。所以，Sass 只会编译输出有用的选择器。</p>
<p>当两个列 (sequence) 合并时，如果没有包含相同的选择器，将生成两个新选择器：第一列出现在第二列之前，或者第二列出现在第一列之前：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#demo</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-id">#demo</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span>,</span><br><span class="line"><span class="selector-id">#demo</span> <span class="selector-class">.overview</span> <span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure></div>
<p>如果两个列 (sequence) 包含了相同的选择器，相同部分将会合并在一起，其他部分交替输出。在下面的例子里，两个列都包含 <code>#admin</code>，输出结果中它们合并在了一起：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span>,</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.overview</span> <span class="selector-class">.tabbar</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="extend-Only-选择器"><a href="#extend-Only-选择器" class="headerlink" title="@extend-Only 选择器"></a>@extend-Only 选择器</h4><p>有时，需要定义一套样式并不是给某个元素用，而是只通过 <code>@extend</code> 指令使用，尤其是在制作 <code>Sass</code> 样式库的时候，希望 <code>Sass</code> 能够忽略用不到的样式。</p>
<p>如果使用普通的 CSS 规则，最后会编译出很多用不到的样式，也容易与其他样式名冲突，所以，Sass 引入了“占位符选择器” (placeholder selectors)，看起来很像普通的 <code>id</code> 或 <code>class</code> 选择器，只是 <code>#</code> 或 <code>.</code> 被替换成了 <code>%</code>。可以像 <code>class</code> 或者 <code>id</code> 选择器那样使用，当它们单独使用时，不会被编译到 CSS 文件中。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This ruleset won't be rendered on its own.</span></span><br><span class="line"><span class="selector-id">#context</span> <span class="selector-tag">a</span>%extreme &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>占位符选择器需要通过延伸指令使用，用法与 <code>class</code> 或者 <code>id</code> 选择器一样，被延伸后，占位符选择器本身不会被编译。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.notice</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %extreme;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#context</span> <span class="selector-tag">a</span><span class="selector-class">.notice</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="在指令之延伸"><a href="#在指令之延伸" class="headerlink" title="在指令之延伸"></a>在指令之延伸</h4><p>在指令中使用 <code>@extend</code> 时（比如在 @media 中）有一些限制：Sass 不可以将 <code>@media</code> 层外的 CSS 规则延伸给指令层内的 CSS，这样会生成大量的无用代码。也就是说，如果在 <code>@media</code> （或者其他 CSS 指令）中使用 <code>@extend</code>，必须延伸给相同指令层中的选择器。</p>
<p>下面的例子是可行的：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> .error;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>但不可以这样：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">    <span class="comment">// INVALID EXTEND: .error is used outside of the "@media print" directive</span></span><br><span class="line">    <span class="keyword">@extend</span> .error;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>希望有一天，浏览器可以原生支持 <code>@extend</code> 指令，这样就可以在任何指令中使用延伸功能，不再受限制了。</p>
<h2 id="控制指令"><a href="#控制指令" class="headerlink" title="控制指令"></a>控制指令</h2><p>SassScript 提供了一些基础的控制指令，比如在满足一定条件时引用样式，或者设定范围重复输出格式。控制指令是一种高级功能，日常编写过程中并不常用到，主要与混合指令 (mixin) 配合使用。</p>
<h3 id="if"><a href="#if" class="headerlink" title="@if"></a>@if</h3><p>当 @if 的表达式返回值不是 <code>false</code> 或者 <code>null</code> 时，条件成立，输出 <code>{}</code> 内的代码：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid; &#125;</span><br><span class="line">  <span class="keyword">@if</span> <span class="number">5</span> &lt; <span class="number">3</span> &#123; <span class="attribute">border</span>: <span class="number">2px</span> dotted; &#125;</span><br><span class="line">  <span class="keyword">@if</span> null  &#123; <span class="attribute">border</span>: <span class="number">3px</span> double; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid; &#125;</span><br></pre></td></tr></table></figure></div>
<p><code>@if</code> 声明后面可以跟多个 <code>@else if</code> 声明，或者一个 <code>@else</code> 声明。如果 <code>@if</code> 声明失败，Sass 将逐条执行 <code>@else if</code> 声明，如果全部失败，最后执行 <code>@else</code> 声明，例如：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$type</span>: monster;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$type</span> == ocean &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125; <span class="keyword">@else</span> if <span class="variable">$type</span> == matador &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125; <span class="keyword">@else</span> if <span class="variable">$type</span> == monster &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="for"><a href="#for" class="headerlink" title="@for"></a>@for</h3><p><code>@for</code> 指令可以在限制的范围内重复输出格式，每次按要求（变量的值）对输出结果做出变动。这个指令包含两种格式：<code>@for $var from &lt;start&gt; through &lt;end&gt;</code>，或者 <code>@for $var from &lt;start&gt; to &lt;end&gt;</code>，区别在于 <code>through</code> 与 <code>to</code> 的含义：当使用 <code>through</code> 时，条件范围包含 <code>&lt;start&gt;</code> 与 <code>&lt;end&gt;</code> 的值，而使用 <code>to</code> 时条件范围只包含 <code>&lt;start&gt;</code> 的值不包含 <code>&lt;end&gt;</code> 的值。另外，<code>$var</code> 可以是任何变量，比如 <code>$i</code>；<code>&lt;start&gt;</code> 和 <code>&lt;end&gt;</code> 必须是整数值。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">3</span> &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2em</span>; &#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4em</span>; &#125;</span><br><span class="line"><span class="selector-class">.item-3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">6em</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h3><p><code>@each</code> 指令的格式是 <code>$var in &lt;list&gt;</code>, <code>$var</code> 可以是任何变量名，比如 <code>$length</code> 或者 <code>$name</code>，而 <code>&lt;list&gt;</code> 是一连串的值，也就是值列表。</p>
<p><code>@each</code> 将变量 <code>$var</code> 作用于值列表中的每一个项目，然后输出结果，例如：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$animal</span> in puma, sea-slug, egret, salamander &#123;</span><br><span class="line">  .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'/images/#&#123;$animal&#125;.png'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.puma-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/puma.png'</span>); &#125;</span><br><span class="line"><span class="selector-class">.sea-slug-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/sea-slug.png'</span>); &#125;</span><br><span class="line"><span class="selector-class">.egret-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/egret.png'</span>); &#125;</span><br><span class="line"><span class="selector-class">.salamander-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/salamander.png'</span>); &#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="while"><a href="#while" class="headerlink" title="@while"></a>@while</h3><p><code>@while</code> 指令重复输出格式直到表达式返回结果为 <code>false</code>。这样可以实现比 <code>@for</code> 更复杂的循环，只是很少会用到。例如：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$i</span>: <span class="number">6</span>;</span><br><span class="line"><span class="keyword">@while</span> <span class="variable">$i</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</span><br><span class="line">  <span class="variable">$i</span>: <span class="variable">$i</span> - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-6</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12em</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8em</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4em</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="混合指令"><a href="#混合指令" class="headerlink" title="混合指令"></a>混合指令</h2><p>混合指令（Mixin）用于定义可重复使用的样式，避免了使用无语意的 class，比如 <code>.float-left</code>。混合指令可以包含所有的 CSS 规则，绝大部分 Sass 规则，甚至通过参数功能引入变量，输出多样化的样式。</p>
<h3 id="定义混合指令-mixin"><a href="#定义混合指令-mixin" class="headerlink" title="定义混合指令 @mixin"></a>定义混合指令 <code>@mixin</code></h3><p>混合指令的用法是在 <code>@mixin</code> 后添加名称与样式，比如名为 <code>large-text</code> 的混合通过下面的代码定义</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> large-text &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    family: Arial;</span><br><span class="line">    size: <span class="number">20px</span>;</span><br><span class="line">    weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>混合指令也可以包含选择器和属性，甚至可以用 <code>&amp;</code> 引用父选择器</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> clearfix &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"."</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">  * <span class="selector-tag">html</span> &amp; &#123; <span class="attribute">height</span>: <span class="number">1px</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="引用混合指令-include"><a href="#引用混合指令-include" class="headerlink" title="引用混合指令 @include"></a>引用混合指令 <code>@include</code></h3><p>使用 <code>@include</code> 指令引用混合样式</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.page-title</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> large-text;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.page-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>混合指令类似于 javascript 函数,除非引用，否则不会出现在结果中**</p>
</blockquote>
<p>也可以不使用父选择器在最外层直接引用混合样式</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> silly-links &#123;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@include</span> silly-links;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">background-color</span>: red; &#125;</span><br></pre></td></tr></table></figure></div>
<p>混合样式中也可以包含其他混合样式，比如</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> compound &#123;</span><br><span class="line">  <span class="keyword">@include</span> highlighted-background;</span><br><span class="line">  <span class="keyword">@include</span> header-text;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@mixin</span> highlighted-background &#123; <span class="attribute">background-color</span>: <span class="number">#fc0</span>; &#125;</span><br><span class="line"><span class="keyword">@mixin</span> header-text &#123; <span class="attribute">font-size</span>: <span class="number">20px</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<p>混合样式中应该只定义后代选择器，这样可以安全的导入到文件的任何位置。</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>参数用于给混合指令中的样式设定变量，并且赋值使用。在定义混合指令的时候，按照变量的格式，通过逗号分隔，将参数写进圆括号里。引用指令时，按照参数的顺序，再将所赋的值对应写进括号</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> sexy-border(<span class="variable">$color</span>, <span class="variable">$width</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">    color: <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">    <span class="selector-tag">style</span>: dashed;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="keyword">@include</span> sexy-border(blue, <span class="number">1in</span>); &#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: blue;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1in</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: dashed; &#125;</span><br></pre></td></tr></table></figure></div>
<p>混合指令也可以使用给变量赋值的方法给参数设定默认值，然后，当这个指令被引用的时候，如果没有给参数赋值，则自动使用默认值：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> sexy-border(<span class="variable">$color</span>, <span class="variable">$width</span>: <span class="number">1in</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">    color: <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">    <span class="selector-tag">style</span>: dashed;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="keyword">@include</span> sexy-border(blue); &#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="keyword">@include</span> sexy-border(blue, <span class="number">2in</span>); &#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: blue;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1in</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: dashed; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: blue;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">2in</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: dashed; &#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="关键词参数"><a href="#关键词参数" class="headerlink" title="关键词参数"></a>关键词参数</h3><p>混合指令也可以使用关键词参数，上面的例子也可以写成：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; <span class="keyword">@include</span> sexy-border(<span class="variable">$color</span>: blue); &#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="keyword">@include</span> sexy-border(<span class="variable">$color</span>: blue, <span class="variable">$width</span>: <span class="number">2in</span>); &#125;</span><br></pre></td></tr></table></figure></div>
<p>虽然不够简明，但是阅读起来会更方便。关键词参数给函数提供了更灵活的接口，以及容易调用的参数。关键词参数可以打乱顺序使用，如果使用默认值也可以省缺，另外，参数名被视为变量名，下划线、短横线可以互换使用。</p>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>有时，不能确定混合指令需要使用多少个参数，比如一个关于 <code>box-shadow</code> 的混合指令不能确定有多少个 ‘shadow’ 会被用到。这时，可以使用参数变量 <code>…</code> 声明（写在参数的最后方）告诉 Sass 将这些参数视为值列表处理</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> box-shadow(<span class="variable">$shadows</span>...) &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.shadows</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> box-shadow(<span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.shadows</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>有时，我们可以确定混合指令中的部分参数，其余的参数数不确定的</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> test(<span class="variable">$color</span>, <span class="variable">$shadows</span>...) &#123;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$color</span>: red;</span><br><span class="line"><span class="variable">$shadows</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line"><span class="keyword">@include</span> test(<span class="variable">$color</span>, <span class="variable">$shadows</span>)</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p><strong>一定要注意，可变参数必须放在最后</strong></p>
</blockquote>
<h3 id="向混合样式中导入内容"><a href="#向混合样式中导入内容" class="headerlink" title="向混合样式中导入内容"></a>向混合样式中导入内容</h3><p>在引用混合样式的时候，可以先将一段代码导入到混合指令中，然后再输出混合样式，额外导入的部分将出现在 <code>@content</code> 标志的地方：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> apply-to-ie6-<span class="keyword">only</span> &#123;</span><br><span class="line">  * <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="keyword">@content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@include</span> apply-to-ie6-<span class="keyword">only</span> &#123;</span><br><span class="line">  <span class="selector-id">#logo</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'/logo.gif'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">* <span class="selector-tag">html</span> <span class="selector-id">#logo</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(/logo.gif);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>当 @content 在指令中出现过多次或者出现在循环中时，额外的代码将被导入到每一个地方。</p>
</blockquote>
<h2 id="函数指令"><a href="#函数指令" class="headerlink" title="函数指令"></a>函数指令</h2><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p>Sass 支持自定义函数，并能在任何属性值或 SassScript 中使用：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$grid-width</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="variable">$gutter-width</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@function</span> grid-width(<span class="variable">$n</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$n</span> * <span class="variable">$grid-width</span> + (<span class="variable">$n</span> - <span class="number">1</span>) * <span class="variable">$gutter-width</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#sidebar</span> &#123; <span class="attribute">width</span>: grid-width(<span class="number">5</span>); &#125;</span><br></pre></td></tr></table></figure></div>
<p>编译为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">240px</span>; &#125;</span><br></pre></td></tr></table></figure></div>
<p>与 mixin 相同，也可以传递若干个全局变量给函数作为参数。一个函数可以含有多条语句，需要调用 <code>@return</code> 输出结果。</p>
<p>自定义的函数也可以使用关键词参数，上面的例子还可以这样写：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span> &#123; <span class="attribute">width</span>: grid-width(<span class="variable">$n</span>: <span class="number">5</span>); &#125;</span><br></pre></td></tr></table></figure></div>
<p>建议在自定义函数前添加前缀避免命名冲突，其他人阅读代码时也会知道这不是 Sass 或者 CSS 的自带功能。</p>
<h3 id="sass-中内置的函数"><a href="#sass-中内置的函数" class="headerlink" title="sass 中内置的函数"></a>sass 中内置的函数</h3><ul>
<li>字符串函数<ul>
<li>unquote</li>
<li>quote</li>
<li>To-upper-case</li>
<li>To-lower-case</li>
<li>percentage</li>
<li>round</li>
<li>ceil</li>
<li>floor</li>
<li>abs</li>
<li>min</li>
<li>max</li>
<li>random</li>
</ul>
</li>
<li>列表函数<ul>
<li>length  列表数据的长度</li>
<li>nth  (10px 20px 30px, 1)</li>
<li>join  join(10px 20px, 30px 40px)</li>
<li>append  append(10px 20px ,30px)</li>
<li>zip  zip(1px 2px 3px,solid dashed dotted,green blue red)</li>
<li>index  index(1px solid red, solid)</li>
<li>type-of  type-of(100)</li>
<li>unit  取单位</li>
<li>unitless  判断一个值是否带有单位</li>
<li>comparable  判断两个数是否可以进行加减合并</li>
<li>if(true,1px,2px)</li>
</ul>
</li>
<li>Maps函数<ul>
<li>map-get</li>
<li>map-has-key</li>
<li>map-keys</li>
<li>map-values</li>
<li>map-merge</li>
<li>map-remove</li>
<li>keywords</li>
</ul>
</li>
<li>颜色函数<ul>
<li>rgb</li>
<li>rgba</li>
<li>red</li>
<li>green</li>
<li>blue</li>
<li>mix  混合两种颜色 第三个参数为第一种颜色的比例  mix(blue,red,20%)</li>
<li>lighten  lighten(red, 20%)</li>
<li>darken  darken(red,30%)</li>
<li>saturate  改变颜色的饱和度 参数单位为百分比 saturate(blue,20%)</li>
<li>desaturate</li>
<li>adjust-hue  通过调整色相 adjust-hue(blue,30deg)</li>
<li>grayscale  直接让饱和度为0  grayscale(blue)</li>
<li>alpha  获取透明度</li>
<li>opacity  获取透明度</li>
<li>rgba</li>
<li>fade-in  增加透明度</li>
<li>transparentize  减少透明度</li>
<li>fade-out  减少透明度</li>
</ul>
</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$map</span>: (</span><br><span class="line">  <span class="variable">$key1</span>: value1,</span><br><span class="line">  <span class="variable">$key2</span>: value2,</span><br><span class="line">  <span class="variable">$key3</span>: value3</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$map</span>: (</span><br><span class="line">  key1: value1,</span><br><span class="line">  key2: (</span><br><span class="line">    key-<span class="number">1</span>: value-<span class="number">1</span>,</span><br><span class="line">    key-<span class="number">2</span>: value-<span class="number">2</span>,</span><br><span class="line">  ),</span><br><span class="line">key3: value3</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$theme-color</span>: (</span><br><span class="line">  default: (</span><br><span class="line">      bgcolor: <span class="number">#fff</span>,</span><br><span class="line">      text-color: <span class="number">#444</span>,</span><br><span class="line">      link-color: <span class="number">#39f</span></span><br><span class="line">  ),</span><br><span class="line">  primary:(</span><br><span class="line">      bgcolor: <span class="number">#000</span>,</span><br><span class="line">      text-color:<span class="number">#fff</span>,</span><br><span class="line">      link-color: <span class="number">#93f</span></span><br><span class="line">  ),</span><br><span class="line">  negative: (</span><br><span class="line">      bgcolor: <span class="number">#f36</span>,</span><br><span class="line">      text-color: <span class="number">#fefefe</span>,</span><br><span class="line">      link-color: <span class="number">#d4e</span></span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* map-get */</span></span><br><span class="line"><span class="variable">$social-colors</span>: (</span><br><span class="line">  dribble: <span class="number">#ea4c89</span>,</span><br><span class="line">  facebook: <span class="number">#3b5998</span>,</span><br><span class="line">  github: <span class="number">#171515</span>,</span><br><span class="line">  google: <span class="number">#db4437</span>,</span><br><span class="line">  twitter: <span class="number">#55acee</span></span><br><span class="line">);</span><br><span class="line"><span class="selector-class">.btn-dribble</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: map-get(<span class="variable">$social-colors</span>,facebook);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 没有值不会报错 */</span></span><br><span class="line"><span class="selector-class">.btn-weibo</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">color</span>: map-get(<span class="variable">$social-colors</span>,weibo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* map中的容错函数 */</span></span><br><span class="line">   <span class="keyword">@function</span> colors(<span class="variable">$color</span>)&#123;</span><br><span class="line">     <span class="keyword">@if</span> <span class="keyword">not</span> map-has-key(<span class="variable">$social-colors</span>,<span class="variable">$color</span>)&#123;</span><br><span class="line">         <span class="keyword">@warn</span> <span class="string">"No color found for `#&#123;$color&#125;` in $social-colors map. Property omitted."</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">@return</span> map-get(<span class="variable">$social-colors</span>,<span class="variable">$color</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.btn-dribble</span> &#123;</span><br><span class="line">     <span class="attribute">color</span>: colors(dribble);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* each 遍历 map */</span></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$name</span> in map-keys(<span class="variable">$social-colors</span>)&#123;</span><br><span class="line">  <span class="selector-class">.btn-</span>#&#123;<span class="variable">$name</span>&#125;&#123;</span><br><span class="line">      <span class="attribute">color</span>: colors(<span class="variable">$name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through length(map-keys(<span class="variable">$social-colors</span>))&#123;</span><br><span class="line">  <span class="selector-class">.btn-</span>#&#123;nth(<span class="selector-tag">map</span>-keys(<span class="variable">$social-colors</span>),<span class="variable">$i</span>)&#125; &#123;</span><br><span class="line">    <span class="attribute">color</span>: colors(nth(map-keys(<span class="variable">$social-colors</span>),<span class="variable">$i</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*得到所有的值*/</span></span><br><span class="line"><span class="variable">$values</span>: map-values(<span class="variable">$social-colors</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$color</span>: (</span><br><span class="line">  text: <span class="number">#f36</span>,</span><br><span class="line">  link: <span class="number">#f63</span>,</span><br><span class="line">  border: <span class="number">#ddd</span>,</span><br><span class="line">  backround: <span class="number">#fff</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$typo</span>:(</span><br><span class="line">  font-size: <span class="number">12px</span>,</span><br><span class="line">  line-height: <span class="number">1.6</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$newcolor</span>: map-merge(<span class="variable">$color</span>, <span class="variable">$typo</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 得到新值 */</span></span><br><span class="line"><span class="variable">$map</span>:map-remove(<span class="variable">$social-colors</span>,dribble);</span><br></pre></td></tr></table></figure></div>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"swatches red"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"swatches orange"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  …</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"swatches yellow"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  …</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"swatches green"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  …</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"swatches blue"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  …</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"swatches purple"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  …</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$redBase</span>: <span class="number">#DC143C</span>;</span><br><span class="line"><span class="variable">$orangeBase</span>: saturate(lighten(adjust_hue(<span class="variable">$redBase</span>, <span class="number">39</span>), <span class="number">5</span>), <span class="number">7</span>);<span class="comment">//#f37a16</span></span><br><span class="line"><span class="variable">$yellowBase</span>: saturate(lighten(adjust_hue(<span class="variable">$redBase</span>, <span class="number">64</span>), <span class="number">6</span>), <span class="number">13</span>);<span class="comment">//#fbdc14</span></span><br><span class="line"><span class="variable">$greenBase</span>: desaturate(darken(adjust_hue(<span class="variable">$redBase</span>, <span class="number">102</span>), <span class="number">2</span>), <span class="number">11</span>);<span class="comment">//#73c620</span></span><br><span class="line"><span class="variable">$blueBase</span>: saturate(darken(adjust_hue(<span class="variable">$redBase</span>, <span class="number">201</span>), <span class="number">2</span>), <span class="number">1</span>);<span class="comment">//#12b7d4</span></span><br><span class="line"><span class="variable">$purpleBase</span>: saturate(darken(adjust_hue(<span class="variable">$redBase</span>, <span class="number">296</span>), <span class="number">2</span>), <span class="number">1</span>);<span class="comment">//#a012d4</span></span><br><span class="line"><span class="variable">$blackBase</span>: <span class="number">#777</span>;</span><br><span class="line"><span class="variable">$bgc</span>: <span class="number">#fff</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义颜色变暗的 mixin</span></span><br><span class="line"><span class="keyword">@mixin</span> swatchesDarken(<span class="variable">$color</span>) &#123;</span><br><span class="line">  <span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">10</span> &#123;</span><br><span class="line">    <span class="variable">$x</span>:<span class="variable">$i</span>+<span class="number">11</span>;</span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(#&#123;<span class="variable">$x</span>&#125;) &#123;</span><br><span class="line">      <span class="variable">$n</span>:<span class="variable">$i</span>*<span class="number">5</span>;</span><br><span class="line">      <span class="variable">$bgc</span>:darken(<span class="variable">$color</span>,<span class="variable">$n</span>); <span class="comment">//颜色变暗</span></span><br><span class="line">      <span class="attribute">background-color</span>: <span class="variable">$bgc</span>;</span><br><span class="line">      &amp;<span class="selector-pseudo">:hover</span><span class="selector-pseudo">:before</span> &#123; <span class="comment">//hover状态显示颜色编号</span></span><br><span class="line">        <span class="attribute">content</span>: <span class="string">"#&#123;$bgc&#125;"</span>;</span><br><span class="line">        <span class="attribute">color</span>: lighten(<span class="variable">$bgc</span>,<span class="number">40</span>);</span><br><span class="line">        <span class="attribute">font-family</span>: verdana;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">8px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义颜色变亮的 mixin</span></span><br><span class="line"><span class="keyword">@mixin</span> swatchesLighten(<span class="variable">$color</span>) &#123;</span><br><span class="line">  <span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">10</span> &#123;</span><br><span class="line">    <span class="variable">$x</span>:<span class="number">11</span>-<span class="variable">$i</span>;</span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(#&#123;<span class="variable">$x</span>&#125;) &#123;</span><br><span class="line">      <span class="variable">$n</span>:<span class="variable">$i</span>*<span class="number">5</span>;</span><br><span class="line">      <span class="variable">$bgc</span>:lighten(<span class="variable">$color</span>,<span class="variable">$n</span>);</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="variable">$bgc</span>;</span><br><span class="line">      &amp;<span class="selector-pseudo">:hover</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">"#&#123;$bgc&#125;"</span>;</span><br><span class="line">        <span class="attribute">color</span>: darken(<span class="variable">$bgc</span>,<span class="number">40</span>);</span><br><span class="line">        <span class="attribute">font-family</span>: verdana;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">8px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.swatches</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4.7619047619%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none outside none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.red</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> swatchesLighten(<span class="variable">$redBase</span>);</span><br><span class="line">  <span class="keyword">@include</span> swatchesDarken(<span class="variable">$redBase</span>);</span><br><span class="line">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(11) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$redBase</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.orange</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> swatchesLighten(<span class="variable">$orangeBase</span>);</span><br><span class="line">  <span class="keyword">@include</span> swatchesDarken(<span class="variable">$orangeBase</span>);</span><br><span class="line">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(11) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$orangeBase</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.yellow</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> swatchesLighten(<span class="variable">$yellowBase</span>);</span><br><span class="line">  <span class="keyword">@include</span> swatchesDarken(<span class="variable">$yellowBase</span>);</span><br><span class="line">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(11) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$yellowBase</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.green</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> swatchesLighten(<span class="variable">$greenBase</span>);</span><br><span class="line">  <span class="keyword">@include</span> swatchesDarken(<span class="variable">$greenBase</span>);</span><br><span class="line">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(11) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$greenBase</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.blue</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> swatchesLighten(<span class="variable">$blueBase</span>);</span><br><span class="line">  <span class="keyword">@include</span> swatchesDarken(<span class="variable">$blueBase</span>);</span><br><span class="line">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(11) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$blueBase</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.purple</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> swatchesLighten(<span class="variable">$purpleBase</span>);</span><br><span class="line">  <span class="keyword">@include</span> swatchesDarken(<span class="variable">$purpleBase</span>);</span><br><span class="line">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(11) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$purpleBase</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.black</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> swatchesLighten(<span class="variable">$blackBase</span>);</span><br><span class="line">  <span class="keyword">@include</span> swatchesDarken(<span class="variable">$blackBase</span>);</span><br><span class="line">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(11) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$blackBase</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="最后附上一个rem的例子"><a href="#最后附上一个rem的例子" class="headerlink" title="最后附上一个rem的例子"></a>最后附上一个rem的例子</h2><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SCSS</span></header><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以750px( iphone6 )为基准定义其他分辨率下的rem</span></span><br><span class="line"><span class="keyword">@mixin</span> useRem(<span class="variable">$size</span>)&#123;</span><br><span class="line">  <span class="variable">$device-list</span> : <span class="number">320px</span>, <span class="number">375px</span> , <span class="number">414px</span>;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="keyword">@each</span> <span class="variable">$device</span> in <span class="variable">$device-list</span>&#123;</span><br><span class="line">      <span class="keyword">@media</span> screen <span class="keyword">and</span> (min-width: <span class="variable">$device</span>)&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">100px</span> * (<span class="variable">$device</span>/<span class="variable">$size</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@include</span> useRem(<span class="number">750px</span>);</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>NodeJs</category>
      </categories>
      <tags>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs随笔--fs模块</title>
    <url>/blog/2017/10/20/%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<p>事情要从我的工作说起，可能出于安全考虑，公司的开发环境类似内网开发，电脑上安装了加密软件，电脑上的东西无法上传到外网的 git 工具，而且直接上传之后的文件打开是无法恢复的乱码。但是作为程序员，自然有其他方法，把东西拿出来</p>
<blockquote>
<p>因为公司的加密软件是按文件格式加密的，前端的文件，只加密了 vue 文件。所以思路就是把文件复制出来，再把 .vue 结尾的文件保存成为 txt 格式，我们的目的就达到了</p>
</blockquote>
<p>其实这个功能比较简单，但是我平时的工作偏向前端，没有写过这种纯粹的后台逻辑，所以用了较长的时间才实现，记录下来加深一下印象。最后我也会把例子发出来，有想研究或者嘲讽的都可以下载试试（当然项目源码是不能发出来的）</p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>首先创建拷贝的项目，初始化 npm，安装<code>empty-folder</code>，用来清空文件夹，创建一个 <code>source</code>文件夹用来存放源码，创建<code>target</code>文件夹用来保存处理后的文件。创建一个<code>copy.js</code>文件，把项目拷贝进<code>source</code>文件夹，创建一个<code>do.js</code>用来把<code>source</code>文件夹中的文件处理完保存到<code>target</code>文件夹中，创建一个<code>undo.js</code>用来把<code>target</code>中的文件还原回来。<br>目录结构如下</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">  - source -- 源文件夹</span><br><span class="line">  - target -- 目标文件夹</span><br><span class="line">  - copy.js -- 复制文件</span><br><span class="line">  - do.js -- 保存文件</span><br><span class="line">  - undo.js -- 恢复文件</span><br><span class="line">  - package.json -- 安装了`empty-folder`</span><br></pre></td></tr></table></figure></div>
<h2 id="copy-js"><a href="#copy-js" class="headerlink" title="copy.js"></a>copy.js</h2><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> stat = fs.stat;</span><br><span class="line"><span class="keyword">var</span> empty = <span class="built_in">require</span>(<span class="string">'empty-folder'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> copy = <span class="function"><span class="keyword">function</span> (<span class="params">src, dst</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//读取目录</span></span><br><span class="line">    fs.readdir(src, <span class="function"><span class="keyword">function</span> (<span class="params">err, paths</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        paths.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> _src = src + <span class="string">'/'</span> + path;</span><br><span class="line">            <span class="keyword">var</span> _dst = dst + <span class="string">'/'</span> + path;</span><br><span class="line">            <span class="keyword">var</span> readable;</span><br><span class="line">            <span class="keyword">var</span> writable;</span><br><span class="line">            stat(_src, <span class="function"><span class="keyword">function</span> (<span class="params">err, st</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> err;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (st.isFile()) &#123;</span><br><span class="line">                    readable = fs.createReadStream(_src);<span class="comment">//创建读取流</span></span><br><span class="line">                    writable = fs.createWriteStream(_dst);<span class="comment">//创建写入流</span></span><br><span class="line">                    readable.pipe(writable);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (st.isDirectory()) &#123;</span><br><span class="line">                  <span class="comment">// 不需要拷贝的文件夹</span></span><br><span class="line">                  <span class="keyword">const</span> exclude = [<span class="string">'node_modules'</span>, <span class="string">'.idea'</span>, <span class="string">'.git'</span>, <span class="string">'.vscode'</span>]</span><br><span class="line">                  <span class="keyword">let</span> flag = exclude.reduce(<span class="function">(<span class="params">res,cur</span>)=&gt;</span> &#123;</span><br><span class="line">                    res = res || _src.includes(cur)</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">                  &#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                    exists(_src, _dst, copy);</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> exists = <span class="function"><span class="keyword">function</span> (<span class="params">src, dst, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//测试某个路径下文件是否存在</span></span><br><span class="line">    fs.exists(dst, <span class="function"><span class="keyword">function</span> (<span class="params">exists</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exists) &#123;<span class="comment">//不存在</span></span><br><span class="line">            callback(src, dst);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//存在</span></span><br><span class="line">            fs.mkdir(dst, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//创建目录</span></span><br><span class="line">                callback(src, dst)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先清空 source 文件夹</span></span><br><span class="line">empty(<span class="string">'./source'</span>, <span class="literal">false</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'clean folder'</span>)</span><br><span class="line">  <span class="comment">// 拷贝D盘中的项目 A 到 source文件夹</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span> &#123;</span><br><span class="line">    resolve(exists(<span class="string">'D:/workspace/yunsa_cloud_fre'</span>, <span class="string">'./source/yunsa_cloud_fre'</span>, copy))</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'copy yunsa_cloud_fre success'</span>)</span><br><span class="line">    <span class="comment">// 拷贝桌面上的项目二到 source 文件夹</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span> &#123;</span><br><span class="line">      resolve(exists(<span class="string">'../vue-form-making@1.2.13'</span>, <span class="string">'./source/vue-form-making'</span>, copy))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'copy vue-form-making success'</span>)</span><br><span class="line">    <span class="comment">// 拷贝桌面上的项目三到 source 文件夹</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span> &#123;</span><br><span class="line">      resolve(exists(<span class="string">'../vue-g6-editor'</span>, <span class="string">'./source/vue-g6-editor'</span>, copy))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'copy vue-g6-editor success'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<h2 id="do-js"><a href="#do-js" class="headerlink" title="do.js"></a>do.js</h2><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> stat = fs.stat</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> empty = <span class="built_in">require</span>(<span class="string">'empty-folder'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">src, dst</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//读取目录</span></span><br><span class="line">  fs.readdir(src, (err, paths) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    paths.forEach(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> _src = src + <span class="string">'/'</span> + val</span><br><span class="line">      <span class="keyword">const</span> _dst = dst + <span class="string">'/'</span> + val</span><br><span class="line">      stat(_src, (err, st) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">        <span class="keyword">if</span> (st.isFile()) &#123;</span><br><span class="line">          <span class="keyword">const</span> name = path.basename(_src)</span><br><span class="line">          <span class="keyword">const</span> readable = fs.createReadStream(_src) <span class="comment">//创建读取流</span></span><br><span class="line">          <span class="keyword">let</span> writable</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 如果文件是以.vue 结尾的，读取流数据，再写入到目标文件，并更名为.vue.txt</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="regexp">/\.vue$/</span>.test(name)) &#123;</span><br><span class="line">            writable = fs.createWriteStream(_dst + <span class="string">'.txt'</span>) <span class="comment">//创建写入流</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            writable = fs.createWriteStream(_dst) <span class="comment">//创建写入流</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          readable.pipe(writable)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (st.isDirectory()) &#123;</span><br><span class="line">          exists(_src, _dst, copy)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试某个路径下文件是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exists</span>(<span class="params">src, dst, callback</span>) </span>&#123;</span><br><span class="line">  fs.exists(dst, (exists) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (exists) &#123;</span><br><span class="line">      <span class="comment">//不存在</span></span><br><span class="line">      callback(src, dst)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//存在</span></span><br><span class="line">      fs.mkdir(dst, () =&gt; &#123;</span><br><span class="line">        <span class="comment">//创建目录</span></span><br><span class="line">        callback(src, dst)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空 target 文件夹</span></span><br><span class="line">empty(<span class="string">'./target'</span>, <span class="literal">false</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'clean folder'</span>)</span><br><span class="line">  exists(<span class="string">'./source'</span>, <span class="string">'./target'</span>, copy)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<h2 id="undo-js"><a href="#undo-js" class="headerlink" title="undo.js"></a>undo.js</h2><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> stat = fs.stat</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">src, dst</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//读取目录</span></span><br><span class="line">  fs.readdir(src, (err, paths) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    paths.forEach(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> _src = src + <span class="string">'/'</span> + val</span><br><span class="line">      <span class="keyword">const</span> _dst = dst + <span class="string">'/'</span> + val</span><br><span class="line">      stat(_src, (err, st) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">        <span class="keyword">if</span> (st.isFile()) &#123;</span><br><span class="line">          <span class="keyword">const</span> name = path.basename(_src)</span><br><span class="line">          <span class="keyword">const</span> readable = fs.createReadStream(_src) <span class="comment">//创建读取流</span></span><br><span class="line">          <span class="keyword">let</span> writable</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (<span class="regexp">/\.vue.txt$/</span>.test(name)) &#123;</span><br><span class="line">          	<span class="comment">// 如果是.vue.txt 的文件，改名成.vue</span></span><br><span class="line">            writable = fs.createWriteStream(_dst.split(<span class="string">'.txt'</span>)[<span class="number">0</span>]) <span class="comment">//创建写入流</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            writable = fs.createWriteStream(_dst) <span class="comment">//创建写入流</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          readable.pipe(writable)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (st.isDirectory()) &#123;</span><br><span class="line">          exists(_src, _dst, copy)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试某个路径下文件是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exists</span>(<span class="params">src, dst, callback</span>) </span>&#123;</span><br><span class="line">  fs.exists(dst, (exists) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (exists) &#123;</span><br><span class="line">      <span class="comment">//不存在</span></span><br><span class="line">      callback(src, dst)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//存在</span></span><br><span class="line">      fs.mkdir(dst, () =&gt; &#123;</span><br><span class="line">        <span class="comment">//创建目录</span></span><br><span class="line">        callback(src, dst)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exists(<span class="string">'./target'</span>, <span class="string">'./source'</span>, copy)</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>NodeJs</category>
      </categories>
      <tags>
        <tag>nodeJs</tag>
        <tag>fs模块</tag>
      </tags>
  </entry>
  <entry>
    <title>Css Grid 语法总结</title>
    <url>/blog/2021/06/03/grid/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>Grid布局是目前css 中最强大的布局方案，它的原理是将网页划分为一个个网格，使用网格系统来呈现各种各样的布局效果。因此，使用它可以实现所有形式的布局，尤其在做一些不规则的布局时，grid 的强大更显得尤为出众。</p>
<blockquote>
<p>为什么 grid 布局不如 flex 使用广泛？<br>flex 布局方式为轴线布局，他通过指定基准线的位置来划分网页的区块，可以看做一维布局，而 grid 布局则是将容器划分成”行”和”列”，产生单元格，然后操作划分出的单元格，可以看作是二维布局。因此 flex 布局语法本身要较 grid 简单清晰，而且大部分布局需求都有规整的结构，使用 flex 就可以轻松实现。最后，grid 的兼容性相对 flex 较差，并且没有很好地兼容方式。</p>
</blockquote>
<p><strong>grid 布局于 flex 布局有一定的相似性，下面的教程会对照写法，加深印象</strong></p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="项目和容器"><a href="#项目和容器" class="headerlink" title="项目和容器"></a>项目和容器</h3><p>采用网格布局的区域，称为”容器”（container）。容器内部采用网格定位的直接子元素，称为”项目”（item）。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>上面代码中，<code>.container</code>为容器，3 个<code>.item</code>为项目。<br><strong>注意：项目只能是容器的直接子元素，比如上面代码的<code>&lt;p&gt;</code>就不是项目。Grid 布局只对<code>.item</code>生效。</strong></p>
<h3 id="行、列、单元格"><a href="#行、列、单元格" class="headerlink" title="行、列、单元格"></a>行、列、单元格</h3><p>容器中水平的区域为行（row），垂直的区域为列（column），行和列交叉产生的区域称为单元格（cell）。<br>正常情况下，<code>m</code>行<code>n</code>列会产生<code>m * n</code>个单元格。</p>
<h2 id="css-属性"><a href="#css-属性" class="headerlink" title="css 属性"></a>css 属性</h2><p>Grid 布局的属性分成两类。一类定义在容器上面，称为容器属性；另一类定义在项目上面，称为项目属性。</p>
<h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><h4 id="display"><a href="#display" class="headerlink" title="display"></a>display</h4><p>使用<code>display: grid</code>可以指定一个容器采用网格布局。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>也可以使用<code>display: inline-grid</code>，设置为行内元素，效果类似于<code>inline-flex</code>。</p>
<blockquote>
<p>同 flex，设置为网格布局后，项目的<code>float</code>、<code>display: inline-block</code>等属性均失效</p>
</blockquote>
<h4 id="grid-template-columns-grid-template-rows"><a href="#grid-template-columns-grid-template-rows" class="headerlink" title="grid-template-columns / grid-template-rows"></a>grid-template-columns / grid-template-rows</h4><p>指定了网格布局后，就开始划分行和列。 <code>grid-template-columns</code> 用来定义每一列， <code>grid-template-rows</code>用来定义每一行。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码指定了一个三行三列的网格，宽高均为<code>100px</code></p>
<iframe width="100%" height="370" src="//jsrun.net/AbVKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>也可以使用百分比</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<iframe width="100%" height="370" src="//jsrun.net/jbVKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h5 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h5><p>相信我们都发现了，当网格系统足够复杂时，需要我们写很多重复的值。这时可以使用<code>repeat()</code>函数简化重复的值，简化代码如下</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">33.33%</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">33.33%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>repeat()</code>接受两个参数，第一个是重复的次数，第二个是需要重复的值。<strong>而且这里的值不必非得是固定的值，我们可以给定一组值，同样可以重复执行。</strong></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">100px</span> <span class="number">80px</span> <span class="number">60px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">9</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码表示每列按照<code>100px 80px 60px</code>的规则，重复两次。因此共得到了 6 列，表现为第一列和第四列的宽度为100px，第二列和第五列为80px，第三列和第六列为60px。又定义了 9 行，每行高度固定为<code>100px</code></p>
<iframe width="100%" height="370" src="//jsrun.net/BbVKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h5 id="auto-fill"><a href="#auto-fill" class="headerlink" title="auto-fill"></a>auto-fill</h5><p>有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用<code>auto-fill</code>关键字表示自动填充。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码容器宽<code>550px</code>，每列宽度<code>100px</code>，然后自动填充，因此从第六行开始折行显示。</p>
<iframe width="100%" height="370" src="//jsrun.net/RbVKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h5 id="fr"><a href="#fr" class="headerlink" title="fr"></a>fr</h5><p>网格布局提供了<code>fr</code>关键字（fraction 的缩写，意为”片段”）。如果两列的宽度分别为1fr和2fr，就表示后者是前者的两倍。类似于 flex 中的项目的<code>flex-grow</code>属性。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码创建三个相同宽度的列。</p>
<iframe width="100%" height="370" src="//jsrun.net/MbVKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p><code>fr</code>在与绝对长度的单位结合使用，会产生非常神奇的效果。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">150px</span> <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码表示，第一列的宽度为150像素，第二列的宽度是第三列的一半。</p>
<iframe width="100%" height="370" src="//jsrun.net/SbVKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h5 id="minmax"><a href="#minmax" class="headerlink" title="minmax()"></a>minmax()</h5><p><code>minmax()</code>函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="built_in">minmax</span>(<span class="number">100px</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码中，minmax(100px, 1fr)表示列宽不小于100px，不大于1fr。</p>
<h5 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h5><p><code>auto</code>关键字表示由浏览器自己决定长度。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> auto <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码中，第二列的宽度，基本上等于该列单元格的最大宽度，除非单元格内容设置了<code>min-width</code>，且这个值大于最大宽度。</p>
<h5 id="网格线命名"><a href="#网格线命名" class="headerlink" title="网格线命名"></a>网格线命名</h5><p><code>grid-template-columns</code>属性和<code>grid-template-rows</code>属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: [c1] <span class="number">100px</span> [c2] <span class="number">100px</span> [c3] auto [c4];</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: [r1] <span class="number">100px</span> [r2] <span class="number">100px</span> [r3] auto [r4];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码指定网格布局为<code>3行 x 3列</code>，因此有<code>4</code>根垂直网格线和<code>4</code>根水平网格线。方括号里面依次是这八根线的名字。</p>
<h4 id="row-gap-column-gap-gap"><a href="#row-gap-column-gap-gap" class="headerlink" title="row-gap / column-gap / gap"></a>row-gap / column-gap / gap</h4><p>grid-row-gap属性设置行与行的间隔（行间距），grid-column-gap属性设置列与列的间隔（列间距）。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">row-gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码中，行间距和列间距均为<code>20px</code>。</p>
<iframe width="100%" height="370" src="//jsrun.net/4bVKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p><code>gap</code>属性是<code>column-gap</code>和<code>row-gap</code>的合并简写形式，语法如下。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">gap</span>: &lt;row-gap&gt; &lt;column-gap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>因此，上面一段 CSS 代码等同于下面的代码。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如果<code>gap</code>省略了第二个值，浏览器认为第二个值等于第一个值。</p>
<h4 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h4><p>网格布局允许指定”区域”（area），一个区域由单个或多个单元格组成。<code>grid-template-areas</code>属性用于定义区域。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: <span class="string">'a b c'</span></span><br><span class="line">                       <span class="string">'d e f'</span></span><br><span class="line">                       <span class="string">'g h i'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码先划分出9个单元格，然后将其定名为<code>a</code>到<code>i</code>的九个区域，分别对应这九个单元格。</p>
<p>多个单元格合并成一个区域的写法如下。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: <span class="string">'a a a'</span></span><br><span class="line">                       <span class="string">'b b b'</span></span><br><span class="line">                       <span class="string">'c c c'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码将9个单元格分成<code>a</code>、<code>b</code>、<code>c</code>三个区域。</p>
<p>下面是一个布局实例。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: <span class="string">"header header header"</span></span><br><span class="line">                       <span class="string">"main main sidebar"</span></span><br><span class="line">                       <span class="string">"footer footer footer"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码中，顶部是<code>header</code>区域，底部是<code>footer</code>区域，中间部分左边为<code>main</code>区域，右边为<code>sidebar</code>区域。</p>
<p>如果某些区域不需要利用，则使用<code>.</code>表示。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: <span class="string">'a . c'</span></span><br><span class="line">                       <span class="string">'d . f'</span></span><br><span class="line">                       <span class="string">'g . i'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码中，中间一列为点，表示没有用到该单元格，或者该单元格不属于任何区域。</p>
<blockquote>
<p>注意，区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为<code>区域名-start</code>，终止网格线自动命名为<code>区域名-end</code>。<br>比如，区域名为header，则起始位置的水平网格线和垂直网格线叫做<code>header-start</code>，终止位置的水平网格线和垂直网格线叫做<code>header-end</code>。</p>
</blockquote>
<h4 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a>grid-auto-flow</h4><p>划分网格以后，容器的子元素会默认”先行后列”排序，即先填满第一行，再开始放入第二行，依次执行。</p>
<p>通过<code>grid-auto-flow</code>属性可以改变网格的排序，默认为<code>row</code>,及“先行后列”，可以设置为<code>column</code>，变为“先列后行”。</p>
<iframe width="100%" height="370" src="//jsrun.net/gWVKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>除了<code>row</code>和<code>column</code>，还可以设置为<code>row dense</code>和<code>column dense</code>。这两个值主要用于，某些项目指定位置以后，剩下的项目怎么自动放置。</p>
<p>下面的例子中让1号项目和2号项目各占据两个单元格，然后在默认的<code>grid-auto-flow: row</code>情况下，会产生下面这样的布局。</p>
<iframe width="100%" height="370" src="//jsrun.net/yWVKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>因为 3 号项目默认跟在 2 号项目之后，而第一行又无法容纳 2 号项目，所以第一行只能出现了空白。只要修改<code>grid-auto-flow: row dense</code>，就会在“先行后列”的基础上，尽可能紧密填满，不出现空格。</p>
<iframe width="100%" height="370" src="//jsrun.net/bWVKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>如果将设置改为<code>column dense</code>，也是同样的意思，不过会遵循”先列后行”，并且尽量填满空格。</p>
<h4 id="justify-items-align-items-place-items"><a href="#justify-items-align-items-place-items" class="headerlink" title="justify-items / align-items / place-items"></a>justify-items / align-items / place-items</h4><p><code>justify-items</code>属性设置单元格内容的水平位置，<code>align-items</code>属性设置单元格内容的垂直位置。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-items</span>: start | end | center | stretch;</span><br><span class="line">  <span class="attribute">align-items</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这两个属性的写法完全相同，都可以取下面这些值：</p>
<ul>
<li>start：对齐单元格的起始边缘。</li>
<li>end：对齐单元格的结束边缘。</li>
<li>center：单元格内部居中。</li>
<li>stretch：拉伸，占满单元格的整个宽度（默认值）。</li>
</ul>
<p><code>place-items</code>属性是<code>align-items</code>属性和<code>justify-items</code>属性的合并简写形式。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">place-items</span>: &lt;align-items&gt; &lt;justify-items&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如果省略第二个值，则浏览器认为与第一个值相等。</p>
<h4 id="justify-content-align-content-place-content"><a href="#justify-content-align-content-place-content" class="headerlink" title="justify-content / align-content / place-content"></a>justify-content / align-content / place-content</h4><p><code>justify-content</code>属性是整个内容区域在容器里面的水平位置，<code>align-content</code>属性是整个内容区域的垂直位置。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">  <span class="attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这两个属性的写法完全相同，都可以取下面这些值:</p>
<ul>
<li>start: 对齐容器的起始边框。</li>
<li>end: 对齐容器的结束边框。</li>
<li>center: 容器内部居中。</li>
<li>stretch: 项目大小没有指定时，拉伸占据整个网格容器。</li>
<li>space-around: 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</li>
<li>space-between: 项目与项目的间隔相等，项目与容器边框之间没有间隔。</li>
<li>space-evenly: 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</li>
</ul>
<p><code>place-content</code>属性是<code>align-content</code>属性和<code>justify-content</code>属性的合并简写形式。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">place-content</span>: &lt;align-content&gt; &lt;justify-content&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如果省略第二个值，浏览器就会假定第二个值等于第一个值。</p>
<h4 id="grid-auto-columns-grid-auto-rows"><a href="#grid-auto-columns-grid-auto-rows" class="headerlink" title="grid-auto-columns / grid-auto-rows"></a>grid-auto-columns / grid-auto-rows</h4><p>有时候，一些项目的指定位置，在现有网格的外部。比如网格只有3列，但是某一个项目指定在第5行。这时，浏览器会自动生成多余的网格，以便放置项目。</p>
<p><code>grid-auto-columns</code>属性和<code>grid-auto-rows</code>属性用来设置，浏览器自动创建的多余网格的列宽和行高。它们的写法与<code>grid-template-columns</code>和<code>grid-template-rows</code>完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。</p>
<p>下面的例子里面，划分好的网格是3行 x 3列，但是，8号项目指定在第4行，9号项目指定在第5行,并指定新增的行高统一为50px（原始的行高为100px）。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<iframe width="100%" height="370" src="//jsrun.net/wWVKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><h4 id="grid-column-start-grid-column-end-grid-row-start-grid-row-end-grid-column-grid-row"><a href="#grid-column-start-grid-column-end-grid-row-start-grid-row-end-grid-column-grid-row" class="headerlink" title="grid-column-start / grid-column-end / grid-row-start / grid-row-end / grid-column / grid-row"></a>grid-column-start / grid-column-end / grid-row-start / grid-row-end / grid-column / grid-row</h4><p>项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。</p>
<ul>
<li><code>grid-column-start</code>表示左边框贴紧的垂直网格线</li>
<li><code>grid-column-end</code>表示右边框贴紧的垂直网格线</li>
<li><code>grid-row-start</code>表示上边框贴紧的水平网格线</li>
<li><code>grid-row-end</code>表示下边框贴紧的水平网格线</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码指定，1号项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线。但并没有指定上下边框，所以会采用默认位置。而除了1号项目以外，其他项目都没有指定位置，将由浏览器自动布局，这时它们的位置由容器的<code>grid-auto-flow</code>属性决定，参考上面的教程，不再赘述。</p>
<iframe width="100%" height="370" src="//jsrun.net/TWVKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>下面的例子是指定四个边框位置的效果。</p>
<iframe width="100%" height="370" src="//jsrun.net/UWVKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>这四个属性的值，除了指定为第几个网格线，还可以指定为网格线的名字。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: header-start;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: header-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码中，左边框和右边框的位置，都指定为网格线的名字。<br>这四个属性的值还可以使用span关键字，表示”跨越”，即左右边框（上下边框）之间跨越多少个网格。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码表示，1号项目的左边框距离右边框跨越2个网格。<br>使用这四个属性，如果产生了项目的重叠，则使用z-index属性指定项目的重叠顺序。</p>
<p><code>grid-column</code>属性是<code>grid-column-start</code>和<code>grid-column-end</code>的合并简写形式，<code>grid-row</code>属性是<code>grid-row-start</code>属性和<code>grid-row-end</code>的合并简写形式。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: &lt;grid-column-start&gt; / &lt;grid-column-end&gt;;</span><br><span class="line">  <span class="attribute">grid-row</span>: &lt;grid-row-start&gt; / &lt;grid-row-end&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>下面是一个例子。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码中，项目item-1占据第一行，从第一根列线到第三根列线。</p>
<p>这两个属性之中，也可以使用span关键字，表示跨越多少个网格。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#b03532</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#b03532</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / span <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码中，项目item-1占据的区域，包括第一行 + 第二行、第一列 + 第二列。<br>斜杠以及后面的部分可以省略，默认跨越一个网格。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码中，项目item-1占据左上角第一个网格。</p>
<h4 id="grid-area"><a href="#grid-area" class="headerlink" title="grid-area"></a>grid-area</h4><p><code>grid-area</code>属性指定项目放在哪一个区域。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>上面代码中，1号项目位于e区域。</p>
<iframe width="100%" height="370" src="//jsrun.net/dWVKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>grid-area属性还可用作grid-row-start、grid-column-start、grid-row-end、grid-column-end的合并简写形式，直接指定项目的位置。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>下面是一个例子。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 表示从第一个行第一列开始，到第三行第三列为止，因此是 2 * 2 个单元格 */</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">1</span> / <span class="number">3</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<iframe width="100%" height="370" src="//jsrun.net/JWVKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h4 id="justify-self-align-self-place-self"><a href="#justify-self-align-self-place-self" class="headerlink" title="justify-self / align-self / place-self"></a>justify-self / align-self / place-self</h4><p><code>justify-self</code>属性设置单元格内容的水平位置，跟justify-items属性的用法完全一致，但只作用于单个项目。<br><code>align-self</code>属性设置单元格内容的垂直位置，跟align-items属性的用法完全一致，也是只作用于单个项目。</p>
<p>这两个属性都可以取下面四个值：</p>
<ul>
<li>start：对齐单元格的起始边缘。</li>
<li>end：对齐单元格的结束边缘。</li>
<li>center：单元格内部居中。</li>
<li>stretch：拉伸，占满单元格的整个宽度（默认值）。</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">justify-self</span>: start | end | center | stretch;</span><br><span class="line">  <span class="attribute">align-self</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>place-self</code>属性是<code>align-self</code>属性和<code>justify-self</code>属性的合并简写形式。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">place-self</span>: &lt;align-self&gt; &lt;justify-self&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如果省略第二个值，<code>place-self</code>属性会认为这两个值相等。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac本地服务器使用</title>
    <url>/blog/2021/05/07/Mac%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<ul>
<li><p>Apache命令</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 开启 Apache</span><br><span class="line">sudo apachectl start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重启 Apache</span><br><span class="line">sudo apachectl restart</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 关闭 Apache</span><br><span class="line">sudo apachectl stop</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>开启 Apache, 服务已经运行在<code>http://127.0.0.1/</code></p>
</li>
<li>开启 Finder, <code>Command + Shift + G</code>, 前往文件夹 <code>/Library/WebServer/Documents</code>, 这里存放本地服务文件，初始打开的是本路径下的<code>index.html.en</code></li>
</ul>
<blockquote>
<p>使用过后，记得关闭服务器，避免不必要的内存消耗</p>
</blockquote>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>从零搭建Vue UI组件库(六)</title>
    <url>/blog/2021/04/26/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAVue%20UI%E7%BB%84%E4%BB%B6%E5%BA%93(%E5%85%AD)/</url>
    <content><![CDATA[<p>上一步中,已经实现了本地开发 + 应用打包的全部流程, 开发 UI 框架的这套框架本身就已经完成了。现在只需要打包上传到 npm, 框架本身也完成了。剩下的就只是不断完善组件了。</p>
<h2 id="生成打包"><a href="#生成打包" class="headerlink" title="生成打包"></a>生成打包</h2><p>修改<code>package.json</code>，添加入口文件</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>package.json</span></span><span class="mac-panel__language">DIFF</span></header><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="addition">+  "main": "lib/index.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><p>执行<code>npm pack</code>，生成一个本地的<code>zcm-admin-ui-0.0.0.tgz</code>包，这个包可以本地安装，用来预览结果</p>
<p>执行<code>yarn add ./zcm-admin-ui-0.0.0.tgz</code>，本地安装这个包，安装结束后会发现依赖选项里安装了这个包，但是路径是在<code>./</code>下。这个时候<code>main.ts</code>中就已经可以使用 <code>import AdminUI from &#39;zcm-admin-ui&#39;</code>了。<strong>记得测试完成后，删除这一测试选项，开发环境还是用 @packages 里的包，保证开发时候方便</strong></p>
<h3 id="修改main-ts"><a href="#修改main-ts" class="headerlink" title="修改main.ts"></a>修改<code>main.ts</code></h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./app.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">'./locales/index'</span></span><br><span class="line"><span class="comment">// admin-ui</span></span><br><span class="line"><span class="keyword">import</span> AdminUI <span class="keyword">from</span> <span class="string">'zcm-admin-ui'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'zcm-admin-ui/lib/theme/index.css'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// components</span></span><br><span class="line"><span class="keyword">import</span> DemoBlock <span class="keyword">from</span> <span class="string">'./components/DemoBlock/index.vue'</span></span><br><span class="line"><span class="keyword">import</span> DtIcon <span class="keyword">from</span> <span class="string">'@packages/icon'</span></span><br><span class="line"><span class="comment">// reset-css</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'highlight.js/styles/color-brewer.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./styles/common.scss'</span></span><br><span class="line"></span><br><span class="line">createApp(App)</span><br><span class="line">  .use(AdminUI)</span><br><span class="line">  .use(i18n)</span><br><span class="line">  .component(<span class="string">'demo-block'</span>, DemoBlock)</span><br><span class="line">  .component(<span class="string">'dt-icon'</span>, DtIcon)</span><br><span class="line">  .use(router)</span><br><span class="line">  .mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></div>
<p>如果修改之后，和之前一样正常使用，说明没有问题，可以打包上传。</p>
<blockquote>
<p>上传之前先删除上一步的 tgz 包，它已经没用了</p>
</blockquote>
<h2 id="发布-npm"><a href="#发布-npm" class="headerlink" title="发布 npm"></a>发布 npm</h2><p>首先要有账号，到 npm 官网注册即可</p>
<p>执行<code>npm login</code>，按照要求依次填写账号、密码、邮箱。出现<code>logged in as xxx on http://registry.npmjs.org</code>，说明登录成功了</p>
<p>然后在项目根目录执行<code>npm publish</code>，就可以了</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul>
<li>项目是用<code>lerna</code>初始化的，<code>package.json</code>里<code>private</code>选项必须是<code>true</code>才行，但是上传 npm 又要求必须是<code>false</code>，暂时不知道为什么，怎么处理</li>
<li><p>发布报错<code>npm ERR! no_perms Private mode enable, only admin can publish this module</code>，是因为使用了淘宝镜像，需要重置到原本的 npm 地址</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry=http://registry.npmjs.org</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>每次发布需要修改版本号（package.json的 version），否则会提交失败。详见<a href="https://www.jianshu.com/p/7d83bda6d751" target="_blank" rel="noopener">npm 版本号规则</a></p>
</li>
</ul>
<h2 id="完"><a href="#完" class="headerlink" title="完"></a>完</h2><p>组件方面，我也有打算一直维护，并且不参考任何框架，有时间就按自己的想法去尝试一下。</p>
<p>最后再附上<a href="https://github.com/lost-dream/zcm-admin-ui" target="_blank" rel="noopener">本项目仓库地址</a>，希望有幸看到这篇文章你也能有所收获</p>
]]></content>
      <categories>
        <category>adminUI</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>adminUI</tag>
      </tags>
  </entry>
  <entry>
    <title>从零搭建Vue UI组件库(五)</title>
    <url>/blog/2021/04/20/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAVue%20UI%E7%BB%84%E4%BB%B6%E5%BA%93(%E4%BA%94)/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>接上一篇，这篇说的是使用<code>markdown</code>作为开发文档，原本想的是直接使用<code>vuepress</code>加入进来，万万没想到它不支持<code>vue3</code>，而新的<code>vuepress@next</code>功能还未完善，试过之后不太理想，所以还是照着<code>element-plus</code>来吧</p>
<blockquote>
<p>在参考和查找的过程中，无意间发现了一个类似的仓库：<a href="https://github.com/ninecat-ui/ninecat-ui" target="_blank" rel="noopener">ninecat-ui</a>,所以这篇文档在 element 基础上，也参照了部分 ninecat-ui 的思路（当然主要还是 element）</p>
</blockquote>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><h3 id="markdown-相关依赖"><a href="#markdown-相关依赖" class="headerlink" title="markdown 相关依赖"></a>markdown 相关依赖</h3><p>安装解析 markdown 语法的依赖</p>
<p><code>yarn add -D highlight.js markdown-it markdown-it-anchor markdown-it-chain markdown-it-container transliteration -W</code></p>
<h3 id="vue-相关依赖"><a href="#vue-相关依赖" class="headerlink" title="vue 相关依赖"></a>vue 相关依赖</h3><p>本地开发文档自然需要设置路由，后面可能会需要补全国际化，还要提前安装好 i18n。<code>yarn add -D vue-router@next vue-i18n@next -W</code></p>
<h2 id="修改-webpack-配置"><a href="#修改-webpack-配置" class="headerlink" title="修改 webpack 配置"></a>修改 webpack 配置</h2><h3 id="修改-css-rules"><a href="#修改-css-rules" class="headerlink" title="修改 css rules"></a>修改 css rules</h3><p>之前写的疏忽，loader 里没有包含 <code>css</code>文件，导致了一些问题，首先修复</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">DIFF</span></header><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line">// build/webpack.config.base.js</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="deletion">-  test: /\.scss$/,</span></span><br><span class="line"><span class="addition">+  test: /\.(css|sass|scss)$/,</span></span><br><span class="line">  use: [</span><br><span class="line">    &#123; loader: 'style-loader' &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: 'css-loader',</span><br><span class="line">      options: &#123; sourceMap: true &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: 'sass-loader'</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>
<h3 id="添加解析-markdown-的-loader"><a href="#添加解析-markdown-的-loader" class="headerlink" title="添加解析 markdown 的 loader"></a>添加解析 markdown 的 loader</h3><blockquote>
<p>说来惭愧，这个 loader 我现在还是很茫然，因为是从 element-plus 粘贴来的。并不清楚为什么要这么配置，需要后面再仔细学习一下</p>
</blockquote>
<h4 id="创建-markdown-loader"><a href="#创建-markdown-loader" class="headerlink" title="创建 markdown-loader"></a>创建 markdown-loader</h4><p>build 文件夹中创建 md-loader 文件夹，新建<code>config.js</code>、<code>container.js</code>、 <code>fence.js</code>、 <code>index.js</code>、<code>util.js</code>作为 md-loader 配置</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* config.js */</span></span><br><span class="line"><span class="keyword">const</span> Config = <span class="built_in">require</span>(<span class="string">'markdown-it-chain'</span>)</span><br><span class="line"><span class="keyword">const</span> anchorPlugin = <span class="built_in">require</span>(<span class="string">'markdown-it-anchor'</span>)</span><br><span class="line"><span class="keyword">const</span> slugify = <span class="built_in">require</span>(<span class="string">'transliteration'</span>).slugify</span><br><span class="line"><span class="keyword">const</span> hljs = <span class="built_in">require</span>(<span class="string">'highlight.js'</span>)</span><br><span class="line"><span class="keyword">const</span> containers = <span class="built_in">require</span>(<span class="string">'./containers'</span>)</span><br><span class="line"><span class="keyword">const</span> overWriteFenceRule = <span class="built_in">require</span>(<span class="string">'./fence'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = <span class="keyword">new</span> Config()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> highlight = <span class="function">(<span class="params">str, lang</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!lang || !hljs.getLanguage(lang)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;pre&gt;&lt;code class="hljs"&gt;'</span> + str + <span class="string">'&lt;/code&gt;&lt;/pre&gt;'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> html = hljs.highlight(lang, str, <span class="literal">true</span>, <span class="literal">undefined</span>).value</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;pre&gt;&lt;code class="hljs language-<span class="subst">$&#123;lang&#125;</span>"&gt;<span class="subst">$&#123;html&#125;</span>&lt;/code&gt;&lt;/pre&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config.options</span><br><span class="line">  .html(<span class="literal">true</span>)</span><br><span class="line">  .highlight(highlight)</span><br><span class="line">  .end()</span><br><span class="line"></span><br><span class="line">  .plugin(<span class="string">'anchor'</span>)</span><br><span class="line">  .use(anchorPlugin, [</span><br><span class="line">    &#123;</span><br><span class="line">      level: <span class="number">2</span>,</span><br><span class="line">      slugify: slugify,</span><br><span class="line">      permalink: <span class="literal">true</span>,</span><br><span class="line">      permalinkBefore: <span class="literal">false</span>,</span><br><span class="line">      <span class="comment">// permalinkSymbol: '#'</span></span><br><span class="line">      permalinkSymbol: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  ])</span><br><span class="line">  .end()</span><br><span class="line"></span><br><span class="line">  .plugin(<span class="string">'containers'</span>)</span><br><span class="line">  .use(containers)</span><br><span class="line">  .end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> md = config.toMd()</span><br><span class="line">overWriteFenceRule(md)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = md</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* containers.js */</span></span><br><span class="line"><span class="keyword">const</span> mdContainer = <span class="built_in">require</span>(<span class="string">'markdown-it-container'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">md</span> =&gt;</span> &#123;</span><br><span class="line">  md.use(mdContainer, <span class="string">'demo'</span>, &#123;</span><br><span class="line">    validate(params) &#123;</span><br><span class="line">      <span class="keyword">return</span> params.trim().match(<span class="regexp">/^demo\s*(.*)$/</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    render(tokens, idx) &#123;</span><br><span class="line">      <span class="keyword">const</span> m = tokens[idx].info.trim().match(<span class="regexp">/^demo\s*(.*)$/</span>)</span><br><span class="line">      <span class="keyword">if</span> (tokens[idx].nesting === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> description = m &amp;&amp; m.length &gt; <span class="number">1</span> ? m[<span class="number">1</span>] : <span class="string">''</span></span><br><span class="line">        <span class="keyword">const</span> content = tokens[idx + <span class="number">1</span>].type === <span class="string">'fence'</span> ? tokens[idx + <span class="number">1</span>].content : <span class="string">''</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`&lt;demo-block&gt;</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;description ? <span class="string">`&lt;div&gt;<span class="subst">$&#123;md.render(description)&#125;</span>&lt;/div&gt;`</span> : <span class="string">''</span>&#125;</span></span></span><br><span class="line"><span class="string">        &lt;!--admin-demo: <span class="subst">$&#123;content&#125;</span>:admin-demo--&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'&lt;/demo-block&gt;'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  md.use(mdContainer, <span class="string">'tip'</span>)</span><br><span class="line">  md.use(mdContainer, <span class="string">'warning'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* fence.js */</span></span><br><span class="line"><span class="comment">// 覆盖默认的 fence 渲染策略</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">md</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> defaultRender = md.renderer.rules.fence</span><br><span class="line">  md.renderer.rules.fence = <span class="function">(<span class="params">tokens, idx, options, env, self</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = tokens[idx]</span><br><span class="line">    <span class="comment">// 判断该 fence 是否在 :::demo 内</span></span><br><span class="line">    <span class="keyword">const</span> prevToken = tokens[idx - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">const</span> isInDemoContainer =</span><br><span class="line">      prevToken &amp;&amp; prevToken.nesting === <span class="number">1</span> &amp;&amp; prevToken.info.trim().match(<span class="regexp">/^demo\s*(.*)$/</span>)</span><br><span class="line">    <span class="keyword">if</span> (token.info === <span class="string">'html'</span> &amp;&amp; isInDemoContainer) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`&lt;template #highlight&gt;&lt;pre v-pre&gt;&lt;code class="html"&gt;<span class="subst">$&#123;md.utils.escapeHtml(</span></span></span><br><span class="line"><span class="string"><span class="subst">        token.content</span></span></span><br><span class="line"><span class="string"><span class="subst">      )&#125;</span>&lt;/code&gt;&lt;/pre&gt;&lt;/template&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> defaultRender(tokens, idx, options, env, self)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* index.js */</span></span><br><span class="line"><span class="keyword">const</span> &#123; stripScript, stripTemplate, genInlineComponentText &#125; = <span class="built_in">require</span>(<span class="string">'./util'</span>)</span><br><span class="line"><span class="keyword">const</span> md = <span class="built_in">require</span>(<span class="string">'./config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> content = md.render(source)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> startTag = <span class="string">'&lt;!--admin-demo:'</span></span><br><span class="line">  <span class="keyword">const</span> startTagLen = startTag.length</span><br><span class="line">  <span class="keyword">const</span> endTag = <span class="string">':admin-demo--&gt;'</span></span><br><span class="line">  <span class="keyword">const</span> endTagLen = endTag.length</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> componenetsString = <span class="string">''</span></span><br><span class="line">  <span class="keyword">let</span> id = <span class="number">0</span> <span class="comment">// demo 的 id</span></span><br><span class="line">  <span class="keyword">let</span> output = [] <span class="comment">// 输出的内容</span></span><br><span class="line">  <span class="keyword">let</span> start = <span class="number">0</span> <span class="comment">// 字符串开始位置</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> commentStart = content.indexOf(startTag)</span><br><span class="line">  <span class="keyword">let</span> commentEnd = content.indexOf(endTag, commentStart + startTagLen)</span><br><span class="line">  <span class="keyword">while</span> (commentStart !== <span class="number">-1</span> &amp;&amp; commentEnd !== <span class="number">-1</span>) &#123;</span><br><span class="line">    output.push(content.slice(start, commentStart))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> commentContent = content.slice(commentStart + startTagLen, commentEnd)</span><br><span class="line">    <span class="keyword">const</span> html = stripTemplate(commentContent)</span><br><span class="line">    <span class="keyword">const</span> script = stripScript(commentContent)</span><br><span class="line">    <span class="keyword">let</span> demoComponentContent = genInlineComponentText(html, script)</span><br><span class="line">    <span class="keyword">const</span> demoComponentName = <span class="string">`admin-demo<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">    output.push(<span class="string">`&lt;template #source&gt;&lt;<span class="subst">$&#123;demoComponentName&#125;</span> /&gt;&lt;/template&gt;`</span>)</span><br><span class="line">    componenetsString += <span class="string">`<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(demoComponentName)&#125;</span>: <span class="subst">$&#123;demoComponentContent&#125;</span>,`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新计算下一次的位置</span></span><br><span class="line">    id++</span><br><span class="line">    start = commentEnd + endTagLen</span><br><span class="line">    commentStart = content.indexOf(startTag, start)</span><br><span class="line">    commentEnd = content.indexOf(endTag, commentStart + startTagLen)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 仅允许在 demo 不存在时，才可以在 Markdown 中写 script 标签</span></span><br><span class="line">  <span class="comment">// todo: 优化这段逻辑</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> pageScript = <span class="string">''</span></span><br><span class="line">  <span class="keyword">if</span> (componenetsString) &#123;</span><br><span class="line">    pageScript = <span class="string">`&lt;script lang="ts"&gt;</span></span><br><span class="line"><span class="string">      import * as Vue from 'vue';</span></span><br><span class="line"><span class="string">      export default &#123;</span></span><br><span class="line"><span class="string">        name: 'component-doc',</span></span><br><span class="line"><span class="string">        components: &#123;</span></span><br><span class="line"><span class="string">          <span class="subst">$&#123;componenetsString&#125;</span></span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &lt;/script&gt;`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (content.indexOf(<span class="string">'&lt;script&gt;'</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 硬编码，有待改善</span></span><br><span class="line">    start = content.indexOf(<span class="string">'&lt;/script&gt;'</span>) + <span class="string">'&lt;/script&gt;'</span>.length</span><br><span class="line">    pageScript = content.slice(<span class="number">0</span>, start)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  output.push(content.slice(start))</span><br><span class="line">  <span class="keyword">const</span> result = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;template&gt;</span></span><br><span class="line"><span class="string">    &lt;section class="content admin-doc"&gt;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;output.join(<span class="string">''</span>)&#125;</span></span></span><br><span class="line"><span class="string">    &lt;/section&gt;</span></span><br><span class="line"><span class="string">  &lt;/template&gt;</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;pageScript&#125;</span></span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* util.js */</span></span><br><span class="line"><span class="keyword">const</span> &#123; compileTemplate, TemplateCompiler &#125; = <span class="built_in">require</span>(<span class="string">'@vue/compiler-sfc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stripScript</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = content.match(<span class="regexp">/&lt;(script)&gt;([\s\S]+)&lt;\/\1&gt;/</span>)</span><br><span class="line">  <span class="keyword">return</span> result &amp;&amp; result[<span class="number">2</span>] ? result[<span class="number">2</span>].trim() : <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stripStyle</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = content.match(<span class="regexp">/&lt;(style)\s*&gt;([\s\S]+)&lt;\/\1&gt;/</span>)</span><br><span class="line">  <span class="keyword">return</span> result &amp;&amp; result[<span class="number">2</span>] ? result[<span class="number">2</span>].trim() : <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写例子时不一定有 template。所以采取的方案是剔除其他的内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stripTemplate</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  content = content.trim()</span><br><span class="line">  <span class="keyword">if</span> (!content) &#123;</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> content.replace(<span class="regexp">/&lt;(script|style)[\s\S]+&lt;\/\1&gt;/g</span>, <span class="string">''</span>).trim()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pad</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> source</span><br><span class="line">    .split(<span class="regexp">/\r?\n/</span>)</span><br><span class="line">    .map(<span class="function"><span class="params">line</span> =&gt;</span> <span class="string">`  <span class="subst">$&#123;line&#125;</span>`</span>)</span><br><span class="line">    .join(<span class="string">'\n'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> templateReplaceRegex = <span class="regexp">/&lt;template&gt;([\s\S]+)&lt;\/template&gt;/g</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genInlineComponentText</span>(<span class="params">template, script</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// https://github.com/vuejs/vue-loader/blob/423b8341ab368c2117931e909e2da9af74503635/lib/loaders/templateLoader.js#L46</span></span><br><span class="line">  <span class="keyword">let</span> source = template</span><br><span class="line">  <span class="keyword">if</span> (templateReplaceRegex.test(source)) &#123;</span><br><span class="line">    source = source.replace(templateReplaceRegex, <span class="string">'$1'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> finalOptions = &#123;</span><br><span class="line">    source: <span class="string">`&lt;div&gt;<span class="subst">$&#123;source&#125;</span>&lt;/div&gt;`</span>,</span><br><span class="line">    filename: <span class="string">'inline-component'</span>,</span><br><span class="line">    compiler: TemplateCompiler,</span><br><span class="line">    compilerOptions: &#123;</span><br><span class="line">      mode: <span class="string">'function'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> compiled = compileTemplate(finalOptions)</span><br><span class="line">  <span class="comment">// tips</span></span><br><span class="line">  <span class="keyword">if</span> (compiled.tips &amp;&amp; compiled.tips.length) &#123;</span><br><span class="line">    compiled.tips.forEach(<span class="function"><span class="params">tip</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(tip)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// errors</span></span><br><span class="line">  <span class="keyword">if</span> (compiled.errors &amp;&amp; compiled.errors.length) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(</span><br><span class="line">      <span class="string">`\n  Error compiling template:\n<span class="subst">$&#123;pad(compiled.source)&#125;</span>\n`</span> +</span><br><span class="line">        compiled.errors.map(<span class="function"><span class="params">e</span> =&gt;</span> <span class="string">`  - <span class="subst">$&#123;e&#125;</span>`</span>).join(<span class="string">'\n'</span>) +</span><br><span class="line">        <span class="string">'\n'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> demoComponentContent = <span class="string">`</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;compiled.code.replace(<span class="string">'return function render'</span>, <span class="string">'function render'</span>)&#125;</span></span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  <span class="comment">// todo: 这里采用了硬编码有待改进</span></span><br><span class="line">  script = script.trim()</span><br><span class="line">  <span class="keyword">if</span> (script) &#123;</span><br><span class="line">    script = script</span><br><span class="line">      .replace(<span class="regexp">/export\s+default/</span>, <span class="string">'const democomponentExport ='</span>)</span><br><span class="line">      .replace(<span class="regexp">/import (&#123;.*&#125;) from 'vue'/g</span>, (s, s1) =&gt; <span class="string">`const <span class="subst">$&#123;s1&#125;</span> = Vue`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    script = <span class="string">'const democomponentExport = &#123;&#125;'</span></span><br><span class="line">  &#125;</span><br><span class="line">  demoComponentContent = <span class="string">`(function() &#123;</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;demoComponentContent&#125;</span></span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;script&#125;</span></span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      render,</span></span><br><span class="line"><span class="string">      ...democomponentExport</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;)()`</span></span><br><span class="line">  <span class="keyword">return</span> demoComponentContent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  stripScript,</span><br><span class="line">  stripStyle,</span><br><span class="line">  stripTemplate,</span><br><span class="line">  genInlineComponentText</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="添加-md-loader-配置"><a href="#添加-md-loader-配置" class="headerlink" title="添加 md-loader 配置"></a>添加 md-loader 配置</h4><p><code>webpack.config.base.js</code>添加 markdown 规则</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">DIFF</span></header><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+  test: /\.md$/,</span></span><br><span class="line"><span class="addition">+  use: [</span></span><br><span class="line"><span class="addition">+    &#123;</span></span><br><span class="line"><span class="addition">+      loader: 'vue-loader',</span></span><br><span class="line"><span class="addition">+      options: &#123;</span></span><br><span class="line"><span class="addition">+        compilerOptions: &#123;</span></span><br><span class="line"><span class="addition">+          preserveWhitespace: false</span></span><br><span class="line"><span class="addition">+        &#125;</span></span><br><span class="line"><span class="addition">+      &#125;</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line"><span class="addition">+    &#123;</span></span><br><span class="line"><span class="addition">+      loader: path.resolve(__dirname, './md-loader/index.js')</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+  ]</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="搭建运行环境的-vue-页面"><a href="#搭建运行环境的-vue-页面" class="headerlink" title="搭建运行环境的 vue 页面"></a>搭建运行环境的 vue 页面</h2><p>修改<code>website</code>下的配置，变成一个完整的 demo 页</p>
<h3 id="创建单页面组件"><a href="#创建单页面组件" class="headerlink" title="创建单页面组件"></a>创建单页面组件</h3><p>新建<code>components</code>文件夹，添加组件</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cd website</span><br><span class="line">mkdir Container DemoBlock Header Nav</span><br></pre></td></tr></table></figure></div>
<p>其中Container 是文档主要内容区域， Header 是文档头部，Nav 是文档侧边导航， DemoBlock是 vue 源码编译为 demo 的组件，现在除了 DemoBlock 外，其他组件暂时没有具体实现，以后在慢慢补充。代码也过于冗长，不贴出来了，可以下载来看。</p>
<h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">DIFF</span></header><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="deletion">-  &lt;div class="app"&gt;</span></span><br><span class="line"><span class="deletion">-    &lt;Hello :name="name" /&gt;</span></span><br><span class="line"><span class="deletion">-  &lt;/div&gt;</span></span><br><span class="line"><span class="addition">+  &lt;Header /&gt;</span></span><br><span class="line"><span class="addition">+  &lt;section class="content-wrapper"&gt;</span></span><br><span class="line"><span class="addition">+    &lt;Nav class="menu-bar" /&gt;</span></span><br><span class="line"><span class="addition">+    &lt;Container class="content"&gt;</span></span><br><span class="line"><span class="addition">+      &lt;router-view /&gt;</span></span><br><span class="line"><span class="addition">+    &lt;/Container&gt;</span></span><br><span class="line"><span class="addition">+  &lt;/section&gt;</span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang="ts"&gt;</span><br><span class="line">import &#123; defineComponent, reactive, toRefs &#125; from 'vue'</span><br><span class="line"><span class="addition">+import Header from './components/Header/index.vue'</span></span><br><span class="line"><span class="addition">+import Nav from './components/Nav/index.vue'</span></span><br><span class="line"><span class="addition">+import Container from './components/Container/index.vue'</span></span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: 'App',</span><br><span class="line"><span class="addition">+  components: &#123;</span></span><br><span class="line"><span class="addition">+    Header,</span></span><br><span class="line"><span class="addition">+    Nav,</span></span><br><span class="line"><span class="addition">+    Container</span></span><br><span class="line"><span class="addition">+  &#125;,</span></span><br><span class="line">  setup() &#123;</span><br><span class="line">    const state = reactive(&#123; name: 'admin ui' &#125;)</span><br><span class="line">    return &#123;</span><br><span class="line">      ...toRefs(state)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="addition">+&lt;style lang="scss" scoped&gt;</span></span><br><span class="line"><span class="addition">+.content-wrapper &#123;</span></span><br><span class="line"><span class="addition">+  display: flex;</span></span><br><span class="line"><span class="addition">+  overflow: hidden;</span></span><br><span class="line"><span class="addition">+  flex: 1;</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+  .menu-bar &#123;</span></span><br><span class="line"><span class="addition">+    width: 200px;</span></span><br><span class="line"><span class="addition">+    color: #fff;</span></span><br><span class="line"><span class="addition">+    background: red;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+  .content &#123;</span></span><br><span class="line"><span class="addition">+    flex: 1;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>
<h3 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建路由</h3><p>website 下新建 <code>nav.config.ts</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getLang &#125; <span class="keyword">from</span> <span class="string">'./utils/lang'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> localLang = getLang()</span><br><span class="line"><span class="keyword">const</span> componentsString = localLang === <span class="string">'en-US'</span> ? <span class="string">'Components'</span> : <span class="string">'组件'</span></span><br><span class="line"><span class="keyword">const</span> baseComponentsString = localLang === <span class="string">'en-US'</span> ? <span class="string">'Base Components'</span> : <span class="string">'基础组件'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> navs = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: componentsString,</span><br><span class="line">    groups: [</span><br><span class="line">      &#123;</span><br><span class="line">        groupName: baseComponentsString,</span><br><span class="line">        list: [</span><br><span class="line">          &#123;</span><br><span class="line">            path: <span class="string">'/button'</span>,</span><br><span class="line">            name: <span class="string">'Button'</span>,</span><br><span class="line">            component: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (localLang === <span class="string">'en-US'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">import</span>(<span class="string">'./markdown/en-US/button.md'</span>)</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">import</span>(<span class="string">'./markdown/zh-CN/button.md'</span>)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>
<p>创建 <code>utils/lang.ts</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">TS</span></header><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> curLang = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">'lang'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> langTransformMap = &#123;</span><br><span class="line">  zh: <span class="string">'zh-CN'</span>,</span><br><span class="line">  en: <span class="string">'en-US'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setLang</span>(<span class="params">langType</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">'lang'</span>, langType)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">transformLang</span>(<span class="params">originalLang</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> langTransform = langTransformMap[originalLang]</span><br><span class="line">  <span class="keyword">if</span> (langTransform === <span class="literal">undefined</span>) langTransform = originalLang</span><br><span class="line">  curLang = langTransform</span><br><span class="line">  <span class="keyword">return</span> langTransform</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getLang</span>(<span class="params">lang?: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (curLang == <span class="literal">null</span> || curLang === <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> langTransform = transformLang(<span class="built_in">window</span>.sessionStorage.getItem(<span class="string">'lang'</span>) || navigator.language)</span><br><span class="line">    setLang(langTransform)</span><br><span class="line">    <span class="keyword">return</span> langTransform</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lang ? <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">'lang'</span>) || navigator.language : curLang</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>新建<code>router/index.ts</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> &#123; nextTick &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> hljs <span class="keyword">from</span> <span class="string">'highlight.js'</span></span><br><span class="line"><span class="keyword">import</span> &#123; navs &#125; <span class="keyword">from</span> <span class="string">'../nav.config'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> indexRoute = [</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> componentRoutes = []</span><br><span class="line"></span><br><span class="line">navs.forEach(<span class="function"><span class="params">navItem</span> =&gt;</span> &#123;</span><br><span class="line">  navItem.groups.forEach(<span class="function"><span class="params">groupItem</span> =&gt;</span> &#123;</span><br><span class="line">    groupItem.list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.path !== <span class="string">'/'</span>) &#123;</span><br><span class="line">        componentRoutes.push(&#123;</span><br><span class="line">          path: item.path,</span><br><span class="line">          name: item.path.slice(<span class="number">1</span>),</span><br><span class="line">          meta: &#123;</span><br><span class="line">            name: item.path.slice(<span class="number">1</span>)</span><br><span class="line">          &#125;,</span><br><span class="line">          component: item.component</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [...indexRoute, ...componentRoutes]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history: createWebHashHistory(),</span><br><span class="line">  routes: routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> blocks = <span class="built_in">document</span>.querySelectorAll(<span class="string">'pre code:not(.hljs)'</span>)</span><br><span class="line">    <span class="built_in">Array</span>.prototype.forEach.call(blocks, hljs.highlightBlock)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></div>
<p>创建 css 文件，修改页面样式</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* website/styles/common.scss */</span></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Helvetica Neue'</span>, Helvetica, <span class="string">'PingFang SC'</span>, <span class="string">'Hiragino Sans GB'</span>, <span class="string">'Microsoft YaHei'</span>,</span><br><span class="line">    SimSun, sans-serif;</span><br><span class="line">  <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">  <span class="attribute">-webkit-tap-highlight-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#409eff</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f9fafc</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eaeefb</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">select</span>,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: inherit;</span><br><span class="line">  <span class="attribute">font-size</span>: inherit;</span><br><span class="line">  <span class="attribute">line-height</span>: inherit;</span><br><span class="line">  <span class="attribute">color</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">18px</span> <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Menlo, Monaco, Consolas, Courier, monospace;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">-webkit-font-smoothing</span>: auto;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.8</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fafafa</span>;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#eaeefb</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>修改<code>main.ts</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">DIFF</span></header><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line">import &#123; createApp &#125; from 'vue'</span><br><span class="line">import App from './app.vue'</span><br><span class="line">import AdminUI from '../packages/admin-ui'</span><br><span class="line"><span class="addition">+import 'highlight.js/styles/color-brewer.css' // 代码块高亮主题，多种主题可选择</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="addition">+import router from './router'</span></span><br><span class="line"><span class="addition">+import DemoBlock from './components/DemoBlock/index.vue'</span></span><br><span class="line"><span class="addition">+import './styles/common.scss'</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-createApp(App).use(AdminUI).mount('#app')</span></span><br><span class="line"><span class="addition">+createApp(App).use(AdminUI).component('demo-block', DemoBlock).use(router).mount('#app')</span></span><br></pre></td></tr></table></figure></div>
<h3 id="添加枚举类型"><a href="#添加枚举类型" class="headerlink" title="添加枚举类型"></a>添加枚举类型</h3><p>新建 enums 文件夹，用来存放项目的枚举类型，目前只有语言类型需要保存</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">TS</span></header><figure class="iseeu highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> Language &#123;</span><br><span class="line">  <span class="comment">/** Chinese */</span></span><br><span class="line">  CN = <span class="string">'zh-CN'</span>,</span><br><span class="line">  <span class="comment">/** English */</span></span><br><span class="line">  EN = <span class="string">'en-US'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="修改packages-amp-amp-编写文档"><a href="#修改packages-amp-amp-编写文档" class="headerlink" title="修改packages &amp;&amp; 编写文档"></a>修改packages &amp;&amp; 编写文档</h2><p>例子中，我定义了<code>button</code>组件，然后新建<code>markdown</code>文件夹，创建相应的语言文件夹，分别创建<code>button.md</code>，然后编写文档，就完成了。这里有几点要注意：</p>
<ul>
<li><code>:::demo demo-desc</code>是固定的语法，一定要这样写，下面的源码才会被编译成示例</li>
<li>示例中的<code>dt-button</code>，对应的是 button 组件中，vue 的 name</li>
</ul>
<h2 id="增加-build-docs命令"><a href="#增加-build-docs命令" class="headerlink" title="增加 build:docs命令"></a>增加 build:docs命令</h2><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">"script": &#123;</span><br><span class="line">+  "build:docs": "webpack --config build/webpack.config.dev.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>adminUI</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>adminUI</tag>
      </tags>
  </entry>
  <entry>
    <title>从零搭建Vue UI组件库(四)</title>
    <url>/blog/2021/04/16/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAVue%20UI%E7%BB%84%E4%BB%B6%E5%BA%93(%E5%9B%9B)/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>顺便调整了 build 文件夹结构，公共的webpack 配置单独提了出来；为了方便区分，把开发服务运行在了 3100 端口（8080 默认 vue 服务占用， 3000默认 vite 服务占用，5000 默认博客服务占用）</p>
<blockquote>
<p>这篇主要添加项目的代码检查和提交校验，不得不说，这一环节的配置真是又多又杂，所以就不详尽的分布赘述了，本人也是直接使用了 <a href="https://github.com/lost-dream/vite-template" target="_blank" rel="noopener">我自己 vite 脚手架</a>中的配置。</p>
</blockquote>
<h2 id="加入-eslint-prettier-stylelint-支持"><a href="#加入-eslint-prettier-stylelint-支持" class="headerlink" title="加入 eslint/prettier/stylelint 支持"></a>加入 eslint/prettier/stylelint 支持</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">npm install babel-eslint eslint prettier eslint-config-prettier eslint-import-resolver-alias  eslint-plugin-prettier  eslint-plugin-vue @typescript-eslint/eslint-plugin @typescript-eslint/parser -D -W</span><br></pre></td></tr></table></figure></div>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -D stylelint stylelint-config-prettier stylelint-config-standard stylelint-order stylelint-scss -W</span><br></pre></td></tr></table></figure></div>
<h3 id="创建-eslintrc-js"><a href="#创建-eslintrc-js" class="headerlink" title="创建.eslintrc.js"></a>创建<code>.eslintrc.js</code></h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">    es6: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  parser: <span class="string">'vue-eslint-parser'</span>,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    parser: <span class="string">'@typescript-eslint/parser'</span>,</span><br><span class="line">    ecmaVersion: <span class="number">2020</span>,</span><br><span class="line">    sourceType: <span class="string">'module'</span>,</span><br><span class="line">    jsxPragma: <span class="string">'React'</span>,</span><br><span class="line">    ecmaFeatures: &#123;</span><br><span class="line">      jsx: <span class="literal">true</span>,</span><br><span class="line">      tsx: <span class="literal">true</span>,</span><br><span class="line">      modules: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  extends: [</span><br><span class="line">    <span class="string">'plugin:vue/vue3-recommended'</span>,</span><br><span class="line">    <span class="string">'plugin:@typescript-eslint/recommended'</span>,</span><br><span class="line">    <span class="string">'prettier'</span>,</span><br><span class="line">    <span class="string">'plugin:prettier/recommended'</span></span><br><span class="line">  ],</span><br><span class="line">  plugins: [<span class="string">'vue'</span>, <span class="string">'prettier'</span>, <span class="string">'@typescript-eslint'</span>],</span><br><span class="line">  settings: &#123;</span><br><span class="line">    <span class="string">'import/resolver'</span>: &#123;</span><br><span class="line">      alias: &#123;</span><br><span class="line">        map: [[<span class="string">'@packages'</span>, <span class="string">'@website'</span>, <span class="string">'./packages'</span>, <span class="string">'./website'</span>]],</span><br><span class="line">        extensions: [<span class="string">'.ts'</span>, <span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'@typescript-eslint/no-explicit-any'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/no-var-requires'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/no-empty-function'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'vue/custom-event-name-casing'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'no-use-before-define'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/no-use-before-define'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/ban-ts-comment'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/ban-types'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/no-non-null-assertion'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/explicit-module-boundary-types'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/no-unused-vars'</span>: [</span><br><span class="line">      <span class="string">'error'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        argsIgnorePattern: <span class="string">'^h$'</span>,</span><br><span class="line">        varsIgnorePattern: <span class="string">'^h$'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'no-unused-vars'</span>: [</span><br><span class="line">      <span class="string">'error'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        argsIgnorePattern: <span class="string">'^h$'</span>,</span><br><span class="line">        varsIgnorePattern: <span class="string">'^h$'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'vue/attributes-order'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'vue/one-component-per-file'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'vue/html-closing-bracket-newline'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'vue/max-attributes-per-line'</span>: [</span><br><span class="line">      <span class="string">'error'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        singleline: <span class="number">10</span>,</span><br><span class="line">        multiline: &#123;</span><br><span class="line">          max: <span class="number">10</span>,</span><br><span class="line">          allowFirstLine: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 组件 name 首字母必须大写</span></span><br><span class="line">    <span class="string">'vue/component-definition-name-casing'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'vue/multiline-html-element-content-newline'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'vue/attribute-hyphenation'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'vue/require-default-prop'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'vue/html-self-closing'</span>: [</span><br><span class="line">      <span class="string">'error'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        html: &#123;</span><br><span class="line">          <span class="keyword">void</span>: <span class="string">'always'</span>,</span><br><span class="line">          normal: <span class="string">'never'</span>,</span><br><span class="line">          component: <span class="string">'always'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        svg: <span class="string">'always'</span>,</span><br><span class="line">        math: <span class="string">'always'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'prettier/prettier'</span>: <span class="string">'warn'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="创建-prettierrc"><a href="#创建-prettierrc" class="headerlink" title="创建.prettierrc"></a>创建<code>.prettierrc</code></h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JSON</span></header><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"printWidth"</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">"tabWidth"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"useTabs"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"trailingComma"</span>: <span class="string">"none"</span>,</span><br><span class="line">  <span class="attr">"bracketSpacing"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"jsxBracketSameLine"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"arrowParens"</span>: <span class="string">"avoid"</span>,</span><br><span class="line">  <span class="attr">"semi"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="创建-eslintignore"><a href="#创建-eslintignore" class="headerlink" title="创建.eslintignore"></a>创建<code>.eslintignore</code></h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MD</span></header><figure class="iseeu highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section"># Editor</span></span><br><span class="line">.vscode</span><br><span class="line">.idea</span><br><span class="line"></span><br><span class="line"><span class="section"># Project</span></span><br><span class="line">*.md</span><br><span class="line">/lib</span><br><span class="line">/build</span><br><span class="line"></span><br><span class="line"><span class="section"># typescript</span></span><br><span class="line">*.d.ts</span><br><span class="line"></span><br><span class="line"><span class="section"># file</span></span><br><span class="line">*.scss</span><br><span class="line">*.html</span><br><span class="line"></span><br><span class="line"><span class="section"># Others</span></span><br><span class="line">node_modules</span><br></pre></td></tr></table></figure></div>
<h3 id="添加stylelint-config-js"><a href="#添加stylelint-config-js" class="headerlink" title="添加stylelint.config.js"></a>添加<code>stylelint.config.js</code></h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  plugins: [<span class="string">'stylelint-order'</span>, <span class="string">'stylelint-scss'</span>],</span><br><span class="line">  extends: [<span class="string">'stylelint-config-standard'</span>, <span class="string">'stylelint-config-prettier'</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'selector-pseudo-class-no-unknown'</span>: [</span><br><span class="line">      <span class="literal">true</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        ignorePseudoClasses: [<span class="string">'global'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'no-empty-source'</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">'named-grid-areas-no-invalid'</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">'unicode-bom'</span>: <span class="string">'never'</span>,</span><br><span class="line">    <span class="string">'no-descending-specificity'</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">'font-family-no-missing-generic-family-keyword'</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">'declaration-colon-space-after'</span>: <span class="string">'always-single-line'</span>,</span><br><span class="line">    <span class="string">'declaration-colon-space-before'</span>: <span class="string">'never'</span>,</span><br><span class="line">    <span class="string">'declaration-block-trailing-semicolon'</span>: [</span><br><span class="line">      <span class="string">'always'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        ignore: [<span class="string">'single-declaration'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'rule-empty-line-before'</span>: [</span><br><span class="line">      <span class="string">'always'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        ignore: [<span class="string">'after-comment'</span>, <span class="string">'first-nested'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'unit-no-unknown'</span>: [<span class="literal">true</span>, &#123; <span class="attr">ignoreUnits</span>: [<span class="string">'rpx'</span>] &#125;],</span><br><span class="line">    <span class="comment">// Specify the alphabetical order of the attributes in the declaration block</span></span><br><span class="line">    <span class="string">'order/properties-order'</span>: [</span><br><span class="line">      <span class="string">'position'</span>,</span><br><span class="line">      <span class="string">'top'</span>,</span><br><span class="line">      <span class="string">'right'</span>,</span><br><span class="line">      <span class="string">'bottom'</span>,</span><br><span class="line">      <span class="string">'left'</span>,</span><br><span class="line">      <span class="string">'z-index'</span>,</span><br><span class="line">      <span class="string">'display'</span>,</span><br><span class="line">      <span class="string">'float'</span>,</span><br><span class="line">      <span class="string">'width'</span>,</span><br><span class="line">      <span class="string">'height'</span>,</span><br><span class="line">      <span class="string">'max-width'</span>,</span><br><span class="line">      <span class="string">'max-height'</span>,</span><br><span class="line">      <span class="string">'min-width'</span>,</span><br><span class="line">      <span class="string">'min-height'</span>,</span><br><span class="line">      <span class="string">'padding'</span>,</span><br><span class="line">      <span class="string">'padding-top'</span>,</span><br><span class="line">      <span class="string">'padding-right'</span>,</span><br><span class="line">      <span class="string">'padding-bottom'</span>,</span><br><span class="line">      <span class="string">'padding-left'</span>,</span><br><span class="line">      <span class="string">'margin'</span>,</span><br><span class="line">      <span class="string">'margin-top'</span>,</span><br><span class="line">      <span class="string">'margin-right'</span>,</span><br><span class="line">      <span class="string">'margin-bottom'</span>,</span><br><span class="line">      <span class="string">'margin-left'</span>,</span><br><span class="line">      <span class="string">'margin-collapse'</span>,</span><br><span class="line">      <span class="string">'margin-top-collapse'</span>,</span><br><span class="line">      <span class="string">'margin-right-collapse'</span>,</span><br><span class="line">      <span class="string">'margin-bottom-collapse'</span>,</span><br><span class="line">      <span class="string">'margin-left-collapse'</span>,</span><br><span class="line">      <span class="string">'overflow'</span>,</span><br><span class="line">      <span class="string">'overflow-x'</span>,</span><br><span class="line">      <span class="string">'overflow-y'</span>,</span><br><span class="line">      <span class="string">'clip'</span>,</span><br><span class="line">      <span class="string">'clear'</span>,</span><br><span class="line">      <span class="string">'font'</span>,</span><br><span class="line">      <span class="string">'font-family'</span>,</span><br><span class="line">      <span class="string">'font-size'</span>,</span><br><span class="line">      <span class="string">'font-smoothing'</span>,</span><br><span class="line">      <span class="string">'osx-font-smoothing'</span>,</span><br><span class="line">      <span class="string">'font-style'</span>,</span><br><span class="line">      <span class="string">'font-weight'</span>,</span><br><span class="line">      <span class="string">'hyphens'</span>,</span><br><span class="line">      <span class="string">'src'</span>,</span><br><span class="line">      <span class="string">'line-height'</span>,</span><br><span class="line">      <span class="string">'letter-spacing'</span>,</span><br><span class="line">      <span class="string">'word-spacing'</span>,</span><br><span class="line">      <span class="string">'color'</span>,</span><br><span class="line">      <span class="string">'text-align'</span>,</span><br><span class="line">      <span class="string">'text-decoration'</span>,</span><br><span class="line">      <span class="string">'text-indent'</span>,</span><br><span class="line">      <span class="string">'text-overflow'</span>,</span><br><span class="line">      <span class="string">'text-rendering'</span>,</span><br><span class="line">      <span class="string">'text-size-adjust'</span>,</span><br><span class="line">      <span class="string">'text-shadow'</span>,</span><br><span class="line">      <span class="string">'text-transform'</span>,</span><br><span class="line">      <span class="string">'word-break'</span>,</span><br><span class="line">      <span class="string">'word-wrap'</span>,</span><br><span class="line">      <span class="string">'white-space'</span>,</span><br><span class="line">      <span class="string">'vertical-align'</span>,</span><br><span class="line">      <span class="string">'list-style'</span>,</span><br><span class="line">      <span class="string">'list-style-type'</span>,</span><br><span class="line">      <span class="string">'list-style-position'</span>,</span><br><span class="line">      <span class="string">'list-style-image'</span>,</span><br><span class="line">      <span class="string">'pointer-events'</span>,</span><br><span class="line">      <span class="string">'cursor'</span>,</span><br><span class="line">      <span class="string">'background'</span>,</span><br><span class="line">      <span class="string">'background-attachment'</span>,</span><br><span class="line">      <span class="string">'background-color'</span>,</span><br><span class="line">      <span class="string">'background-image'</span>,</span><br><span class="line">      <span class="string">'background-position'</span>,</span><br><span class="line">      <span class="string">'background-repeat'</span>,</span><br><span class="line">      <span class="string">'background-size'</span>,</span><br><span class="line">      <span class="string">'border'</span>,</span><br><span class="line">      <span class="string">'border-collapse'</span>,</span><br><span class="line">      <span class="string">'border-top'</span>,</span><br><span class="line">      <span class="string">'border-right'</span>,</span><br><span class="line">      <span class="string">'border-bottom'</span>,</span><br><span class="line">      <span class="string">'border-left'</span>,</span><br><span class="line">      <span class="string">'border-color'</span>,</span><br><span class="line">      <span class="string">'border-image'</span>,</span><br><span class="line">      <span class="string">'border-top-color'</span>,</span><br><span class="line">      <span class="string">'border-right-color'</span>,</span><br><span class="line">      <span class="string">'border-bottom-color'</span>,</span><br><span class="line">      <span class="string">'border-left-color'</span>,</span><br><span class="line">      <span class="string">'border-spacing'</span>,</span><br><span class="line">      <span class="string">'border-style'</span>,</span><br><span class="line">      <span class="string">'border-top-style'</span>,</span><br><span class="line">      <span class="string">'border-right-style'</span>,</span><br><span class="line">      <span class="string">'border-bottom-style'</span>,</span><br><span class="line">      <span class="string">'border-left-style'</span>,</span><br><span class="line">      <span class="string">'border-width'</span>,</span><br><span class="line">      <span class="string">'border-top-width'</span>,</span><br><span class="line">      <span class="string">'border-right-width'</span>,</span><br><span class="line">      <span class="string">'border-bottom-width'</span>,</span><br><span class="line">      <span class="string">'border-left-width'</span>,</span><br><span class="line">      <span class="string">'border-radius'</span>,</span><br><span class="line">      <span class="string">'border-top-right-radius'</span>,</span><br><span class="line">      <span class="string">'border-bottom-right-radius'</span>,</span><br><span class="line">      <span class="string">'border-bottom-left-radius'</span>,</span><br><span class="line">      <span class="string">'border-top-left-radius'</span>,</span><br><span class="line">      <span class="string">'border-radius-topright'</span>,</span><br><span class="line">      <span class="string">'border-radius-bottomright'</span>,</span><br><span class="line">      <span class="string">'border-radius-bottomleft'</span>,</span><br><span class="line">      <span class="string">'border-radius-topleft'</span>,</span><br><span class="line">      <span class="string">'content'</span>,</span><br><span class="line">      <span class="string">'quotes'</span>,</span><br><span class="line">      <span class="string">'outline'</span>,</span><br><span class="line">      <span class="string">'outline-offset'</span>,</span><br><span class="line">      <span class="string">'opacity'</span>,</span><br><span class="line">      <span class="string">'filter'</span>,</span><br><span class="line">      <span class="string">'visibility'</span>,</span><br><span class="line">      <span class="string">'size'</span>,</span><br><span class="line">      <span class="string">'zoom'</span>,</span><br><span class="line">      <span class="string">'transform'</span>,</span><br><span class="line">      <span class="string">'box-align'</span>,</span><br><span class="line">      <span class="string">'box-flex'</span>,</span><br><span class="line">      <span class="string">'box-orient'</span>,</span><br><span class="line">      <span class="string">'box-pack'</span>,</span><br><span class="line">      <span class="string">'box-shadow'</span>,</span><br><span class="line">      <span class="string">'box-sizing'</span>,</span><br><span class="line">      <span class="string">'table-layout'</span>,</span><br><span class="line">      <span class="string">'animation'</span>,</span><br><span class="line">      <span class="string">'animation-delay'</span>,</span><br><span class="line">      <span class="string">'animation-duration'</span>,</span><br><span class="line">      <span class="string">'animation-iteration-count'</span>,</span><br><span class="line">      <span class="string">'animation-name'</span>,</span><br><span class="line">      <span class="string">'animation-play-state'</span>,</span><br><span class="line">      <span class="string">'animation-timing-function'</span>,</span><br><span class="line">      <span class="string">'animation-fill-mode'</span>,</span><br><span class="line">      <span class="string">'transition'</span>,</span><br><span class="line">      <span class="string">'transition-delay'</span>,</span><br><span class="line">      <span class="string">'transition-duration'</span>,</span><br><span class="line">      <span class="string">'transition-property'</span>,</span><br><span class="line">      <span class="string">'transition-timing-function'</span>,</span><br><span class="line">      <span class="string">'background-clip'</span>,</span><br><span class="line">      <span class="string">'backface-visibility'</span>,</span><br><span class="line">      <span class="string">'resize'</span>,</span><br><span class="line">      <span class="string">'appearance'</span>,</span><br><span class="line">      <span class="string">'user-select'</span>,</span><br><span class="line">      <span class="string">'interpolation-mode'</span>,</span><br><span class="line">      <span class="string">'direction'</span>,</span><br><span class="line">      <span class="string">'marks'</span>,</span><br><span class="line">      <span class="string">'page'</span>,</span><br><span class="line">      <span class="string">'set-link-source'</span>,</span><br><span class="line">      <span class="string">'unicode-bidi'</span>,</span><br><span class="line">      <span class="string">'speak'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'at-rule-no-unknown'</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// [scss-rules](https://www.npmjs.com/package/stylelint-scss)</span></span><br><span class="line">    <span class="string">'scss/at-rule-no-unknown'</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ignoreFiles: [<span class="string">'**/*.js'</span>, <span class="string">'**/*.jsx'</span>, <span class="string">'**/*.tsx'</span>, <span class="string">'**/*.ts'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="添加-lint-脚本"><a href="#添加-lint-脚本" class="headerlink" title="添加 lint 脚本"></a>添加 lint 脚本</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">DIFF</span></header><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "list": "lerna list",</span><br><span class="line">    "dev": "webpack-dev-server --progress --config build/webpack.config.dev.js",</span><br><span class="line">    "build": "webpack --config build/webpack.config.prod.js",</span><br><span class="line"><span class="deletion">-    "reinstall": "rimraf node_modules &amp;&amp; yarn"</span></span><br><span class="line"><span class="addition">+    "reinstall": "rimraf node_modules &amp;&amp; yarn",</span></span><br><span class="line"><span class="addition">+    "lint:packages": "eslint --ext .ts,.js,.vue,.css,.json,.scss packages --fix",</span></span><br><span class="line"><span class="addition">+    "lint:website": "eslint --ext .ts,.js,.vue,.css,.json,.scss website --fix",</span></span><br><span class="line"><span class="addition">+    "lint": "yarn lint:packages &amp;&amp; yarn lint:website"</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>重启服务和编辑器，运行<code>yarn lint</code>，就会发现有报错了，按照 lint 规则规范代码即可</p>
<blockquote>
<p><strong>以上是我自己的规则，可以根据自己和团队的习惯更改相应 rules</strong></p>
</blockquote>
<h3 id="添加git-hook"><a href="#添加git-hook" class="headerlink" title="添加git hook"></a>添加<code>git hook</code></h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add -D lint-staged yorkie -W</span><br></pre></td></tr></table></figure></div>
<p>修改<code>package.json</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">DIFF</span></header><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="addition">+  "gitHooks": &#123;</span></span><br><span class="line"><span class="addition">+   "pre-commit": "lint-staged",</span></span><br><span class="line"><span class="addition">+   "pre-push": "yarn lint"</span></span><br><span class="line"><span class="addition">+  &#125;,</span></span><br><span class="line"><span class="addition">+  "lint-staged": &#123;</span></span><br><span class="line"><span class="addition">+   "*.&#123;js,jsx,vue,ts,tsx&#125;": [</span></span><br><span class="line"><span class="addition">+      "yarn lint",</span></span><br><span class="line"><span class="addition">+      "prettier --write",</span></span><br><span class="line"><span class="addition">+      "git add"</span></span><br><span class="line"><span class="addition">+    ]</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>改完收工！</p>
]]></content>
      <categories>
        <category>adminUI</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>adminUI</tag>
      </tags>
  </entry>
  <entry>
    <title>从零搭建Vue UI组件库(三)</title>
    <url>/blog/2021/04/15/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAVue%20UI%E7%BB%84%E4%BB%B6%E5%BA%93(%E4%B8%89)/</url>
    <content><![CDATA[<h2 id="加入-typescript-sass"><a href="#加入-typescript-sass" class="headerlink" title="加入 typescript/sass"></a>加入 typescript/sass</h2><h3 id="添加-typescript、ts-loader、sass、sass-loader"><a href="#添加-typescript、ts-loader、sass、sass-loader" class="headerlink" title="添加 typescript、ts-loader、sass、sass-loader"></a>添加 typescript、ts-loader、sass、sass-loader</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add -D typescript ts-loader sass sass-loader -W</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p><a href="mailto:ts-loader@8.1.0" target="_blank" rel="noopener">ts-loader@8.1.0</a> 报错，这里选择了 v8.0.3; <a href="mailto:sass-loader@11.0.1" target="_blank" rel="noopener">sass-loader@11.0.1</a>报错，选择了 v10.1.1,如果你的 loader 运行没有报错可以忽略。</p>
</blockquote>
<h3 id="添加-tsconfig-json"><a href="#添加-tsconfig-json" class="headerlink" title="添加 tsconfig.json"></a>添加 tsconfig.json</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JSON</span></header><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"ESNext"</span>,</span><br><span class="line">    <span class="attr">"declaration"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"removeComments"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="attr">"esModuleInterop"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"jsx"</span>: <span class="string">"preserve"</span>,</span><br><span class="line">    <span class="attr">"noLib"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es6"</span>,</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"."</span>,</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [<span class="string">"ESNext"</span>, <span class="string">"DOM"</span>],</span><br><span class="line">    <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"paths"</span>: &#123;</span><br><span class="line">      <span class="attr">"@packages/*"</span>: [<span class="string">"packages/*"</span>],</span><br><span class="line">      <span class="attr">"@website/*"</span>: [<span class="string">"website/*"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"exclude"</span>: [<span class="string">"node_modules"</span>, <span class="string">"lib"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="添加-ts-声明文件"><a href="#添加-ts-声明文件" class="headerlink" title="添加 ts 声明文件"></a>添加 ts 声明文件</h3><p>根目录新建<code>types</code>文件夹，ts 的所有声明放在这里。目前只新增<code>shims-vue.d.ts</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">TYPESCRIPT</span></header><figure class="iseeu highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> '*.vue' &#123;</span><br><span class="line">  <span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">  <span class="keyword">const</span> Component: ReturnType&lt;<span class="keyword">typeof</span> defineComponent&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> Component</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="修改对应-js-文件为-ts-文件-css改为-scss"><a href="#修改对应-js-文件为-ts-文件-css改为-scss" class="headerlink" title="修改对应 js 文件为 ts 文件, css改为 scss"></a>修改对应 js 文件为 ts 文件, css改为 scss</h3><p>把 <code>packages</code>对应包的 js文件和<code>website</code>下的<code>index.js</code>全部改为 ts 结尾；所有 vue 组件的 <code>script</code> 增加<code>lang=“ts”</code>，<code>style</code>增加<code>lang=”scss“</code></p>
<h3 id="修改-webpack-配置"><a href="#修改-webpack-配置" class="headerlink" title="修改 webpack 配置"></a>修改 webpack 配置</h3><p>增加 ts-loader 和 sass-loader配置；修改入口文件为 ts 结尾；添加<code>resolve.extensions</code>，支持 ts 文件引用</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">DIFF</span></header><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line">// build/webpack.config.base.js</span><br><span class="line">'use strict'</span><br><span class="line">const HtmlWebpackPlugin = require('html-webpack-plugin')</span><br><span class="line">const &#123; VueLoaderPlugin &#125; = require('vue-loader')</span><br><span class="line">const path = require('path')</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"><span class="deletion">-  entry: path.resolve(__dirname, '../website/index.js'),</span></span><br><span class="line"><span class="addition">+  entry: path.resolve(__dirname, '../website/index.ts'),</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, '../dist'),</span><br><span class="line">    filename: 'index.js'</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="addition">+  resolve: &#123;</span></span><br><span class="line"><span class="addition">+    alias: &#123;</span></span><br><span class="line"><span class="addition">+      '@package': path.resolve(__dirname, '../packages'),</span></span><br><span class="line"><span class="addition">+      '@website': path.resolve(__dirname, '../website')</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line"><span class="addition">+    extensions: ['.ts', '.js', '.json']</span></span><br><span class="line"><span class="addition">+  &#125;,</span></span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        loader: 'babel-loader',</span><br><span class="line">        exclude: /node_modules/</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.vue$/,</span><br><span class="line">        loader: 'vue-loader'</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="addition">+      &#123;</span></span><br><span class="line"><span class="addition">+        test: /\.scss$/,</span></span><br><span class="line"><span class="addition">+        use: [</span></span><br><span class="line"><span class="addition">+          &#123; loader: 'style-loader' &#125;,</span></span><br><span class="line"><span class="addition">+          &#123;</span></span><br><span class="line"><span class="addition">+            loader: 'css-loader',</span></span><br><span class="line"><span class="addition">+            options: &#123; sourceMap: true &#125;</span></span><br><span class="line"><span class="addition">+          &#125;,</span></span><br><span class="line"><span class="addition">+          &#123;</span></span><br><span class="line"><span class="addition">+            loader: 'sass-loader'</span></span><br><span class="line"><span class="addition">+          &#125;</span></span><br><span class="line"><span class="addition">+        ]</span></span><br><span class="line"><span class="addition">+      &#125;,</span></span><br><span class="line"><span class="addition">+      &#123;</span></span><br><span class="line"><span class="addition">+        test: /\.tsx?$/,</span></span><br><span class="line"><span class="addition">+        use: [</span></span><br><span class="line"><span class="addition">+          &#123;</span></span><br><span class="line"><span class="addition">+            loader: 'babel-loader'</span></span><br><span class="line"><span class="addition">+          &#125;,</span></span><br><span class="line"><span class="addition">+          &#123;</span></span><br><span class="line"><span class="addition">+            loader: 'ts-loader',</span></span><br><span class="line"><span class="addition">+            options: &#123;</span></span><br><span class="line"><span class="addition">+              transpileOnly: true</span></span><br><span class="line"><span class="addition">+            &#125;</span></span><br><span class="line"><span class="addition">+          &#125;</span></span><br><span class="line"><span class="addition">+        ],</span></span><br><span class="line"><span class="addition">+        exclude: /node_modules/</span></span><br><span class="line"><span class="addition">+      &#125;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: './website/index.html',</span><br><span class="line">      filename: './index.html'</span><br><span class="line">    &#125;),</span><br><span class="line">    new VueLoaderPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// build/webpack.config.build.js</span><br><span class="line">'use strict'</span><br><span class="line">const path = require('path')</span><br><span class="line">const &#123; VueLoaderPlugin &#125; = require('vue-loader')</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  mode: 'production',</span><br><span class="line">  entry: &#123;</span><br><span class="line"><span class="deletion">-    adminUI: './packages/admin-ui/index.js'</span></span><br><span class="line"><span class="addition">+    adminUI: './packages/admin-ui/index.ts'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, '../lib'), // 出口目录</span><br><span class="line">    publicPath: '/lib/',</span><br><span class="line">    library: 'adminUI', // 包名</span><br><span class="line">    filename: 'index.js',</span><br><span class="line">    libraryTarget: 'umd',</span><br><span class="line">    umdNamedDefine: true // 会对 UMD 的构建过程中的 AMD 模块进行命名。否则就使用匿名的 define</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="addition">+  resolve: &#123;</span></span><br><span class="line"><span class="addition">+    alias: &#123;</span></span><br><span class="line"><span class="addition">+      '@package': path.resolve(__dirname, '../packages'),</span></span><br><span class="line"><span class="addition">+      '@website': path.resolve(__dirname, '../website')</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line"><span class="addition">+    extensions: ['.ts', '.js', '.json']</span></span><br><span class="line"><span class="addition">+  &#125;,</span></span><br><span class="line">  externals: &#123;</span><br><span class="line">    vue: &#123;</span><br><span class="line">      root: 'Vue',</span><br><span class="line">      commonjs: 'vue',</span><br><span class="line">      commonjs2: 'vue',</span><br><span class="line">      amd: 'vue'</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        commons: &#123;</span><br><span class="line">          test: /[\\/]node_modules[\\/]/,</span><br><span class="line">          name: 'vendor',</span><br><span class="line">          chunks: 'all'</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        loader: 'babel-loader',</span><br><span class="line">        exclude: /node_modules/</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.vue$/,</span><br><span class="line">        loader: 'vue-loader'</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="addition">+      &#123;</span></span><br><span class="line"><span class="addition">+        test: /\.scss$/,</span></span><br><span class="line"><span class="addition">+        use: [</span></span><br><span class="line"><span class="addition">+          &#123; loader: 'style-loader' &#125;,</span></span><br><span class="line"><span class="addition">+          &#123;</span></span><br><span class="line"><span class="addition">+            loader: 'css-loader',</span></span><br><span class="line"><span class="addition">+            options: &#123; sourceMap: true &#125;</span></span><br><span class="line"><span class="addition">+          &#125;,</span></span><br><span class="line"><span class="addition">+          &#123;</span></span><br><span class="line"><span class="addition">+            loader: 'sass-loader'</span></span><br><span class="line"><span class="addition">+          &#125;</span></span><br><span class="line"><span class="addition">+        ]</span></span><br><span class="line"><span class="addition">+      &#125;,</span></span><br><span class="line"><span class="addition">+      &#123;</span></span><br><span class="line"><span class="addition">+        test: /\.tsx?$/,</span></span><br><span class="line"><span class="addition">+        use: [</span></span><br><span class="line"><span class="addition">+          &#123;</span></span><br><span class="line"><span class="addition">+            loader: 'babel-loader'</span></span><br><span class="line"><span class="addition">+          &#125;,</span></span><br><span class="line"><span class="addition">+          &#123;</span></span><br><span class="line"><span class="addition">+            loader: 'ts-loader',</span></span><br><span class="line"><span class="addition">+            options: &#123;</span></span><br><span class="line"><span class="addition">+              transpileOnly: true</span></span><br><span class="line"><span class="addition">+            &#125;</span></span><br><span class="line"><span class="addition">+          &#125;</span></span><br><span class="line"><span class="addition">+        ],</span></span><br><span class="line"><span class="addition">+        exclude: /node_modules/</span></span><br><span class="line"><span class="addition">+      &#125;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [new VueLoaderPlugin()]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>adminUI</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>adminUI</tag>
      </tags>
  </entry>
  <entry>
    <title>从零搭建Vue UI组件库(二)</title>
    <url>/blog/2021/04/15/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAVue%20UI%E7%BB%84%E4%BB%B6%E5%BA%93(%E4%BA%8C)/</url>
    <content><![CDATA[<p>上一篇结束，使用 webpack 搭建了一个本地服务，事实上还不算项目模板，这篇的目的是编写一个基础的 HelloWorld 组件</p>
<h2 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h2><p>在 <code>packages/hello</code>中新建<code>src</code>文件夹，存放 vue 源文件，新建 <code>index.js</code>用来暴露和挂载组件</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/index.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Hello, &#123;&#123; name &#125;&#125; !&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  import &#123; defineComponent &#125; from 'vue'</span></span><br><span class="line"><span class="regexp">  export default defineComponent(&#123;</span></span><br><span class="line"><span class="regexp">    name: 'Hello',</span></span><br><span class="line"><span class="regexp">    props: &#123;</span></span><br><span class="line"><span class="regexp">      name: &#123;</span></span><br><span class="line"><span class="regexp">        type: String,</span></span><br><span class="line"><span class="regexp">        default: 'admin UI'</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'./src/index.vue'</span></span><br><span class="line"><span class="comment">// 关于 vue 插件，不熟悉的可以去看一下 vue 官网</span></span><br><span class="line">Hello.install = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  app.component(Hello.name, Hello)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello</span><br></pre></td></tr></table></figure></div>
<p>然后在<code>website</code>文件中引用组件，查看效果</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;Hello :name=<span class="string">"name"</span>&gt;&lt;<span class="regexp">/Hello&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  import &#123; defineComponent, reactive, toRefs &#125; from 'vue'</span></span><br><span class="line"><span class="regexp">  import Hello from '../</span>packages/hello<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  export default defineComponent(&#123;</span></span><br><span class="line"><span class="string">    name: '</span>app<span class="string">',</span></span><br><span class="line"><span class="string">    components: &#123;</span></span><br><span class="line"><span class="string">      Hello</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    setup(props, ctx) &#123;</span></span><br><span class="line"><span class="string">      const state = reactive(&#123;</span></span><br><span class="line"><span class="string">        name: '</span>admin ui<span class="string">'</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      return &#123;</span></span><br><span class="line"><span class="string">        ...toRefs(state)</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>开发阶段，这样可以快速调试组件，确认组件功能完成后，就需要导出组件。可以预见到的是，以后会有很多个组件需要导出，因此需要一个统一的出口。参照 <code>element-plus</code>，把出口文件定义为<code>packages/admin-ui/index.js</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'../hello'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> components = [Hello]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  components.forEach(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</span><br><span class="line">    app.component(component.name, component)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  Hello,</span><br><span class="line">  install</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="打包配置"><a href="#打包配置" class="headerlink" title="打包配置"></a>打包配置</h2><p><code>build</code>文件夹中新增<code>webpack.config.build.js</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; VueLoaderPlugin &#125; = <span class="built_in">require</span>(<span class="string">'vue-loader'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'adminUI'</span>: <span class="string">'./packages/admin-ui/index.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'../lib'</span>), <span class="comment">// 出口目录</span></span><br><span class="line">    publicPath: <span class="string">'/lib/'</span>,</span><br><span class="line">    library: <span class="string">'adminUI'</span>, <span class="comment">// 包名</span></span><br><span class="line">    filename: <span class="string">'index.js'</span>, <span class="comment">// 文件名</span></span><br><span class="line">    libraryTarget: <span class="string">'umd'</span>,</span><br><span class="line">    umdNamedDefine: <span class="literal">true</span> <span class="comment">// 会对 UMD 的构建过程中的 AMD 模块进行命名。否则就使用匿名的 define</span></span><br><span class="line">  &#125;,</span><br><span class="line">  externals: &#123;</span><br><span class="line">    vue: &#123;</span><br><span class="line">      root: <span class="string">'Vue'</span>,</span><br><span class="line">      commonjs: <span class="string">'vue'</span>,</span><br><span class="line">      commonjs2: <span class="string">'vue'</span>,</span><br><span class="line">      amd: <span class="string">'vue'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        commons: &#123;</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          name: <span class="string">'vendor'</span>,</span><br><span class="line">          chunks: <span class="string">'all'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>package.json</code>新增打包命令<code>&quot;build&quot;: &quot;webpack --config build/webpack.config.build.js&quot;</code><br>使用<code>yarn build</code>,会在根目录生成<code>lib</code>文件夹，包含<code>index.js</code>文件，就是我们最后输出的文件</p>
<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>本地调用打包后的组件库，查看效果。修改<code>website</code>中的<code>index.js</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./index.vue'</span></span><br><span class="line"><span class="keyword">import</span> AdminUI <span class="keyword">from</span> <span class="string">'../lib'</span></span><br><span class="line"></span><br><span class="line">createApp(App).use(AdminUI).mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></div>
<p>删除<code>website/index.vue</code>中导入的组件</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;Hello :name=<span class="string">"name"</span>&gt;&lt;<span class="regexp">/Hello&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  import &#123; defineComponent, reactive, toRefs &#125; from 'vue'</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  export default defineComponent(&#123;</span></span><br><span class="line"><span class="regexp">    name: 'app',</span></span><br><span class="line"><span class="regexp">    setup(props, ctx) &#123;</span></span><br><span class="line"><span class="regexp">      const state = reactive(&#123;</span></span><br><span class="line"><span class="regexp">        name: 'admin ui'</span></span><br><span class="line"><span class="regexp">      &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      return &#123;</span></span><br><span class="line"><span class="regexp">        ...toRefs(state)</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></div>
<p>运行项目，会发现结果完全一致。说明组件打包是没有问题的，接下来只要把<code>lib</code>文件夹上传到 npm,就可以像<code>element-ui</code>一样使用啦！</p>
<h2 id="next"><a href="#next" class="headerlink" title="next"></a>next</h2><p>虽然很简陋，但想要的功能第一步已经实现了，接下来我先不打算上传 npm，我的计划有以下几个：</p>
<ul>
<li style="list-style: none"><input type="checkbox"> 增加 eslint/prettier/lint-staged,保证代码结构</li>
<li style="list-style: none"><input type="checkbox"> 添加 typescript，使用 ts 开发</li>
<li style="list-style: none"><input type="checkbox"> 结合 vuepress,使用 MD 作为文档和展示组件 demo</li>
</ul>
]]></content>
      <categories>
        <category>adminUI</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>adminUI</tag>
      </tags>
  </entry>
  <entry>
    <title>从零搭建Vue UI组件库(一)</title>
    <url>/blog/2021/04/15/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAVue%20UI%E7%BB%84%E4%BB%B6%E5%BA%93(%E4%B8%80)/</url>
    <content><![CDATA[<p>Vue3 发布以来,一直在学习, 最近萌生出想要尝试自己搭建组件库的想法,正赶上开发任务不重,就在此尝试一下,一来提升一下能力,二来看能不能搭建成功。</p>
<p><a href="https://github.com/lost-dream/zcm-admin-ui" target="_blank" rel="noopener">附上仓库地址</a></p>
<blockquote>
<p>我的开发是从零搭建，但主要思路和结构参考了<a href="https://github.com/element-plus/element-plus" target="_blank" rel="noopener">element-plus</a>,感谢饿了么团队提供的思路</p>
</blockquote>
<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>因为是从零开始搭建，就不用 vue-cli 了，创建空文件夹开始</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir admin-ui</span><br><span class="line">cd admin-ui &amp;&amp; npm init -y</span><br></pre></td></tr></table></figure></div>
<p>参照<code>element-plus</code>，项目使用<a href="https://github.com/lerna/lerna" target="_blank" rel="noopener">lerna</a>初始化，它优化了使用 git 和 npm 管理多包存储库的工作流，有兴趣可以研究一下</p>
<blockquote>
<p>我也是刚刚接触这个框架，有写错的地方欢迎纠错</p>
</blockquote>
<ul>
<li><p>创建<code>lerna</code>项目</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">npm install lerna -g</span><br><span class="line">cd admin-ui</span><br><span class="line">lerna init # 使用默认的固定模式</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Add packages</span><br><span class="line">cd packages</span><br><span class="line">mkdir hello button admin-ui input</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>分别进入目录初始化成包</span><br><span class="line">cd hello</span><br><span class="line">npm init -y</span><br><span class="line">cd ../button</span><br><span class="line">npm init -y</span><br><span class="line">cd ../admin-ui</span><br><span class="line">npm init -y</span><br><span class="line">cd ../input</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改项目配置</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> package.json 文件加入</span><br><span class="line">"private": true,</span><br><span class="line">"workspaces": [</span><br><span class="line">  "packages/*"</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> lerna.json 文件加入</span><br><span class="line">"useWorkspaces": true,</span><br><span class="line">"npmClient": "yarn" # 默认使用 yarn 作为包管理工具</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p>这样一个lerna脚手架就创建完成了，更多的命令脚本可以自己去看文档（主要是我现在也不会）。</p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>上面已经定义好了默认使用 yarn 作为包管理工具，所以首先要保证全局有 yarn，然后执行<code>yarn add package -W</code>就可以了，这里有几点需要注意：</p>
<ul>
<li><code>yarn</code>没有必要作为项目依赖写入，因为我更希望你把它装在全局</li>
<li>因为上面定义过<code>workspace</code>的原因，直接使用<code>yarn add package</code>会报错，需要在后面加上<code>-W</code></li>
<li>项目本身定义为 UI 框架，因此<code>vue</code>相关的依赖也不需要加入到<code>dependencies</code>中，事实上绝大部分依赖都应该是开发依赖。</li>
</ul>
<p>本着上面的原则，一个基本的 vue 项目应该包含以下依赖：<br><code>vue、webpack、webpack-cli、webpack-dev-server、@babel/core、babel-loader、css-loader、html-webpack-plugin、vue-loader、vue-template-compile</code></p>
<blockquote>
<p>因为 webpack5 更新之后没有仔细研究过，加上 element-ui 也使用 webpack4，因此本项目使用的是 webpack4、webpack-cli3</p>
</blockquote>
<h2 id="创建项目模板"><a href="#创建项目模板" class="headerlink" title="创建项目模板"></a>创建项目模板</h2><p>安装好依赖，需要添加 vue 模板，参照 element-plus,在更目录新建<code>website</code>文件夹，加入<code>index.html、index.js、index.vue</code></p>
<ul>
<li><p>index.html</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>dt-ui<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>index.js</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./index.vue'</span></span><br><span class="line"></span><br><span class="line">createApp(App).mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>index.vue</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"app"</span>&gt;</span><br><span class="line">    hello,admin ui</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  name: <span class="string">'app'</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h2 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h2><p>根目录新建<code>build</code>文件夹，新增<code>webpack.config.base.js</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; VueLoaderPlugin &#125; = <span class="built_in">require</span>(<span class="string">'vue-loader'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: path.resolve(__dirname, <span class="string">'../website/index.js'</span>),</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">    filename: <span class="string">'index.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./website/index.html'</span>,</span><br><span class="line">      filename: <span class="string">'./index.html'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>package.json</code>添加命令 <code>&quot;dev&quot;: &quot;webpack-dev-server --config build/webpack.config.base.js&quot;</code>,运行<code>yarn dev</code>就可以在 8080 端口运行服务了</p>
<blockquote>
<p>如果这时没有运行成功，多半是报错，缺少其他的开发依赖。上面列举的是我知道的必须的 vue 项目依赖，并不完整。可以根据报错，缺什么，安装什么，最后一定没有问题。</p>
</blockquote>
<p>最后，补上当前的项目目录</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">├── build</span><br><span class="line">│   └── webpack.config.base.js</span><br><span class="line">├── lerna.json</span><br><span class="line">├── package.json</span><br><span class="line">├── packages</span><br><span class="line">│   ├── admin-ui</span><br><span class="line">│   │   └── package.json</span><br><span class="line">│   ├── button</span><br><span class="line">│   │   └── package.json</span><br><span class="line">│   ├── hello</span><br><span class="line">│   │   └── package.json</span><br><span class="line">│   └── input</span><br><span class="line">│       └── package.json</span><br><span class="line">├── website</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   └── index.vue</span><br><span class="line">├── yarn-error.log</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>adminUI</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>adminUI</tag>
      </tags>
  </entry>
  <entry>
    <title>监听vuex中state变化</title>
    <url>/blog/2021/03/09/%E7%9B%91%E5%90%ACvuex%E4%B8%ADstate%E5%8F%98%E5%8C%96/</url>
    <content><![CDATA[<p>书说简短,直接开整.需求是这样的: 点击变更联系人按钮,跳转到选人列表,点击人员,回到前一页,触发更换联系人功能.</p>
<ul>
<li>点击更改按钮<br><img src="/blog/img/vuex-state-1.png" alt="点击按钮"></li>
<li>选择具体成员<br><img src="/blog/img/vuex-state-2.png" alt="选择人员"></li>
<li>触发更改操作<br><img src="/blog/img/vuex-state-3.png" alt=" 执行操作"></li>
</ul>
<p>因为涉及到路由跳转,所以我的实现方法是,第二步中选择的人员信息保存在了 vuex 里,因此整个过程遇到的难点如下:</p>
<ul>
<li>vuex 中 state 的值怎么监听到变化?</li>
</ul>
<p>vuex 中的数据监听有两种方式,一种可以放在 <code>watch</code>中直接监听</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    watch: &#123;</span><br><span class="line">      <span class="string">'$store.state.user'</span>(val) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(val)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>但在本业务中,比较新旧联系人是否是同一个,以及文案的拼接,都逻辑依赖接口返回的数据信息,单号<code>PC20210308002</code>和原有联系人<code>admin1</code>是需要等接口返回值的,这样的话就不能写在 <code>watch</code>里,所以使用了第二种方法:<a href="https://vuex.vuejs.org/zh/api/#watch" target="_blank" rel="noopener">使用 vuex 自带的 watch 功能</a></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">TEST_API().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 返回需要的信息 res...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.$store.watch(</span><br><span class="line">    state =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> state.user</span><br><span class="line">    &#125;,</span><br><span class="line">    value =&gt; &#123;</span><br><span class="line">      <span class="comment">// 变化的值 value</span></span><br><span class="line">      <span class="comment">// do something..</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 类似 vue 的 watch 参数,如果有需要的话</span></span><br><span class="line">      deep: <span class="literal">true</span>,</span><br><span class="line">      immediate: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p>这样可以保证触发的逻辑是在数据渲染后,但是任然存在问题: <strong>watch方法会随着路由的 history 多次触发,现象类似于 EventBus 的触发</strong>. 其实文档有提到, 该<code>watch</code>方法会返回一个 function,调用此方法即可停止监听,所以只要再稍加修改:</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  TEST_API().then(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">this</span>.eventHub = <span class="keyword">this</span>.$store(<span class="comment">/* ... */</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">  <span class="keyword">this</span>.eventHub()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>其实还是 eventBus 的思想啦…</p>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Vuex</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex4 + typescript 配置</title>
    <url>/blog/2021/01/26/vuex4/</url>
    <content><![CDATA[<p>说起来惭愧,vue3快正式发布了,我才开始研究语法,好在除了书写习惯需要改变之外,vue 本身的变动并不是很大,但是配合 typescript 之后就不一样了,这篇说一下我的vue3 配置 – vuex 篇</p>
<blockquote>
<p>参照 <a href="https://next.vuex.vuejs.org/guide/typescript-support.html" target="_blank" rel="noopener">vuex 官方文档</a></p>
</blockquote>
<h2 id="创建文件结构"><a href="#创建文件结构" class="headerlink" title="创建文件结构"></a>创建文件结构</h2><p>基本结构并没有太大变化,仍然是<code>store</code>文件夹,但有两点需要注意:</p>
<ul>
<li>原本的 js 文件,现在全变成 ts 文件</li>
<li>因为是 ts 文件,对应的 module 下都创建<code>interface.ts</code>,标识该模块的类型</li>
</ul>
<p>结构大致如下:</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">── store</span><br><span class="line">   ├── index.ts <span class="comment">// 顶层state</span></span><br><span class="line">   ├── interface.ts <span class="comment">// 顶层 state 类型</span></span><br><span class="line">   └── modules</span><br><span class="line">       └── test</span><br><span class="line">           ├── index.ts <span class="comment">// test模块 state</span></span><br><span class="line">           └── interface.ts <span class="comment">// test模块 state 类型</span></span><br><span class="line">       └── user</span><br><span class="line">           ├── index.ts <span class="comment">//uer 模块</span></span><br><span class="line">           └── interface.ts <span class="comment">// user模块 state 类型</span></span><br></pre></td></tr></table></figure></div>
<h2 id="配置顶层-state"><a href="#配置顶层-state" class="headerlink" title="配置顶层 state"></a>配置顶层 state</h2><ul>
<li>定义顶层 state 的数据类型, 假设有全局 state,需要定义</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">TYPESCRIPT</span></header><figure class="iseeu highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/interface.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">interface</span> RootState &#123;</span><br><span class="line">  test: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>在<code>store/index.ts</code>中,调用 state 定义,晗需要生成一个唯一的 key,保证 store 实例注册时唯一</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">TYPESCRIPT</span></header><figure class="iseeu highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; InjectionKey &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, Store &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> RootState <span class="keyword">from</span> <span class="string">'./interface'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore&lt;RootState&gt;(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    test: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;&#125;,</span><br><span class="line">  mutations: &#123;&#125;,</span><br><span class="line">  actions: &#123;&#125;,</span><br><span class="line">  modules: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> key: InjectionKey&lt;Store&lt;RootState&gt;&gt; = Symbol(<span class="string">'vue-store'</span>)</span><br></pre></td></tr></table></figure></div>
<ul>
<li>生成的 key 在<code>main.ts</code>注册时作为第二个参数引入</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">TYPESCRIPT</span></header><figure class="iseeu highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store, &#123; key &#125; <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">  .use(store, key)</span><br><span class="line">  .use(router)</span><br><span class="line">  .mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></div>
<ul>
<li>将 key 添加在<code>store/index.ts</code>中统一导出,使用的时候就可以直接调用</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">TYPESCRIPT</span></header><figure class="iseeu highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改 index.ts 为以下</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, Store, useStore <span class="keyword">as</span> baseUseStore &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore&lt;RootState&gt;(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    test: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;&#125;,</span><br><span class="line">  mutations: &#123;&#125;,</span><br><span class="line">  actions: &#123;&#125;,</span><br><span class="line">  modules: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> key: InjectionKey&lt;Store&lt;RootState&gt;&gt; = Symbol(<span class="string">'vue-store'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useStore</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> baseUseStore(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这样, vue组件中可以通过<code>Composition API</code>调用</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">'@/store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore()</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<p>到这里,定义在顶层的各种数据和方法,都可以不需要定义类型直接使用了,<strong>但是定义在子模块(modules)的部分还不行,需要继续配置</strong></p>
<h2 id="定义子模块-modules"><a href="#定义子模块-modules" class="headerlink" title="定义子模块(modules)"></a>定义子模块(modules)</h2><ul>
<li>还是定义 state,以 user 模块举例,类型定义在<code>store/modules/user/interface/ts</code>,有两个字段:name, age</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">TYPESCRIPT</span></header><figure class="iseeu highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/modules/user/interface.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">interface</span> UserState &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>引入对应模块的数据类型,按照官网教程提示,子模块使用泛型定义类型,第一个泛型参数是当前子模块类型,第二个参数是顶层模块类型,定义之后会在所有使用 state 的地方自动断言,不需要重复定义</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">TYPESCRIPT</span></header><figure class="iseeu highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/modules/user/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> RootState <span class="keyword">from</span> <span class="string">'@/store/interface'</span></span><br><span class="line"><span class="keyword">import</span> UserState <span class="keyword">from</span> <span class="string">'./interface'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userModule: Module&lt;UserState, RootState&gt; = &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    name: <span class="string">'xxx'</span>,</span><br><span class="line">    age: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    AGE_ADD: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      state.age++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> userModule</span><br></pre></td></tr></table></figure></div>
<ul>
<li>然后在<code>store/interface.ts</code>中增加一个全量的 state 类型,之后的 state 类型使用全量的类型即可,后续如果继续新增模块,也要更新到全量类型中来</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">TYPESCRIPT</span></header><figure class="iseeu highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/interface.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> userState <span class="keyword">from</span> <span class="string">'./modules/user/interface'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">interface</span> RootState &#123;</span><br><span class="line">  test: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后集合成所有模块的 state 类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> AllState <span class="keyword">extends</span> RootState &#123;</span><br><span class="line">  user: userState</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>最后把全局的 state 注入到全局的 vuex 中,原理等同于定义子模块的类型,使用泛型定义全局 state</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store/index.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; InjectionKey &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, Store, useStore <span class="keyword">as</span> baseUseStore &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> RootState <span class="keyword">from</span> <span class="string">'./interface'</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">'./modules/user'</span></span><br><span class="line"><span class="keyword">import</span> &#123; AllState &#125; <span class="keyword">from</span> <span class="string">'./interface'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore&lt;RootState&gt;(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    test: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;&#125;,</span><br><span class="line">  mutations: &#123;&#125;,</span><br><span class="line">  actions: &#123;&#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">    user</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> key: InjectionKey&lt;Store&lt;RootState&gt;&gt; = <span class="built_in">Symbol</span>(<span class="string">'vue-store'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型定义所有子模块的 state</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useStore</span>&lt;<span class="title">T</span> = <span class="title">AllState</span>&gt;(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> baseUseStore&lt;T&gt;(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后,在vue 模块中就可以像以前一样轻松地的使用了</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;addAge&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &#123;&#123; age &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent, computed &#125; from &apos;vue&apos;</span><br><span class="line">import &#123; useStore &#125; from &apos;@/store&apos;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &apos;HelloWorld&apos;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const store = useStore()</span><br><span class="line">    const age = computed(() =&gt; store.state.user.age)</span><br><span class="line">    const addAge = () =&gt; &#123;</span><br><span class="line">      store.commit(&apos;user/AGE_ADD&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      age,</span><br><span class="line">      addAge</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>state类型定义单独放在一个文件中方便管理</li>
<li>各个子模块的类型定义单独放在子模块的文件夹中处理, 最后再集成在根节点上</li>
<li>使用 vuex 命名空间, 规范模块</li>
</ul>
]]></content>
      <categories>
        <category>vue</category>
        <category>vue3</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>试图详解Array.reduce</title>
    <url>/blog/2020/01/15/%E8%AF%95%E5%9B%BE%E8%AF%A6%E8%A7%A3Array.reduce/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>众所周知，reduce 方法是 js 数组中比较高级的用法之一。使用他可以更方便的对数组进行操作。<br>首先来看看 reduce 的官方解释</p>
<blockquote>
<p>reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</p>
</blockquote>
<p>这个解释比较晦涩，但却很精确，在这里你可能依然不懂他要表达什么，但我依然把它写在了开头，希望看完整篇文章后，回头再看这个解释，你能读懂它的意义。</p>
<h2 id="语法详解"><a href="#语法详解" class="headerlink" title="语法详解"></a>语法详解</h2><p>同样的，我们首先引用官方文档</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  callback: 执行数组中每个值 (如果没有提供 initialValue则第一个值除外)的函数，包含四个参数</span></span><br><span class="line"><span class="comment">    accumulator: 累计器累计回调的返回值; 它是上一次调用回调时返回的累积值</span></span><br><span class="line"><span class="comment">    currentValue: 数组中正在处理的元素</span></span><br><span class="line"><span class="comment">    index: 数组中正在处理的当前元素的索引(可选)。 如果提供了initialValue，则起始索引号为0，否则从索引1起始。</span></span><br><span class="line"><span class="comment">    array: 调用reduce()的数组（可选）</span></span><br><span class="line"><span class="comment">  initialValue: 可选。作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>
<p>对应上面的定义，抛去可选参数，一个简单地使用方式就是这样的</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">sum, current</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum + current</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">arr.reduce(<span class="function">(<span class="params">sum, current</span>) =&gt;</span> sum + current)</span><br><span class="line"><span class="comment">// output 10</span></span><br></pre></td></tr></table></figure></div>
<p>上面例子的结果会返回十。我们来看看发生了什么。reduce 函数会将整个操作分步骤来执行。你可以理解为 for 循环。他会把每一个步骤拆解开来去运算，把每一步的结果 return，作为下一步操作的初始值。上面例子在第一步操作时，首先返回了<code>arr</code>中的第一个值（你可以理解为 for 循环的第一步），也就是1。之后，函数将第一步 return 的值累计到初始值中，作为下一步操作的初始值，这是，<code>sum</code>的值已经变成了 1，而 current 的值也变成了循环中的下一个，也就是 2。在这一步骤中，函数执行了加法处理，返回了<code>1 + 2</code>，这个值又变成了下一个步骤中的 sum，而 current 也变成了 arr[3]，之后又会执行上述的操作。没错，说了这么多，上面的例子只是 <code>1+2+3+4</code>而已。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// step1: sum = 0, current = 1</span></span><br><span class="line"><span class="keyword">return</span> sum + current  <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// step2: sum = 1, current = 2</span></span><br><span class="line"><span class="keyword">return</span> sum + current <span class="comment">// 1 + 2</span></span><br><span class="line"><span class="comment">// step3: sum = 1 + 2, current = 3</span></span><br><span class="line"><span class="keyword">return</span> sum + current <span class="comment">// 1 + 2 + 3</span></span><br><span class="line"><span class="comment">// step4: sum = 1 + 2 + 3, current = 4</span></span><br><span class="line"><span class="keyword">return</span> sum + current <span class="comment">// 1 + 2 + 3 + 4</span></span><br></pre></td></tr></table></figure></div>
<p>就是这样。<br>而<code>initialValue</code>则表示运算的初始值。假如上面的例子加上一个初始值</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.reduce(<span class="function">(<span class="params">sum, current</span>) =&gt;</span> sum + current, <span class="number">10</span>)</span><br><span class="line"><span class="comment">//output 10+1+2+3+4 = 20</span></span><br></pre></td></tr></table></figure></div>
<p>这就是初始值的用法。reduce 的用法其实就已经说完了。你可以滑到最开始定义的地方，重新去看一下定义，是不是有点理解了？</p>
<h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><p>reduce 当然不止可以处理加法运算，事实上任何数组相关的操作都可以用 reduce 来解决。面对更加复杂的场景，有两点点是新手容易理解错误的：一是 reduce 函数必须要有返回值，二是<strong>accumulator的值是上一次的初始值，currentValue才是被迭代数组的每一项</strong>。<br>新手常会和 js 中循环的概念混淆。这里回调函数中的两个参数并不是都是操作的数组中的值。这也是后续在复杂场景中使用 reduce 唯一需要注意的地方，再举一个例子</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设有一张人员表，你需要把所有女性保存出来（sex: 0 =&gt; 女; 1 =&gt; 男）</span></span><br><span class="line"><span class="keyword">const</span> person = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'张三'</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'李四'</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'王五'</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'赵六'</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'马七'</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;</span><br><span class="line">]</span><br><span class="line">person.reduce(<span class="function">(<span class="params">res, current</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (current.sex === <span class="number">0</span>) &#123;</span><br><span class="line">    res.push(current.name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;, [])</span><br><span class="line"><span class="comment">// output ['张三', '王五', '赵六']</span></span><br></pre></td></tr></table></figure></div>
<p>上面例子中，需要注意的是，回调函数中的<code>current</code>指的是<code>person</code>中被迭代的每一项，而 <code>res</code>指的是被赋予的初始值<code>[]</code>，这样你能理解了吗？</p>
<h2 id="几个例子，加固理解"><a href="#几个例子，加固理解" class="headerlink" title="几个例子，加固理解"></a>几个例子，加固理解</h2><p>正如我上面所说，reduce的用法异常广泛，几乎任何场景都可以使用。所以我没有办法对应应用场景作解释，只能附加几个比较复杂的场景供你参考和巩固，希望对你有些许帮助。</p>
<h3 id="还是上面人名的例子，比如现在有一张单独的成绩单，我们需要将两个数组整合为一个数组"><a href="#还是上面人名的例子，比如现在有一张单独的成绩单，我们需要将两个数组整合为一个数组" class="headerlink" title="还是上面人名的例子，比如现在有一张单独的成绩单，我们需要将两个数组整合为一个数组"></a>还是上面人名的例子，比如现在有一张单独的成绩单，我们需要将两个数组整合为一个数组</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'aa'</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'bb'</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'cc'</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'dd'</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'ee'</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'ff'</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> score = &#123;</span><br><span class="line">  aa: <span class="number">60</span>,</span><br><span class="line">  bb: <span class="number">70</span>,</span><br><span class="line">  cc: <span class="number">80</span>,</span><br><span class="line">  dd: <span class="number">90</span>,</span><br><span class="line">  ee: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.reduce(<span class="function">(<span class="params">res, current</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> key = current.name</span><br><span class="line">  <span class="keyword">if</span> (score[key]) &#123;</span><br><span class="line">    <span class="comment">// 如果 score 中有对应人名的分数，添加到 score 字段上，否则 score = 0</span></span><br><span class="line">    current.score = score[key]</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    current.score = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  res.push(current)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;, [])</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">[</span><br><span class="line">  &#123;<span class="string">"name"</span>:<span class="string">"aa"</span>,<span class="string">"sex"</span>:<span class="number">0</span>,<span class="string">"score"</span>:<span class="number">60</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"name"</span>:<span class="string">"bb"</span>,<span class="string">"sex"</span>:<span class="number">1</span>,<span class="string">"score"</span>:<span class="number">70</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"name"</span>:<span class="string">"cc"</span>,<span class="string">"sex"</span>:<span class="number">0</span>,<span class="string">"score"</span>:<span class="number">80</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"name"</span>:<span class="string">"dd"</span>,<span class="string">"sex"</span>:<span class="number">0</span>,<span class="string">"score"</span>:<span class="number">90</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"name"</span>:<span class="string">"ee"</span>,<span class="string">"sex"</span>:<span class="number">1</span>,<span class="string">"score"</span>:<span class="number">100</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"name"</span>:<span class="string">"ff"</span>,<span class="string">"sex"</span>:<span class="number">0</span>,<span class="string">"score"</span>:<span class="number">0</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>
<h3 id="使用-reduce-实现-groupBy方法"><a href="#使用-reduce-实现-groupBy方法" class="headerlink" title="使用 reduce 实现 groupBy方法"></a>使用 reduce 实现 groupBy方法</h3><p>lodash 有一个方法叫做 groupBy</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">6.1</span>, <span class="number">4.2</span>, <span class="number">6.3</span>];</span><br><span class="line">_.groupBy(numbers, <span class="built_in">Math</span>.floor);</span><br><span class="line"><span class="comment">// 返回 &#123;'4': [4.2], '6': [6.1, 6.3]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> words = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>];</span><br><span class="line"></span><br><span class="line">_.groupBy(words, <span class="string">'length'</span>);</span><br><span class="line"><span class="comment">// 返回 &#123;'3': ['one', 'two'], '5': ['three']&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>使用 reduce 实现同样的效果</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">groupBy</span> (<span class="params">arr, criteria</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">obj, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 判断criteria是函数还是属性名</span></span><br><span class="line">    <span class="keyword">var</span> key = <span class="keyword">typeof</span> criteria === <span class="string">'function'</span> ? criteria(item) : item[criteria]</span><br><span class="line">    <span class="comment">// 如果属性不存在，则创建一个</span></span><br><span class="line">    <span class="keyword">if</span> (!obj.hasOwnProperty(key)) &#123;</span><br><span class="line">      obj[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将元素加入数组</span></span><br><span class="line">    obj[key].push(item)</span><br><span class="line">    <span class="comment">// 返回这个对象</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode配置</title>
    <url>/blog/2019/12/12/vscode%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>开门见山地说，我最近换Mac电脑了。那么我之前一直在用的是<a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">WebStorm</a>，但这个IDE是要花钱的，在windows可以有很多种方法免费去用它，但苹果电脑就不好使了，所以现在用<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">new</a>作为主要开发工具。</p>
<p>目前看来，vscode在使用上比WebStorm要方便，也更轻巧，各种插件的扩展也极大地增强了工具的能力。但我个人还是更喜欢WebStorm的git工具。总感觉vscode在git的提交和管理不如WebStorm功能那么全面和强大，但除去这一点，vscode相比于WebStorm基本没有其他弱势的地方。</p>
<h2 id="插件篇"><a href="#插件篇" class="headerlink" title="插件篇"></a>插件篇</h2><p>说到vscode,不得不提的就是插件,如果没有了插件,vscode也只不过是长得好看的notepad++。前端开发常用的插件在网上都可以找到，我这里列出一些我安装过好用但不常见的插件，另外文章最后我再列出我安装过的所有插件供参考。</p>
<h3 id="不太常用的插件"><a href="#不太常用的插件" class="headerlink" title="不太常用的插件"></a>不太常用的插件</h3><table>
<thead>
<tr>
<th style="text-align:center">插件名</th>
<th style="text-align:center">下载量</th>
<th style="text-align:center">插件介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Better Comments</td>
<td style="text-align:center">53 万</td>
<td style="text-align:center">可以自定义自己的注释</td>
</tr>
<tr>
<td style="text-align:center">DotENV</td>
<td style="text-align:center">68 万</td>
<td style="text-align:center">支持<code>.env</code>格式文件</td>
</tr>
<tr>
<td style="text-align:center">Custom CSS and JS Loader</td>
<td style="text-align:center">17 万</td>
<td style="text-align:center">可以自定义vscode的样式</td>
</tr>
<tr>
<td style="text-align:center">EditorConfig for VS Code</td>
<td style="text-align:center">162 万</td>
<td style="text-align:center">高亮并使用.editorconfig文件设置编辑器编码风格</td>
</tr>
<tr>
<td style="text-align:center">Hungry Delete</td>
<td style="text-align:center">1 万</td>
<td style="text-align:center">快速删除多余的空格和空白行</td>
</tr>
<tr>
<td style="text-align:center">Open In Default Browser</td>
<td style="text-align:center">27 万</td>
<td style="text-align:center">使用默认编辑器打开指定网页</td>
</tr>
<tr>
<td style="text-align:center">Output Colorizer</td>
<td style="text-align:center">19万</td>
<td style="text-align:center">更漂亮的terminal</td>
</tr>
<tr>
<td style="text-align:center">Power Mode</td>
<td style="text-align:center">14 万</td>
<td style="text-align:center">能让你打字的时候很有打击感</td>
</tr>
<tr>
<td style="text-align:center">SynthWave’84</td>
<td style="text-align:center">11 万</td>
<td style="text-align:center">一款带有发光效果的字体主题</td>
</tr>
<tr>
<td style="text-align:center">Vibrancy</td>
<td style="text-align:center">7 千</td>
<td style="text-align:center">编辑器毛玻璃效果</td>
</tr>
<tr>
<td style="text-align:center">vscode-element-helper</td>
<td style="text-align:center">4 万</td>
<td style="text-align:center">在vscode中就可以查看<code>element-ui</code>文档</td>
</tr>
<tr>
<td style="text-align:center">epub reader</td>
<td style="text-align:center">8 千</td>
<td style="text-align:center">在vscode里看小说的摸鱼神器</td>
</tr>
</tbody>
</table>
<p>所有插件都可以修改，修改的方式有两种，你可以打开设置在设置中对可以修改的参数做简单的修改，但更个性化的设置需要修改系统的<code>setting.json</code>,你可以使用<code>cmd + shift + p</code>输入<code>open setting</code>打开<code>setting.json</code>，所有的插件参数都可以在这里进行详细的修改</p>
<h3 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的vscode配置</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JSON</span></header><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Atom One Dark Theme"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.1.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Auto Close Tag"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.5.6"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Auto Import"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.5.3"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Auto Rename Tag"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.1.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"background"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.1.23"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Beautify css/sass/scss/less"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.3.3"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Better Comments"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Bookmarks"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"10.6.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Bracket Pair Colorizer"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.61"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Chinese(simplified) Language Pack for Visual Studio Code"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.40.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Code Spell Checker"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.7.20"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Color Highlight"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.3.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Color Picker"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.4.5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Custom Css and JS Loader"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"3.9.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Debugger for Chrome"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"4.12.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Document This"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.7.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"DntENV"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"EditorConfig for VS Code"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.14.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"epub reader"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.1.6"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"ESLint"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.9.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Git History"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.4.9"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"GitLens — Git supercharged"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"10.2.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Highlight Matching Tag"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.9.6"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"HTML CSS Support"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.3"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Hungry Delete"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.6.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Import Cost"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.12.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"indent-rainbow"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"7.4.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"language-stylus"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.11.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Markdown Preview Enhanced"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.5.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"markdownlint"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.32.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Material Icon Theme"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"3.9.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Material Theme"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"30.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"npm"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.3.9"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"npm Intellisense"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.3.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"One Dark Pro"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"3.2.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Open In Default Browser"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.1.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Output Colorizer"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.1.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Path Intellisense"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.4.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Power Mode"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.2.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Prettier - Code formatter"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"3.11.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Project Manager"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"10.9.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Sass Lint"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.6"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Scss Intellisense"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.8.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Setting Sync"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"3.4.3"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"SVG Viewer"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"SynthWave'84"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.0.7"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"TODO Highlight"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.4"</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Trailing Spaces"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.3.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"vetur"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.22.6"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Vibrancy"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.7"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"vscode-element-helper"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.5.6"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"vscode-icons"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"9.6.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Vue 2 Snippets"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.1.11"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>
<h3 id="我的setting-json"><a href="#我的setting-json" class="headerlink" title="我的setting.json"></a>我的<code>setting.json</code></h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JSON</span></header><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"workbench.startupEditor"</span>: <span class="string">"newUntitledFile"</span>,</span><br><span class="line">    <span class="attr">"workbench.iconTheme"</span>: <span class="string">"material-icon-theme"</span>,</span><br><span class="line">    <span class="attr">"window.title"</span>:  <span class="string">"$&#123;dirty&#125;$&#123;activeEditorMedium&#125;$&#123;separator&#125;$&#123;rootName&#125;"</span>,</span><br><span class="line">    <span class="attr">"window.zoomLevel"</span>: <span class="number">0.62</span>,</span><br><span class="line">    <span class="attr">"terminal.integrated.rendererType"</span>: <span class="string">"dom"</span>,</span><br><span class="line">    <span class="attr">"emmet.syntaxProfiles"</span>: &#123;</span><br><span class="line">        <span class="attr">"javascript"</span>: <span class="string">"jsx"</span>,</span><br><span class="line">        <span class="attr">"vue"</span>: <span class="string">"html"</span>,</span><br><span class="line">        <span class="attr">"vue-html"</span>: <span class="string">"html"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"editor.tabSize"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"editor.fontSize"</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">"editor.lineHeight"</span>: <span class="number">36</span>,</span><br><span class="line">    <span class="attr">"editor.wordWrap"</span>: <span class="string">"on"</span>,</span><br><span class="line">    <span class="attr">"editor.quickSuggestions"</span>: &#123;</span><br><span class="line">        <span class="attr">"strings"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"editor.multiCursorModifier"</span>: <span class="string">"ctrlCmd"</span>,</span><br><span class="line">    <span class="attr">"editor.formatOnPaste"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"editor.fontFamily"</span>: <span class="string">"FiraCode-Retina"</span>,</span><br><span class="line">    <span class="attr">"editor.fontLigatures"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"prettier.singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"prettier.semi"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"vscode_custom_css.imports"</span>: [</span><br><span class="line">        <span class="string">"file:///Applications/Visual%20Studio%20Code.app/Contents/Resources/theme/synthwave84.css"</span>,</span><br><span class="line">        <span class="string">"file:///Applications/Visual%20Studio%20Code.app/Contents/Resources/theme/terminal.css"</span>,</span><br><span class="line">        <span class="string">"file:///Applications/Visual%20Studio%20Code.app/Contents/Resources/theme/toolbar.css"</span>,</span><br><span class="line">        <span class="string">"file:///Applications/Visual%20Studio%20Code.app/Contents/Resources/theme/custom.css"</span>,</span><br><span class="line">        <span class="string">"file:///Applications/Visual%20Studio%20Code.app/Contents/Resources/theme/enable-electron-vibrancy.js"</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"vscode_custom_css.policy"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"[vue]"</span>: &#123;</span><br><span class="line">        <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"git.confirmSync"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"files.exclude"</span>: &#123;</span><br><span class="line">        <span class="attr">"**/node_modules"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"files.autoSave"</span>: <span class="string">"afterDelay"</span>,</span><br><span class="line">    <span class="attr">"background.useDefault"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"background.useFront"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"background.customImages"</span>: [</span><br><span class="line">        <span class="string">"file:///Users/singledogno.1/Pictures/pap.er/20191127.jpg"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"[javascript]"</span>: &#123;</span><br><span class="line">        <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"powermode.enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"better-comments.highlightPlainText"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"better-comments.multilineComments"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"better-comments.tags"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"tag"</span>: <span class="string">"! "</span>,</span><br><span class="line">            <span class="attr">"color"</span>: <span class="string">"#FF2D00"</span>,</span><br><span class="line">            <span class="attr">"strikethrough"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"backgroundColor"</span>: <span class="string">"transparent"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"tag"</span>: <span class="string">"FIXME "</span>,</span><br><span class="line">            <span class="attr">"color"</span>: <span class="string">"#3498DB"</span>,</span><br><span class="line">            <span class="attr">"strikethrough"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"backgroundColor"</span>: <span class="string">"transparent"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"tag"</span>: <span class="string">"fixme "</span>,</span><br><span class="line">            <span class="attr">"color"</span>: <span class="string">"#3498DB"</span>,</span><br><span class="line">            <span class="attr">"strikethrough"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"backgroundColor"</span>: <span class="string">"transparent"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"tag"</span>: <span class="string">"TODO "</span>,</span><br><span class="line">            <span class="attr">"color"</span>: <span class="string">"#FF8C00"</span>,</span><br><span class="line">            <span class="attr">"strikethrough"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"backgroundColor"</span>: <span class="string">"transparent"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"tag"</span>: <span class="string">"todo "</span>,</span><br><span class="line">            <span class="attr">"color"</span>: <span class="string">"#FF8C00"</span>,</span><br><span class="line">            <span class="attr">"strikethrough"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"backgroundColor"</span>: <span class="string">"transparent"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"tag"</span>: <span class="string">" "</span>,</span><br><span class="line">            <span class="attr">"color"</span>: <span class="string">"#98C379"</span>,</span><br><span class="line">            <span class="attr">"strikethrough"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"backgroundColor"</span>: <span class="string">"transparent"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"sync.gist"</span>: <span class="string">"944068a1850790116dd60d21167b4af10b30b0c9"</span>,</span><br><span class="line">    <span class="attr">"files.autoSaveDelay"</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="attr">"cSpell.allowedSchemas"</span>: [</span><br><span class="line">        <span class="string">"file"</span>,</span><br><span class="line">        <span class="string">"untitled"</span>,</span><br><span class="line">        <span class="string">"**/*.vue"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"[html]"</span>: &#123;</span><br><span class="line">        <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"vscode.html-language-features"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"docthis.includeDateTag"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"docthis.includeDescriptionTag"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"docthis.includeAuthorTag"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"vscode_vibrancy.opacity"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"vscode_vibrancy.type"</span>: <span class="string">"selection"</span>,</span><br><span class="line">    <span class="attr">"vscode_vibrancy.theme"</span>: <span class="string">"Default Dark"</span>,</span><br><span class="line">    <span class="attr">"cSpell.enabledLanguageIds"</span>: [</span><br><span class="line">        <span class="string">"asciidoc"</span>,</span><br><span class="line">        <span class="string">"c"</span>,</span><br><span class="line">        <span class="string">"cpp"</span>,</span><br><span class="line">        <span class="string">"csharp"</span>,</span><br><span class="line">        <span class="string">"css"</span>,</span><br><span class="line">        <span class="string">"git-commit"</span>,</span><br><span class="line">        <span class="string">"go"</span>,</span><br><span class="line">        <span class="string">"handlebars"</span>,</span><br><span class="line">        <span class="string">"haskell"</span>,</span><br><span class="line">        <span class="string">"html"</span>,</span><br><span class="line">        <span class="string">"jade"</span>,</span><br><span class="line">        <span class="string">"java"</span>,</span><br><span class="line">        <span class="string">"javascript"</span>,</span><br><span class="line">        <span class="string">"javascriptreact"</span>,</span><br><span class="line">        <span class="string">"json"</span>,</span><br><span class="line">        <span class="string">"jsonc"</span>,</span><br><span class="line">        <span class="string">"latex"</span>,</span><br><span class="line">        <span class="string">"less"</span>,</span><br><span class="line">        <span class="string">"markdown"</span>,</span><br><span class="line">        <span class="string">"php"</span>,</span><br><span class="line">        <span class="string">"plaintext"</span>,</span><br><span class="line">        <span class="string">"pug"</span>,</span><br><span class="line">        <span class="string">"python"</span>,</span><br><span class="line">        <span class="string">"restructuredtext"</span>,</span><br><span class="line">        <span class="string">"rust"</span>,</span><br><span class="line">        <span class="string">"scala"</span>,</span><br><span class="line">        <span class="string">"scss"</span>,</span><br><span class="line">        <span class="string">"text"</span>,</span><br><span class="line">        <span class="string">"typescript"</span>,</span><br><span class="line">        <span class="string">"typescriptreact"</span>,</span><br><span class="line">        <span class="string">"vue"</span>,</span><br><span class="line">        <span class="string">"vue-html"</span>,</span><br><span class="line">        <span class="string">"yaml"</span>,</span><br><span class="line">        <span class="string">"yml"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>如果你也是 Mac 电脑，并且你复制了我的<code>setting.json</code>，当中有一个只需要注意：<code>editor.fontFamily: &quot;FiraCode-Retina&quot;</code></strong>，要保证你也安装了这个字体，他才会生效。这个字体可以给你更优雅的代码展示，尤其是在条件语句中。</p>
<p><img src="/blog/img/FiraCode.jpg" alt="FiraCode"></p>
<p>Mac 可以使用<code>homebrew</code>安装这个字体</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">brew tap homebrew/cask-fonts</span><br><span class="line">brew cask install font-fira-code</span><br></pre></td></tr></table></figure></div>
<h3 id="自定义你的"><a href="#自定义你的" class="headerlink" title="自定义你的"></a>自定义你的vscode</h3><p>因为<code>custom-css-and-js</code>的原因，允许自己修改编辑器的样式，事实上你可以把编辑器修改成任何样式，比如我的是毛玻璃的外观</p>
<p><img src="/blog/img/alpha-bg.jpg" alt="alpha-bg"></p>
<p>那我怎么知道样式是什么，并且怎么调整呢？其实很简单，使用<code>cmd + shift + p</code>输入 <code>toggle developer</code>, 选中切换开发者人员工具，会跳出来一个类似于 chrome 的调试面板。接下来的操作就像操作修改普通的 css 样式一样了，把这些修改过的 css 文件放到一个固定的地方，传入到<code>custom-css-and-js</code>的设置中，重启编辑器就可以生效了。</p>
<h3 id="自定义文件模板"><a href="#自定义文件模板" class="headerlink" title="自定义文件模板"></a>自定义文件模板</h3><p>比如说我想自定义 vue 的模板，应该怎么做呢？</p>
<p>打开<strong>首选项 – 用户代码片段 – 输入 <code>vue.json</code>,</strong>打开文件，在里面编辑你想要编辑的模板就可以了。</p>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法大全</title>
    <url>/blog/2019/11/29/markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近新入职一家公司，目前尚没有自己的项目架构和开发规范。于是我把这块负责起来，搭建了初始的开发脚手架和一些开发规范。可是当我发布之后，让大家跟我一起修改，竟然没有一个人能懂我写的是什么！！what？？还有比markdown更简单易懂的语言吗？还能有开发人员不会markdown语法？那大家平时是怎么交流的，上传一张word文档到git仓库，大家一起改吗？这篇文章主要讲述markdown的语法，其实并不复杂，网上这类教程也挺多的，主要是写给公司开发的，同时也为了巩固markdown语法，众所周知，因为一些事情，我已经半年没有写过博客了….</p>
<blockquote>
<p>因为语法是直接生效的，导致有些地方不方便做比对。建议<a href="https://github.com/lost-dream/blog/blob/src/source/_posts/markdown%E8%AF%AD%E6%B3%95.md" target="_blank" rel="noopener">拷贝源代码</a>，然后放在解析工具里对比查看，学习效果翻倍。</p>
<blockquote>
<p>常见的解析工具有 简书、github、MarkDownPad、有道云笔记，如果开发者使用IDE有安装markdown预览的插件也可以直接在编辑器查看。<br><img src="/blog/img/markdown-eg.jpeg" alt="1.png"></p>
</blockquote>
</blockquote>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="设置字体样式"><a href="#设置字体样式" class="headerlink" title="设置字体样式"></a>设置字体样式</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MARKDOWN</span></header><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*这是切斜文字*</span></span><br><span class="line"><span class="strong">**这是加粗文字**</span></span><br><span class="line"><span class="strong">***这是加粗过的斜体字**</span>*</span><br><span class="line">~~这是添加删除线的文字~~</span><br></pre></td></tr></table></figure></div>
<p><em>这是切斜文字</em><br><strong>这是加粗文字</strong><br><strong><em>这是加粗过的斜体字</em></strong><br><del>这是添加删除线的文字</del></p>
<h3 id="添加标题"><a href="#添加标题" class="headerlink" title="添加标题"></a>添加标题</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MARKDOWN</span></header><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 这是一级标题</span></span><br><span class="line"><span class="section">## 这是二级标题</span></span><br><span class="line"><span class="section">### 这是三级标题</span></span><br><span class="line"><span class="section">#### 这是四级标题</span></span><br><span class="line"><span class="section">##### 这是五级标题</span></span><br><span class="line"><span class="section">###### 这是六级标题</span></span><br></pre></td></tr></table></figure></div>
<h3 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MARKDOWN</span></header><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">百度</span>](<span class="link">https://www.baidu.com</span>)</span><br></pre></td></tr></table></figure></div>
<p><a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a></p>
<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MARKDOWN</span></header><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片加载失败时显示的文字，等同于img标签的alt属性</span>](<span class="link">1.png</span>)</span><br></pre></td></tr></table></figure></div>
<p>插入的图片地址是本地图片，也可以是网络资源。而且图片加载失败是现实的文字可以为空<code>![](1.png)</code>，就和img标签的alt属性不是必填的一样。</p>
<h3 id="插入代码"><a href="#插入代码" class="headerlink" title="插入代码"></a>插入代码</h3><p><code>使用一个反引号标记的是一个行内的代码</code></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MARKDOWN</span></header><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">使用三个反引号包起来的是一大段代码块，记得在开始位置添加代码段的语法</span><br></pre></td></tr></table></figure></div>
<h3 id="插入分割线"><a href="#插入分割线" class="headerlink" title="插入分割线"></a>插入分割线</h3><p>在单独的一行中使用至少三个星号(*)、减号(-)、下划线(_)，都可以插入一条分割线</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MARKDOWN</span></header><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">***</span></span><br><span class="line">---</span><br><span class="line"><span class="emphasis">___</span></span><br></pre></td></tr></table></figure></div>
<hr>
<hr>
<hr>
<h3 id="插入引用"><a href="#插入引用" class="headerlink" title="插入引用"></a>插入引用</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MARKDOWN</span></header><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 在被引用的文本前面加入一个&gt;就可以引用一段文本了</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 引用也是可以嵌套的</span></span><br><span class="line">&gt;&gt; 用打包的大小评判代码的质量，就像用飞机的重量评判飞机的质量</span><br><span class="line">&gt;&gt;&gt; 上一段是我瞎编的，其实应该是代码行数</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; **引用**里也可以使用*任何*`markdown`的语法</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>在被引用的文本前面加入一个&gt;就可以引用一段文本了<br>引用也是可以嵌套的</p>
<blockquote>
<p>用打包的大小评判代码的质量，就像用飞机的重量评判飞机的质量</p>
<blockquote>
<p>上一段是我瞎编的，其实应该是代码行数</p>
</blockquote>
</blockquote>
</blockquote>
<p><strong>引用</strong>里也可以使用<em>任何</em><code>markdown</code>的语法</p>
<h3 id="插入列表"><a href="#插入列表" class="headerlink" title="插入列表"></a>插入列表</h3><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>使用数字和一个英文句点表示有序列表。<font color="red">英文句点后面一定要有空格。</font></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MARKDOWN</span></header><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>list1</span><br><span class="line"><span class="bullet">2. </span>list2</span><br><span class="line"><span class="bullet">3. </span>list3</span><br></pre></td></tr></table></figure></div>
<ol>
<li>list1</li>
<li>list2</li>
<li>list3</li>
</ol>
<h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>使用 *，+，- 表示无序列表。<font color="red">符号后面一定要有空格。</font></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MARKDOWN</span></header><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+ </span>list1</span><br><span class="line"><span class="bullet">+ </span>list2</span><br><span class="line"><span class="bullet">+ </span>list3</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>list1</span><br><span class="line"><span class="bullet">- </span>list2</span><br><span class="line"><span class="bullet">- </span>list3</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>list1</span><br><span class="line"><span class="bullet">* </span>list2</span><br><span class="line"><span class="bullet">* </span>list3</span><br></pre></td></tr></table></figure></div>
<ul>
<li>list1</li>
<li>list2</li>
<li>list3</li>
</ul>
<ul>
<li>list1</li>
<li>list2</li>
<li>list3</li>
</ul>
<ul>
<li>list1</li>
<li>list2</li>
<li>list3</li>
</ul>
<p>无序列表是可以和无序列表、有序列表嵌套使用的</p>
<ul>
<li>目录</li>
<li>第一章<ul>
<li>第一节<ol>
<li>第一讲</li>
<li>第二讲</li>
</ol>
</li>
<li>第二节</li>
<li>第三节</li>
</ul>
</li>
<li>第二章</li>
<li>第三章</li>
</ul>
<p>需要注意的是和html标签一样，每一层级的标识符必须是相同的，否则会有问题</p>
<p>另外， 列表也可以包含任意markdown元素，但是要注意：</p>
<ol>
<li>加粗效果不能直接用于列表标题里面，但是可以嵌套在列表里面混合使用。</li>
<li>列表中包含代码块（前面加2个tab或者8个空格，并且需要空一行，否则不显示）。</li>
</ol>
<h3 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h3><p>表格的写法十分简单 {&#35;table}</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MARKDOWN</span></header><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">|姓名|年龄|性别|</span><br><span class="line">|---|---|---|</span><br><span class="line">|张三|1|男|</span><br><span class="line">|李四|2|女|</span><br></pre></td></tr></table></figure></div>
<p>我们可以指定表格单元格的对齐方式，在表格第二行添加冒号，在左边表示左对齐，右边表示有对齐，两边都有表示居中。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MARKDOWN</span></header><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">|姓名(左对齐)|年龄(居中)|性别(右对齐)|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|张三|1|男|</span><br><span class="line">|李四|2|女|</span><br></pre></td></tr></table></figure></div>
<table>
<thead>
<tr>
<th style="text-align:left">姓名(左对齐)</th>
<th style="text-align:center">年龄(居中)</th>
<th style="text-align:right">性别(右对齐)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">张三</td>
<td style="text-align:center">1</td>
<td style="text-align:right">男</td>
</tr>
<tr>
<td style="text-align:left">李四</td>
<td style="text-align:center">2</td>
<td style="text-align:right">女</td>
</tr>
</tbody>
</table>
<h3 id="插入字体、颜色和字号"><a href="#插入字体、颜色和字号" class="headerlink" title="插入字体、颜色和字号"></a>插入字体、颜色和字号</h3><p>markdown本身不支持修改字体、颜色、字号等功能，但允许通过内嵌html标签来实现</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MARKDOWN</span></header><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>黑体字<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"黑体"</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span></span>黑体字，并且颜色是红色的<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"黑体"</span> <span class="attr">color</span>=<span class="string">red</span> <span class="attr">size</span>=<span class="string">7</span>&gt;</span></span>黑体字，并且颜色是红色的，并且尺寸为7<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>
<font face="黑体">黑体字</font><br><font face="黑体" color="red">黑体字，并且颜色是红色的</font><br><font face="黑体" color="red" size="7">黑体字，并且颜色是红色的，并且尺寸为7</font>

<p>face可以是任何可以识别的字体，color可以是任何已知的颜色名、16进制颜色值，size可以是1-7之间的数字，默认为3</p>
<h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><p>一个成熟的前端应该不需要解释什么是锚点，<a href="#table">跳转到表格</a></p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MARKDOWN</span></header><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">需要跳转的位置&#123;#index&#125;</span><br><span class="line">[<span class="string">点击跳转</span>](<span class="link">#index</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h3><p>注脚可以放在文档的任意位置，但一般我们把它放在文档最后。而且关于注脚<a href="这里应该是对注脚这个名词的解释，但我完全懒得解释他。">^1</a>每个编辑器解析的方式都有所不同。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MARKDOWN</span></header><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">使用markdown[^1]可以提升开发效率</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^1</span>]: <span class="link">markdown是一种纯文本标记语言</span></span><br></pre></td></tr></table></figure></div>
<h3 id="todo-list"><a href="#todo-list" class="headerlink" title="todo-list"></a>todo-list</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MARKDOWN</span></header><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+ </span>[ ] 唱</span><br><span class="line"><span class="bullet">+ </span>[ ] 跳</span><br><span class="line"><span class="bullet">+ </span>[ ] rap</span><br><span class="line"><span class="bullet">+ </span>[x] 篮球</span><br></pre></td></tr></table></figure></div>
<hr>
<ul>
<li style="list-style: none"><input type="checkbox"> 唱</li>
<li style="list-style: none"><input type="checkbox"> 跳</li>
<li style="list-style: none"><input type="checkbox"> rap</li>
<li style="list-style: none"><input type="checkbox" checked> 篮球</li>
<li style="list-style: none"><input type="checkbox"> music</li>
</ul>
<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op1=&gt;operation: my operation</span><br><span class="line">c=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end: 结束</span><br></pre></td></tr></table></figure></div>
<p>st-&gt;op1-&gt;c<br>c(yes)-&gt;e<br>c(no)-&gt;op1</p>
<h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello, Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob-&gt;Alice: I am fine, and you?</span><br></pre></td></tr></table></figure></div>
<h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><h4 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h4><p>使用两个<code>$</code>符号引用公式</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MARKDOWN</span></header><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">质能守恒方程：$E=mc^2$</span><br></pre></td></tr></table></figure></div>
<p>质能守恒方程：$E=mc^2$</p>
<h4 id="整行公式"><a href="#整行公式" class="headerlink" title="整行公式"></a>整行公式</h4><p>使用两个<code>$$</code>符号引用整行公式</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">MARKDOWN</span></header><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">$$\sum<span class="emphasis">_&#123;i=1&#125;^n a_</span>i=0$$</span><br><span class="line"></span><br><span class="line">$$f(x<span class="emphasis">_1,x_</span>x,\ldots,x<span class="emphasis">_n) = x_</span>1^2 + x<span class="emphasis">_2^2 + \cdots + x_</span>n^2$$</span><br><span class="line"></span><br><span class="line">$$\sum^&#123;j-1&#125;<span class="emphasis">_&#123;k=0&#125;&#123;\widehat&#123;\gamma&#125;_</span>&#123;kj&#125;z_k&#125;$$</span><br></pre></td></tr></table></figure></div>
<p>$$\sum_{i=1}^n a_i=0$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2$$</p>
<p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj}z_k}$$</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>高级用法中的例子有的解析器是可以解析的，有的完全解析不了，有的解析的规则不尽相同。因此在本博客中无法正确展示，这并不是因为写的不对导致的，看到这里的人，依然建议你下载源代码，放到对应的解析器里可以看到完整的效果。事实上，我们平时使用markdown，大部分还是在用基本语法，高级语法的使用场景是很少的。</p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>css伪元素</title>
    <url>/blog/2019/05/10/css%E4%BC%AA%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h2 id="因为一个背景图引发的思考"><a href="#因为一个背景图引发的思考" class="headerlink" title="因为一个背景图引发的思考"></a>因为一个背景图引发的思考</h2><p>在最近的项目开发中我遇到了一个并不算麻烦的需求。需求大致是这样的</p>
<blockquote>
<p>想要一个有特殊边框的卡片，里面展示几行文本。</p>
</blockquote>
<p>当时的场景有些复杂，但还原之后基本就是这样的：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;eg1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.eg1 &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background: deepskyblue;</span><br><span class="line">  border: 20px dashed #333;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>
<p>然后使用伪元素创建一个白色的背景，放到卡片正中心就完成了。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;eg1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.eg1 &#123;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  position: relative;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background: deepskyblue;</span><br><span class="line">  border: 20px dashed #333;</span><br><span class="line">  &amp;:after &#123;</span><br><span class="line">    content: &apos;13123&apos;;</span><br><span class="line">    background: #fff;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>
<iframe width="100%" height="300" src="//jsrun.net/FKyKp/embedded/all/light/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>本以为已经结束了，只要把返回的消息放在伪元素的<code>content</code>就可以了。但是消息是后端返回的呀，要怎么才能做到把文本填充进去呢？因此才去找了伪元素相关的资料。继而发现了伪元素非常多的用法。在这里总结一下。</p>
<h2 id="除了content-’’之外的其他高级用法"><a href="#除了content-’’之外的其他高级用法" class="headerlink" title="除了content=’’之外的其他高级用法"></a>除了content=’’之外的其他高级用法</h2><h3 id="插入符号"><a href="#插入符号" class="headerlink" title="插入符号"></a>插入符号</h3><p>使用css的quotes可以在字符串两端添加自定义的字符</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;一段文字&lt;/h1&gt;</span><br><span class="line">  &lt;h2&gt;另一段文字&lt;/h2&gt;</span><br><span class="line">  &lt;h3&gt;第三段文字&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">  h1 &#123;</span><br><span class="line">    quotes: &quot;(&quot;&quot;)&quot;;</span><br><span class="line">    &amp;:before &#123;</span><br><span class="line">      content: open-quote;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:after &#123;</span><br><span class="line">      content: close-quote;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  h2 &#123;</span><br><span class="line">    quotes: &quot;\♂&quot;&quot;\♀&quot;;</span><br><span class="line">    &amp;:before &#123;</span><br><span class="line">      content: open-quote;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:after &#123;</span><br><span class="line">      content: close-quote;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  h3 &#123;</span><br><span class="line">    quotes:&quot;\&quot;&quot; &quot;\&quot;&quot;;</span><br><span class="line">    &amp;:before &#123;</span><br><span class="line">      content: open-quote;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:after &#123;</span><br><span class="line">      content: close-quote;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>
<iframe width="100%" height="300" src="//jsrun.net/jKyKp/embedded/all/light/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="插入属性"><a href="#插入属性" class="headerlink" title="插入属性"></a>插入属性</h3><p>content属性可以直接获取元素的属性，包括自有属性和自定义属性。本文中出现的问题也是通过这个方法解决的。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div text=&quot;哈哈哈哈哈&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">  div &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background: #ace;</span><br><span class="line">    border: 20px dashed #adc;</span><br><span class="line">    &amp;:after &#123;</span><br><span class="line">      word-break: break-all;</span><br><span class="line">      background: #fff;</span><br><span class="line">      padding: 10px;</span><br><span class="line">      content: attr(text);</span><br><span class="line">      position: absolute;</span><br><span class="line">      top: 0;</span><br><span class="line">      right: 0;</span><br><span class="line">      bottom: 0;</span><br><span class="line">      left: 0;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>
<iframe width="100%" height="300" src="//jsrun.net/BKyKp/embedded/all/light/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>没什么好解释的，和css引用图片类似</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是h3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line">    content:url(http://img3.imgtn.bdimg.com/it/u=169436546,622776601&amp;fm=26&amp;gp=0.jpg)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="插入编号"><a href="#插入编号" class="headerlink" title="插入编号"></a>插入编号</h3><p>利用css的counter属性产生自增的编号，并且可以自定义和生成更复杂的编号。</p>
<h4 id="插入基本的编号"><a href="#插入基本的编号" class="headerlink" title="插入基本的编号"></a>插入基本的编号</h4><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span></span><br><span class="line">  h1 &#123;</span><br><span class="line">    counter-increment: list;</span><br><span class="line"><span class="css">    &amp;<span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">content</span><span class="selector-pseudo">:counter(list)</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<iframe width="100%" height="300" src="//jsrun.net/uKyKp/embedded/all/light/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h4 id="自定义编号"><a href="#自定义编号" class="headerlink" title="自定义编号"></a>自定义编号</h4><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span></span><br><span class="line">  h1 &#123;</span><br><span class="line">    counter-increment: list;</span><br><span class="line"><span class="css">    &amp;<span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">color</span><span class="selector-pseudo">:deeppink</span>;</span></span><br><span class="line">      content:'第'counter(list)'章';</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<iframe width="100%" height="300" src="//jsrun.net/SKyKp/embedded/all/light/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="修改编号种类"><a href="#修改编号种类" class="headerlink" title="修改编号种类"></a>修改编号种类</h3><blockquote>
<p>编号的种类 === ul的list-style-type属性值。</p>
</blockquote>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span></span><br><span class="line">  h1 &#123;</span><br><span class="line">    counter-increment: list;</span><br><span class="line"><span class="css">    &amp;<span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">color</span><span class="selector-pseudo">:deeppink</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">content</span><span class="selector-pseudo">:counter(list</span>, <span class="selector-tag">upper-alpha</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<iframe width="100%" height="300" src="//jsrun.net/KpyKp/embedded/all/light/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h4 id="更复杂的多层嵌套编号"><a href="#更复杂的多层嵌套编号" class="headerlink" title="更复杂的多层嵌套编号"></a>更复杂的多层嵌套编号</h4><blockquote>
<p>大编号嵌套中编号嵌套小编号……</p>
</blockquote>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>大标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>中标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>中标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>大标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>中标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>中标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span></span><br><span class="line">  h1&#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">counter-increment</span><span class="selector-pseudo">:h1</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">counter-reset</span><span class="selector-pseudo">:h2</span>;</span></span><br><span class="line"><span class="css">    &amp;<span class="selector-pseudo">:before</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">content</span><span class="selector-pseudo">:counter(h1)'.'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  h2&#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">counter-increment</span><span class="selector-pseudo">:h2</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">counter-reset</span><span class="selector-pseudo">:h3</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">margin-left</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">    &amp;<span class="selector-pseudo">:before</span>&#123;</span></span><br><span class="line">      content:counter(h1) '-' counter(h2);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h3&#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">counter-increment</span><span class="selector-pseudo">:h3</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">margin-left</span><span class="selector-pseudo">:80px</span>;</span></span><br><span class="line"><span class="css">    &amp;<span class="selector-pseudo">:before</span>&#123;</span></span><br><span class="line">      content:counter(h1) '-' counter(h2) '-' counter(h3);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<iframe width="100%" height="300" src="//jsrun.net/kpyKp/embedded/all/light/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后附上张鑫旭的一篇文章： <a href="https://www.zhangxinxu.com/wordpress/2014/12/css-counters-pseudo-class-checked-numbers/" target="_blank" rel="noopener">小tip:CSS计数器+伪类实现数值动态计算与呈现</a></p>
]]></content>
      <categories>
        <category>css3</category>
      </categories>
      <tags>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli3.x项目图片压缩</title>
    <url>/blog/2019/05/07/vue-cli3-x%E9%A1%B9%E7%9B%AE%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://www.npmjs.com/package/image-webpack-loader" target="_blank" rel="noopener">image-webpack-loader</a>是基于webpack的图像加载器模块，使用了<a href="https://github.com/kevva/imagemin" target="_blank" rel="noopener">imagemin</a>压缩PNG，JPEG，GIF，SVG和WEBP图像。</p>
<h2 id="安装image-webpack-loader"><a href="#安装image-webpack-loader" class="headerlink" title="安装image-webpack-loader"></a>安装image-webpack-loader</h2><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -D image-webpack-loader</span><br></pre></td></tr></table></figure></div>
<h2 id="vue-cli3-x配置方法"><a href="#vue-cli3-x配置方法" class="headerlink" title="vue-cli3.x配置方法"></a>vue-cli3.x配置方法</h2><p>这个loader在图片解析的过程中生效，并且最好放在最开始执行，这样的话可以做到先压缩图片，然后再用url-loader处理小图片，可以有效地也就是说需要跟在图片的loader之后进行。也就是说在原本的<code>webpack.config.js</code>中应该是这样的：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	test: /\.(png|jpe?g|gif|webp)(\?.*)?$/,</span><br><span class="line">	use: [</span><br><span class="line">		&#123;</span><br><span class="line">			loader: 'url-loader',</span><br><span class="line">			options: &#123;</span><br><span class="line">				<span class="comment">// ...</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			loader: 'image-webpack-loader',</span><br><span class="line">			options:&#123;</span><br><span class="line">				bypassOnDebug: true</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此对应的，通过运行 <code>vue inspect</code> 我们找到处理图片的部分，知道他的loader规则叫images，我们只需要修改这部分规则就行了。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">// 通过vue inspect找到对应的规则</span></span><br><span class="line">		<span class="keyword">const</span> imagesRule = config.module.rule(<span class="string">'images'</span>)</span><br><span class="line">		<span class="comment">// 删除原本的规则</span></span><br><span class="line">		imagesRule.uses.clear()</span><br><span class="line">		<span class="comment">// 为images添加想要的规则,首先把原有的规则恢复</span></span><br><span class="line">		imagesRule</span><br><span class="line">			.use(<span class="string">'url-loader'</span>)</span><br><span class="line">			.loader(<span class="string">'url-loader'</span>)</span><br><span class="line">			.options(&#123;</span><br><span class="line">				limit: <span class="number">4096</span>,</span><br><span class="line">  				fallback: &#123;</span><br><span class="line">    				loader: <span class="string">'file-loader'</span>,</span><br><span class="line">    				options: &#123;</span><br><span class="line">      					name: <span class="string">'img/[name].[hash:8].[ext]'</span></span><br><span class="line">    				&#125;</span><br><span class="line">  				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 再给images添加压缩图片的loader</span></span><br><span class="line">		imagesRule</span><br><span class="line">  			.use(<span class="string">'image-webpack-loader'</span>)</span><br><span class="line">  			.loader(<span class="string">'image-webpack-loader'</span>)</span><br><span class="line">  			.options(&#123; <span class="attr">bypassOnDebug</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这样就可以了。但需要注意几个问题：</p>
<ul>
<li>插件本身有更丰富的options，但因为<del>我懒得写</del>大部分情况下不需要修改，所以就没有写，更具体的配置可以去<a href="https://github.com/tcoopman/image-webpack-loader#readme" target="_blank" rel="noopener">官网</a>看看</li>
<li>图片压缩是非常耗时的，因此建议只在生产环境下使用。</li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
        <category>vue</category>
        <category>compress</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>webpack</tag>
        <tag>compress</tag>
      </tags>
  </entry>
  <entry>
    <title>从0开始开发vue单文件项目</title>
    <url>/blog/2019/04/02/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%BC%80%E5%8F%91vue%E5%8D%95%E6%96%87%E4%BB%B6%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>都说软件开发不需要重复造轮子。但不得不说自己造轮子是掌握和巩固知识点最好的办法。这篇文章带大家从0开始自己写一个最简单的vue脚手架。</p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建一个空文件夹，执行<code>npm init</code>，生成一个npm项目。填写一些你认为有用的信息。并在根目录下创建一个index.js文件，作为npm项目的入口。</p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><h3 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h3><p>首先安装webpack。如果用的是webpack4.x版本，同时还需要安装webpack-cli才行。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -D webpack webpack-cli</span><br></pre></td></tr></table></figure></div>
<h3 id="管理webpack"><a href="#管理webpack" class="headerlink" title="管理webpack"></a>管理webpack</h3><p>在根目录创建一个webpack.config.js，在这里管理webpack。创建一个src文件夹来管理源码。在src文件夹中创建index.js作为入口文件（其实就是脚手架中的main文件）。参照vue脚手架，我们规定最后打包目录为dist。此时文件的目录结构为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">│  index.js</span><br><span class="line">│  package.json</span><br><span class="line">│  webpack.config.js</span><br><span class="line">│</span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">        index.js</span><br></pre></td></tr></table></figure></div>
<p>而webpack.config.js的内容为</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'index.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>为此我们需要安装基本的loader</p>
<ul>
<li>编译css的loader和sass本身</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -D style-loader css-loader sass-loader node-sass</span><br></pre></td></tr></table></figure></div>
<ul>
<li>编译js的loader</li>
</ul>
<blockquote>
<p>如果是babel8.x,必需要同时安装@babel/core @babel/preset-env</p>
</blockquote>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -D babel-loader @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure></div>
<ul>
<li>编译vue的loader</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -D vue-loader vue-template-compiler</span><br><span class="line">npm i -S vue</span><br></pre></td></tr></table></figure></div>
<p>把这些加到webpack.config.js里，文件变成了这样</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'index.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'babel-loader'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'vue-loader'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(css|scss|sass)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'style-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'sass-loader'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="keyword">new</span> VueLoaderPlugin()]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="然后向webpack添加开发环境运行的配置"><a href="#然后向webpack添加开发环境运行的配置" class="headerlink" title="然后向webpack添加开发环境运行的配置"></a>然后向webpack添加开发环境运行的配置</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -D clean-webpack-plugin html-webpack-plugin webpack-dev-server</span><br></pre></td></tr></table></figure></div>
<p>使用webpack-dev-server来启动开发环境，使用webpack进行打包。在这个操作当中，<code>html-webpack-plugin</code>需要一个模板来定义文件的结构，因为我们需要的不是一个空白模板，而希望模板中至少要有一个<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>。根据插件，我们还需要在跟目录创建一个public文件夹。里面放的是渲染<code>html-webpack-plugin</code>插件的模板。那么现在，整个项目结构变成了这样</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">│  index.js</span><br><span class="line">│  package.json</span><br><span class="line">│  webpack.config.js</span><br><span class="line">│</span><br><span class="line">├─public</span><br><span class="line">│      index.html</span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">        index.js</span><br></pre></td></tr></table></figure></div>
<p>然后向<code>package.json</code>添加执行命令</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JSON</span></header><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack --config webpack.config.js"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"webpack-dev-server --open"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>并且向<code>webpack.config.json</code>继续补充</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'index.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase:  <span class="string">'./dist'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'babel-loader'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'vue-loader'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(css|scss|sass)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'style-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'sass-loader'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'public/index.html'</span>,</span><br><span class="line">      title: <span class="string">'hello, vue_title'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="创建真正的vue脚手架"><a href="#创建真正的vue脚手架" class="headerlink" title="创建真正的vue脚手架"></a>创建真正的vue脚手架</h3><p>如果你能执行到上面的步骤结束没有出错，那么实际上你的webpack已经没有问题了。虽然看上去是如此的简单。接下来我们只需要把精力放到如何编译vue单文件组件。在src文件夹中创建一个index.vue文件如下</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &apos;hello, vue!!!&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">div &#123;</span><br><span class="line">  color: red</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>
<p>并编辑同目录中的index.js</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./index.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></div>
<p>最后，我们的项目长成了这样</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">│  index.js</span><br><span class="line">│  package.json</span><br><span class="line">│  webpack.config.js</span><br><span class="line">│</span><br><span class="line">├─public</span><br><span class="line">│      index.html</span><br><span class="line">└─src</span><br><span class="line">        index.js</span><br><span class="line">        index.vue</span><br></pre></td></tr></table></figure></div>
<p>是不是发现和vue-cli3.x脚手架的结构完全一样？事实上vue-cli3.x就是这个结构来的。只不过它把webpack.config.js安装到了vue-cli-service里，暴露出来vue.config.js来管理。</p>
<h2 id="最后，这个模板的地址在这里"><a href="#最后，这个模板的地址在这里" class="headerlink" title="最后，这个模板的地址在这里"></a>最后，这个模板的地址<a href="https://github.com/lost-dream/webpack-demo" target="_blank" rel="noopener">在这里</a></h2>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>详解vue.use的使用</title>
    <url>/blog/2019/02/15/%E8%AF%A6%E8%A7%A3vue-use%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>vue,use用来安装 Vue.js 插件。如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。install 方法调用时，会将 Vue 作为参数传入。因此vue.use()常需要扩展的用法有两个：添加全局的方法（插件是函数）、添加全局的组件（插件是对象）。</p>
<h2 id="添加全局方法"><a href="#添加全局方法" class="headerlink" title="添加全局方法"></a>添加全局方法</h2><blockquote>
<p>这里举例将axios添加到全局。</p>
</blockquote>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>@/assets/js/request.js</span></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">"qs"</span>;</span><br><span class="line"><span class="comment">// 创建axios对象</span></span><br><span class="line"><span class="keyword">let</span> service = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.VUE_APP_BASE_API,</span><br><span class="line">  timeout: <span class="number">10000</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    autauthorization: <span class="string">'123456'</span>,</span><br><span class="line">    name: <span class="string">'singleDogNo.1'</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要的话加入拦截器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建get请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, params, headers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> options = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (params) &#123;</span><br><span class="line">    options.params = params;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (headers) &#123;</span><br><span class="line">    options.headers = headers;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> service.get(url, options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建post请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, data, headers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> options = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (headers) &#123;</span><br><span class="line">    options.headers = headers;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> service.post(url, qs.stringify(data), options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将请求挂载到全局</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install(Vue) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">"$get"</span>, &#123; <span class="attr">value</span>: <span class="keyword">get</span> &#125;);</span><br><span class="line">    Object.defineProperty(Vue.prototype, "$post", &#123; value: post &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------- 这里是切换文件的分割线 -------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @/main.js</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">"@/assets/js/request"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(request);</span><br></pre></td></tr></table></figure></div>
<p>接下来在这个项目中的任何地方你都可以直接使用this.$get和this.$post来发送请求。</p>
<h2 id="添加全局的组件"><a href="#添加全局的组件" class="headerlink" title="添加全局的组件"></a>添加全局的组件</h2><blockquote>
<p>这里举例添加一个loding组件</p>
</blockquote>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- @/components/Loading.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;loading&quot; v-if=&quot;show&quot; @click=&quot;close&quot;&gt;hello, &#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;index&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: &#123;</span><br><span class="line">      default: &apos;loading&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    show: &#123;</span><br><span class="line">      default: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    close() &#123;</span><br><span class="line">      this.$emit(&apos;close&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- -------------- 这里是切换文件的分割线 -------------- --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- @/plugins/loading.js --&gt;</span><br><span class="line">import Loading from &quot;@/components/Loading&quot;;</span><br><span class="line"></span><br><span class="line">const loading = &#123;</span><br><span class="line">  install(Vue, options) &#123;</span><br><span class="line">    Vue.component(&quot;Loading&quot;, Loading, options);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default loading;</span><br><span class="line"></span><br><span class="line">&lt;!-- -------------- 这里是切换文件的分割线 -------------- --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- @/main.js --&gt;</span><br><span class="line">Vue.use(Loading, &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<p>然后就可以在项目的任何地方使用<code>&lt;Loading&gt;&lt;/Loading&gt;</code>来引用loading组件，并且同样可以使用@close :show等组件方法，以及自定义的options。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Cli 3 使用感受</title>
    <url>/blog/2018/12/15/Vue-Cli-3-%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/</url>
    <content><![CDATA[<p>早就听说 vue-cli 有了 3.x 版本，但一直没机会实践。一直到双十一有一个小活动，尝试了一下。感觉到了极度的舒适。新的脚手架做了非常大的修改，具体为删除了 config 和 build 文件夹，改为使用配置文件 vue.config.js，并同时支持<strong>分模式</strong>、<strong>分环境</strong>、<strong>分项目</strong>进行配置，简单的说就是之前脚手架中需要配置在 config 和 build 中的配置，都靠着一个文件来配置，省去了我们在 build 和 config 文件中找配置的地方。下面总结一下主要的变化。<strong>我这里只是做一个总结，并没有（也没必要）添加详细的讲解（反正也不可能比官网讲的清楚）</strong></p>
<h2 id="使用图形化界面"><a href="#使用图形化界面" class="headerlink" title="使用图形化界面"></a>使用图形化界面</h2><p>vue-cli3 新增了基于 MUI 的可视化工具，开发者可以更加直观方便（傻瓜式）的创建、管理 vue 项目，输入<code>vue ui</code>就可以打开可视化窗口。</p>
<h2 id="分模式-amp-amp-分环境"><a href="#分模式-amp-amp-分环境" class="headerlink" title="分模式 &amp;&amp; 分环境"></a>分模式 &amp;&amp; 分环境</h2><p>vue-cli3 增加了 .env 文件用来直观方便的区分环境，每个环境文件包含对应环境的模式和对应环境下特有的环境变量。这些环境变量会在相对环境打包中被载入。具体的方法参考<a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">官网教程</a>。</p>
<h2 id="分项目"><a href="#分项目" class="headerlink" title="分项目"></a>分项目</h2><p>vue-cli3 支持直接创建多页面应用（multi-page-app），只需要在vue.config.js中配置pages参数。<br>具体的配置方法参见<a href="https://cli.vuejs.org/zh/config/#pages" target="_blank" rel="noopener">官网教程</a>。</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>vue-cli3 使用了一套基于插件的架构。如果你查阅一个新创建项目的 package.json，就会发现依赖都是以 @vue/cli-plugin- 开头的。插件可以修改 webpack 的内部配置，也可以向 vue-cli-service 注入命令。在项目创建的过程中，绝大部分列出的特性都是通过插件来实现的。基于插件的架构使得 Vue CLI 灵活且可扩展。如果你对开发一个插件感兴趣，请翻阅插件<a href="https://cli.vuejs.org/zh/dev-guide/plugin-dev.html#%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5" target="_blank" rel="noopener">开发指南</a>。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>管理团队代码</title>
    <url>/blog/2018/10/16/%E7%AE%A1%E7%90%86%E5%9B%A2%E9%98%9F%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<blockquote>
<p>prettier的中文意思是“漂亮的、机灵的”，也是一个流行的代码格式化工具的名称，它能够解析代码，使用你自己设定的规则来重新打印出格式规范的代码。</p>
</blockquote>
<h2 id="同样是代码解析工具，为什么有了eslint还需要prettier？"><a href="#同样是代码解析工具，为什么有了eslint还需要prettier？" class="headerlink" title="同样是代码解析工具，为什么有了eslint还需要prettier？"></a>同样是代码解析工具，为什么有了eslint还需要prettier？</h2><p>众所周知，eslint是一款代码检查工具，但它有不足的地方。虽然提供了大量的代码检查方案，但也只是停留在了代码检查的阶段而已。他会提出警告：你的代码不符合我制定的规范，但也仅此而已。但prettier不同。prettier的处理方案是：删除所有代码原始样式，并通过既定的规则，重新生成AST，然后生成新的代码。用这种方法确保所有输出的代码都符合一致的样式。先看一个简单的例子：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></div>
<p>但或许你喜欢注释里方法远一些呢？</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo</span></span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></div>
<p>事实上，如果注释和方法之间插入的都是空白行，在eslint看来，这俩种方法是完全相同的，都不会产生错误。再来看另一个例子：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">$(foo).css().animate().addClass().click()</span><br></pre></td></tr></table></figure></div>
<p>但如果你更喜欢这样的写法呢？</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">$(foo).css()</span><br><span class="line">      .animate()</span><br><span class="line">      .addClass()</span><br><span class="line">      .click()</span><br></pre></td></tr></table></figure></div>
<p>很显然，俩种方法都有存在的可能性，但同样的，eslint还是会认为这样都是极好的，不会做任何处理。</p>
<p>这样的例子其实有很多。因此，eslint的局限性就凸显了出来，我们需要prettier来更加规范我们的代码。prettier的处理方式如上所述，删除你的所有代码样式，然后按照约束的规则，重新生成符合标准的代码。这样一来就保证了无论你的代码以什么样的格式输入，都能保证在prettier解析之后得到的代码是完全一样的。</p>
<h2 id="为什么prettier比eslint更强大，我们我选择单独使用prettier？"><a href="#为什么prettier比eslint更强大，我们我选择单独使用prettier？" class="headerlink" title="为什么prettier比eslint更强大，我们我选择单独使用prettier？"></a>为什么prettier比eslint更强大，我们我选择单独使用prettier？</h2><p>prettier虽然有更强大的能力，但他只提供了非常少的规则。换句话说，我们使用prettier来生成代码，但生成代码的规则还是由eslint来提供的。</p>
<h2 id="如何使用prettier？"><a href="#如何使用prettier？" class="headerlink" title="如何使用prettier？"></a>如何使用prettier？</h2><h3 id="首先安装prettier"><a href="#首先安装prettier" class="headerlink" title="首先安装prettier"></a>首先安装prettier</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -D eslint-plugin-prettier eslint-config-prettier</span><br></pre></td></tr></table></figure></div>
<h3 id="然后编辑-eslintrc"><a href="#然后编辑-eslintrc" class="headerlink" title="然后编辑.eslintrc"></a>然后编辑.eslintrc</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  extends: [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"plugin:prettier/recommended"</span></span><br><span class="line">  ],</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'vue'</span>,</span><br><span class="line">    <span class="string">'prettier'</span></span><br><span class="line">  ],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>rules里可以填写eslint的规则或者eslint-config-prettier的规则。</p>
<h3 id="最后创建-prettierrc文件，写prettier自己的规则："><a href="#最后创建-prettierrc文件，写prettier自己的规则：" class="headerlink" title="最后创建.prettierrc文件，写prettier自己的规则："></a>最后创建.prettierrc文件，写prettier自己的规则：</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JSON</span></header><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"semi"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"printWidth"</span>: <span class="number">80</span>,</span><br><span class="line"><span class="attr">"tabWidth"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">"useTabs"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"trailingComma"</span>: <span class="string">"all"</span>,</span><br><span class="line"><span class="attr">"bracketSpacing"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"jsxBracketSameLine"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"arrowParens"</span>: <span class="string">"avoid"</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>具体的规则<a href="https://prettier.io/docs/en/options.html" target="_blank" rel="noopener">看这里</a>。</p>
<h2 id="husky-又是什么东西？"><a href="#husky-又是什么东西？" class="headerlink" title="husky 又是什么东西？"></a>husky 又是什么东西？</h2><p>husky可以阻止git commit 和git push的操作。我们可以配合使用，只有prettier没有问题时才可以提交git操作。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -D lint-staged husky</span><br></pre></td></tr></table></figure></div>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    ...</span><br><span class="line">    "lint": "eslint --ext .js,.vue src",</span><br><span class="line">    "format": "prettier --write \"src/**/*.js\" \"src/**/*.vue\"",</span><br><span class="line">    "precommit": "lint-staged"</span><br><span class="line">  &#125;,</span><br><span class="line">  "lint-staged": &#123;</span><br><span class="line">    "src/**/*.&#123;js,json,css,vue&#125;": [</span><br><span class="line">      "prettier --write",</span><br><span class="line">      "eslint --fix",</span><br><span class="line">      <span class="string">"git add"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  "husky": &#123;</span><br><span class="line">    "hooks": &#123;</span><br><span class="line">      "pre-commit": "npm run lint",</span><br><span class="line">      "pre-push": "npm test",</span><br><span class="line">      "...": "..."</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里scripts里添加了三个命令，第一个检测src目录下的js文件和vue文件是否符合eslint标准，第二个按照prettier标准格式化src文件夹中的js文件和vue文件，第三条规定在git commit之前调起lint-staged。<br>lint-staged则规定了顺序执行三个命令，先按照prettier规则重写文件，再解决eslint警告，最后添加git文件。</p>
<p>husky则规定了在commit之前运行lint命令，不通过会报错，无法commit。同样的，push之前也可以做一些操作。更具体的细节<a href="https://github.com/typicode/husky" target="_blank" rel="noopener">看这里</a>。</p>
]]></content>
      <categories>
        <category>Eslint</category>
      </categories>
      <tags>
        <tag>Eslint</tag>
        <tag>Prettier</tag>
      </tags>
  </entry>
  <entry>
    <title>关于vue（全家桶）的一些使用心得</title>
    <url>/blog/2018/07/15/%E5%85%B3%E4%BA%8Evue%EF%BC%88%E5%85%A8%E5%AE%B6%E6%A1%B6%EF%BC%89%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最早之前开发的项目随着业务逻辑的迭代，到达现在实在让人无法接受，于是不得不进行了重构，紧锣密鼓的几个月之后终于完成。在这里说一下自己的一些感受。</p>
<h2 id="关于vue-cli"><a href="#关于vue-cli" class="headerlink" title="关于vue-cli"></a>关于vue-cli</h2><p>vue-cli对vue进行了非常多的处理，尽量让开发者可以专心处理业务的逻辑而不用关心底层的部分。尽管如此，还是需要另外配置很多东西。</p>
<h3 id="预处理器（eg-sass）"><a href="#预处理器（eg-sass）" class="headerlink" title="预处理器（eg:sass）"></a>预处理器（eg:sass）</h3><ul>
<li>新版本的脚手架工具配置好了预处理器的部分，但没有集成预处理语言，也就是说，你不再需要配置预处理器，但还是应该install它。</li>
<li><p>在一些情况下， sass的编译会出现异常。如果你能确信自己写的没有错，那问题确实出现在sass上，一般情况下sass的语法无法处理多层级的样式叠加。例如：我的项目引用了swiper，并全局使用swiper。.css。之后，又将swiper封装为组件，并给组件一些额外的样式，最后在组件调用时第三次添加特殊的样式，如此叠加css导致sass处理出现了问题。这个时候需要<code>deep</code>模式。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>build/utils.js</span></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">/deep/ .my-swiper&#123;</span><br><span class="line">  <span class="selector-tag">color</span>: <span class="selector-tag">red</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><ul>
<li>host 0.0.0.0<br>开发移动应用，需要随时在手机上观察效果。在<code>package.json</code>添加</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "webpack-dev-server --inline --progress --config build/webpack.dev.conf.js --host 0.0.0.0",</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>
<ul>
<li><p>关于背景图打包后出错的问题<br>开发大型项目当然需要对src目录做一些修改，但添加层级也会导致webpack打包出错。我的项目通过分割组件构成，组建内部专属的图片直接放在组件文件内部。具体结构是这样的</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>build/utils.js</span></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">├─src</span><br><span class="line">│  ├─assets</span><br><span class="line">│  │  ├─images</span><br><span class="line">│  │  ├─js</span><br><span class="line">│  │  ├─css</span><br><span class="line">│  │  ├─font</span><br><span class="line">│  ├─ pages</span><br><span class="line">│  │  ├─Index</span><br><span class="line">│  │  │ ├─Index.vue</span><br><span class="line">│  │  │ ├─1.jpg</span><br><span class="line">│  │  ├─Mine</span><br><span class="line">│  │  ├─...</span><br></pre></td></tr></table></figure></div>
<p>这个时候图片打包需要重新配置</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>build/utils.js</span></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateLoaders</span> (<span class="params">loader, loaderOptions</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">if</span> (options.extract) &#123;</span><br><span class="line">    <span class="keyword">return</span> ExtractTextPlugin.extract(&#123;</span><br><span class="line">      use: loaders,</span><br><span class="line">      fallback: <span class="string">'vue-style-loader'</span>,</span><br><span class="line">      publicPath: <span class="string">'../../'</span> <span class="comment">// add</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'vue-style-loader'</span>].concat(loaders)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<h3 id="关于axios"><a href="#关于axios" class="headerlink" title="关于axios"></a>关于axios</h3><p>axios的配置我想说的只有拦截器。可以在请求或响应被 then 或 catch 处理前拦截它们</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Base64&#125; <span class="keyword">from</span> <span class="string">'js-base64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'@/router/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> $axios = axios.create(&#123;</span><br><span class="line">  baseURL: hostURL + <span class="string">'TouchStoneServiceNew'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">  config.headers[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">  config.headers[<span class="string">'Authorization'</span>] = authorization</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$axios.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.data.resultCode === <span class="string">'505'</span> || response.data.resultCode === <span class="string">'506'</span>) &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        Router.push(&#123;</span><br><span class="line">          name: <span class="string">'loginRegister'</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.response) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>: <span class="comment">// 返回 401 跳转到登录页面</span></span><br><span class="line">            Router.push(&#123;</span><br><span class="line">              path: <span class="string">'loginRegister'</span>,</span><br><span class="line">              query: &#123;<span class="attr">redirect</span>: Router.currentRoute.fullPath&#125;</span><br><span class="line">            &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error) <span class="comment">// 返回接口返回的错误信息</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></div>
<p>在请求发送之前向header添加content-type和authorization<br>请求返回之后拦截状态做处理</p>
<h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><p>vuex用来管理vue状态确实很方便，但<strong>只能在组件中需要共享的数据才使用vuex，简单地说就是路由不会跳转</strong>。因为vuex虽然保存数据，但因为vue本身就是单页项目，如果用户刷新网页就全部丢失了。一些重要的信息海慧寺因该保存在cookie和localstorage里。至于语法可以到官网查看，非常详细。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>webpack</tag>
        <tag>vuex</tag>
        <tag>axios</tag>
        <tag>es6+</tag>
      </tags>
  </entry>
  <entry>
    <title>关于蜂窝状图片的实现</title>
    <url>/blog/2018/03/29/%E5%85%B3%E4%BA%8E%E8%9C%82%E7%AA%9D%E7%8A%B6%E5%9B%BE%E7%89%87%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p><img src="/blog/img/comb.png" alt="img5"></p>
<h2 id="使用三个元素实现六边形效果"><a href="#使用三个元素实现六边形效果" class="headerlink" title="使用三个元素实现六边形效果"></a>使用三个元素实现六边形效果</h2><blockquote>
<p>思路：使用三个同样大小的div相互叠加，形成正六边形区域</p>
</blockquote>
<ul>
<li>优点：兼容性最好</li>
<li>缺点：结构繁琐，难以扩展</li>
</ul>
<p>准备三个同样大小的div，其中一个逆时针旋转60deg,另一个顺时针旋转60deg,三个div叠加的部分刚好是正六边形。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS3 实现六边形图片展示效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.boxF</span>, <span class="selector-class">.boxS</span>, <span class="selector-class">.boxT</span> &#123;</span></span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 250px;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.boxF</span>, <span class="selector-class">.boxS</span> &#123;</span></span><br><span class="line">      visibility: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.boxF</span> &#123;</span></span><br><span class="line">      transform: rotate(120deg);</span><br><span class="line">      float: left;</span><br><span class="line">      margin-left: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.boxS</span> &#123;</span></span><br><span class="line">      transform: rotate(-60deg);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.boxT</span> &#123;</span></span><br><span class="line">      transform: rotate(-60deg);</span><br><span class="line">      background: no-repeat 50% center;</span><br><span class="line">      visibility: visible;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.boxF</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">      z-index: 999;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.boxF</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.boxT</span> &#123;</span></span><br><span class="line">      background-size: 400%;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"boxF"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"boxS"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"boxT"</span> <span class="attr">style</span>=<span class="string">"background-image: url('1.jpg');"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="使用一个元素配合css变形得到六边形"><a href="#使用一个元素配合css变形得到六边形" class="headerlink" title="使用一个元素配合css变形得到六边形"></a>使用一个元素配合css变形得到六边形</h2><blockquote>
<p>思路：利用旋转、斜切和位移达到六边形效果</p>
</blockquote>
<ul>
<li>优点：方便扩展，结构清晰</li>
<li>缺点：理解困难，曲线陡峭</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"index.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"hexGrid"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hex"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"hexIn"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Some description about this module<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hex"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"hexIn"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Some description about this module<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hex"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"hexIn"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Some description about this module<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hex"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"hexIn"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">  	    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Some description about this module<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hex"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"hexIn"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Some description about this module<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hex"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"hexIn"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Some description about this module<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hex"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"hexIn"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Some description about this module<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hex"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"hexIn"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Some description about this module<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hex"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"hexIn"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Some description about this module<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hex"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"hexIn"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Some description about this module<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#hexGrid</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0.866%</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Raleway'</span>, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#hexGrid</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hex</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">outline</span>:<span class="number">1px</span> solid transparent;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">60deg</span>) <span class="built_in">skewY</span>(<span class="number">30deg</span>) <span class="built_in">translatez</span>(-<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hex</span> * &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">visibility</span>: visible;</span><br><span class="line">    <span class="attribute">outline</span>:<span class="number">1px</span> solid transparent; <span class="comment">/* fix for jagged edges in FF on hover transition */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hexIn</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">skewY</span>(-<span class="number">30deg</span>) <span class="built_in">rotate</span>(<span class="number">60deg</span>);</span><br><span class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">skewY</span>(-<span class="number">30deg</span>) <span class="built_in">rotate</span>(<span class="number">60deg</span>);</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">skewY</span>(-<span class="number">30deg</span>) <span class="built_in">rotate</span>(<span class="number">60deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** HEX CONTENT **********************************************************************/</span></span><br><span class="line"><span class="selector-class">.hex</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hex</span> <span class="selector-tag">h1</span>, <span class="selector-class">.hex</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">102%</span>;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">1%</span>; <span class="comment">/* prevent line on the right where background doesn't cover image */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5%</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0.8</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>:  -webkit-transform .<span class="number">2s</span> ease-out, opacity .<span class="number">3s</span> ease-out;</span><br><span class="line">            <span class="attribute">transition</span>:          transform .<span class="number">2s</span> ease-out, opacity .<span class="number">3s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hex</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>:<span class="built_in">translateY</span>(-<span class="number">100%</span>) <span class="built_in">translatez</span>(-<span class="number">1px</span>);</span><br><span class="line">        <span class="attribute">-ms-transform</span>:<span class="built_in">translateY</span>(-<span class="number">100%</span>) <span class="built_in">translatez</span>(-<span class="number">1px</span>);</span><br><span class="line">            <span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">100%</span>) <span class="built_in">translatez</span>(-<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hex</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">45%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hex</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>:<span class="built_in">translateY</span>(<span class="number">100%</span>) <span class="built_in">translatez</span>(-<span class="number">1px</span>);</span><br><span class="line">        <span class="attribute">-ms-transform</span>:<span class="built_in">translateY</span>(<span class="number">100%</span>) <span class="built_in">translatez</span>(-<span class="number">1px</span>);</span><br><span class="line">            <span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">100%</span>) <span class="built_in">translatez</span>(-<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hexIn</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">h1</span>, <span class="selector-class">.hexIn</span><span class="selector-pseudo">:focus</span> <span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-class">.hexIn</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span>, <span class="selector-class">.hexIn</span><span class="selector-pseudo">:focus</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>:<span class="built_in">translateY</span>(<span class="number">0%</span>) <span class="built_in">translatez</span>(-<span class="number">1px</span>);</span><br><span class="line">        <span class="attribute">-ms-transform</span>:<span class="built_in">translateY</span>(<span class="number">0%</span>) <span class="built_in">translatez</span>(-<span class="number">1px</span>);</span><br><span class="line">            <span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">0%</span>) <span class="built_in">translatez</span>(-<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span><span class="number">1201px</span>) &#123; <span class="comment">/* &lt;- 5-4  hexagons per row */</span></span><br><span class="line">    <span class="selector-class">.hex</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">19.2%</span>; <span class="comment">/* = (100-4) / 5 */</span></span><br><span class="line">        <span class="attribute">padding-bottom</span>: <span class="number">22.170%</span>; <span class="comment">/* =  width / sin(60deg) */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(9n+6)</span>,</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(9n+7)</span>,</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(9n+8)</span>,</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(9n+9)</span> &#123;</span><br><span class="line">        <span class="attribute">margin-top</span>: -<span class="number">4.676%</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: -<span class="number">4.676%</span>;</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(<span class="number">50%</span>) <span class="built_in">rotate</span>(-<span class="number">60deg</span>) <span class="built_in">skewY</span>(<span class="number">30deg</span>);</span><br><span class="line">            <span class="attribute">-ms-transform</span>: <span class="built_in">translateX</span>(<span class="number">50%</span>) <span class="built_in">rotate</span>(-<span class="number">60deg</span>) <span class="built_in">skewY</span>(<span class="number">30deg</span>);</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50%</span>) <span class="built_in">rotate</span>(-<span class="number">60deg</span>) <span class="built_in">skewY</span>(<span class="number">30deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(9n+6)</span><span class="selector-pseudo">:last-child</span>,</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(9n+7)</span><span class="selector-pseudo">:last-child</span>,</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(9n+8)</span><span class="selector-pseudo">:last-child</span>,</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(9n+9)</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(9n+6)</span> &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0.5%</span>;</span><br><span class="line">        <span class="attribute">clear</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(9n+10)</span> &#123;</span><br><span class="line">        <span class="attribute">clear</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(9n+2)</span>,</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(9n+</span> 7) &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">1%</span>;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">1%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(9n+3)</span>,</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(9n+4)</span>,</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(9n+8)</span> &#123;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">1%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width:</span> <span class="number">1200px</span>) <span class="keyword">and</span> (<span class="attribute">min-width:</span><span class="number">901px</span>) &#123;<span class="comment">/* &lt;- 4-3  hexagons per row */</span></span><br><span class="line">    <span class="selector-class">.hex</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">24.25%</span>; <span class="comment">/* = (100-3) / 4 */</span></span><br><span class="line">        <span class="attribute">padding-bottom</span>: <span class="number">28.001%</span>; <span class="comment">/* =  width / sin(60deg) */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(7n+5)</span>,</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(7n+6)</span>,</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(7n+7)</span> &#123;</span><br><span class="line">        <span class="attribute">margin-top</span>: -<span class="number">6.134%</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: -<span class="number">6.134%</span>;</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(<span class="number">50%</span>) <span class="built_in">rotate</span>(-<span class="number">60deg</span>) <span class="built_in">skewY</span>(<span class="number">30deg</span>);</span><br><span class="line">            <span class="attribute">-ms-transform</span>: <span class="built_in">translateX</span>(<span class="number">50%</span>) <span class="built_in">rotate</span>(-<span class="number">60deg</span>) <span class="built_in">skewY</span>(<span class="number">30deg</span>);</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50%</span>) <span class="built_in">rotate</span>(-<span class="number">60deg</span>) <span class="built_in">skewY</span>(<span class="number">30deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(7n+5)</span><span class="selector-pseudo">:last-child</span>,</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(7n+6)</span><span class="selector-pseudo">:last-child</span>,</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(7n+7)</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(7n+2)</span>,</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(7n+6)</span> &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">1%</span>;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">1%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(7n+3)</span> &#123;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">1%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(7n+8)</span> &#123;</span><br><span class="line">        <span class="attribute">clear</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(7n+5)</span> &#123;</span><br><span class="line">        <span class="attribute">clear</span>: left;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0.5%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width:</span> <span class="number">900px</span>) <span class="keyword">and</span> (<span class="attribute">min-width:</span><span class="number">601px</span>) &#123; <span class="comment">/* &lt;- 3-2  hexagons per row */</span></span><br><span class="line">    <span class="selector-class">.hex</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">32.666%</span>; <span class="comment">/* = (100-2) / 3 */</span></span><br><span class="line">        <span class="attribute">padding-bottom</span>: <span class="number">37.720%</span>; <span class="comment">/* =  width / sin(60) */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(5n+4)</span>,</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(5n+5)</span> &#123;</span><br><span class="line">        <span class="attribute">margin-top</span>: -<span class="number">8.564%</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: -<span class="number">8.564%</span>;</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(<span class="number">50%</span>) <span class="built_in">rotate</span>(-<span class="number">60deg</span>) <span class="built_in">skewY</span>(<span class="number">30deg</span>);</span><br><span class="line">            <span class="attribute">-ms-transform</span>: <span class="built_in">translateX</span>(<span class="number">50%</span>) <span class="built_in">rotate</span>(-<span class="number">60deg</span>) <span class="built_in">skewY</span>(<span class="number">30deg</span>);</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50%</span>) <span class="built_in">rotate</span>(-<span class="number">60deg</span>) <span class="built_in">skewY</span>(<span class="number">30deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(5n+4)</span><span class="selector-pseudo">:last-child</span>,</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(5n+5)</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(5n+4)</span> &#123;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">1%</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0.5%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(5n+2)</span> &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">1%</span>;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">1%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(5n+6)</span> &#123;</span><br><span class="line">        <span class="attribute">clear</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width:</span> <span class="number">600px</span>) &#123; <span class="comment">/* &lt;- 2-1  hexagons per row */</span></span><br><span class="line">    <span class="selector-class">.hex</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">49.5%</span>; <span class="comment">/* = (100-1) / 2 */</span></span><br><span class="line">        <span class="attribute">padding-bottom</span>: <span class="number">57.158%</span>; <span class="comment">/* =  width / sin(60) */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(3n+3)</span> &#123;</span><br><span class="line">        <span class="attribute">margin-top</span>: -<span class="number">13.423%</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: -<span class="number">13.423%</span>;</span><br><span class="line">        <span class="attribute">-webkit-transform</span>: <span class="built_in">translateX</span>(<span class="number">50%</span>) <span class="built_in">rotate</span>(-<span class="number">60deg</span>) <span class="built_in">skewY</span>(<span class="number">30deg</span>);</span><br><span class="line">            <span class="attribute">-ms-transform</span>: <span class="built_in">translateX</span>(<span class="number">50%</span>) <span class="built_in">rotate</span>(-<span class="number">60deg</span>) <span class="built_in">skewY</span>(<span class="number">30deg</span>);</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50%</span>) <span class="built_in">rotate</span>(-<span class="number">60deg</span>) <span class="built_in">skewY</span>(<span class="number">30deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(3n+3)</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(3n+3)</span> &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0.5%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(3n+2)</span> &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">1%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.hex</span><span class="selector-pseudo">:nth-child(3n+4)</span> &#123;</span><br><span class="line">        <span class="attribute">clear</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width:</span> <span class="number">400px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#hexGrid</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="通过css切片实现"><a href="#通过css切片实现" class="headerlink" title="通过css切片实现"></a>通过css切片实现</h2><blockquote>
<p>思路：利用css切片实现六边形</p>
</blockquote>
<ul>
<li>优点：方便扩展，结构简单</li>
<li>缺点：兼容性差，学习曲线陡峭</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    img&#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">clip-path</span>: <span class="selector-tag">polygon</span>(25<span class="selector-class">.8</span>% 0,75<span class="selector-class">.8</span>% 0,100% 44%,75<span class="selector-class">.8</span>% 87<span class="selector-class">.8</span>%,25<span class="selector-class">.8</span>% 87<span class="selector-class">.8</span>%, 0 50%,25<span class="selector-class">.8</span>% 0);</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.jq22.com/demo/css3-image-grid-layout201703082234/img/6.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="others"><a href="#others" class="headerlink" title="others"></a>others</h2><p>还有另外svg、canvas的解决办法，可以自行学习。</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial" target="_blank" rel="noopener">svg</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API" target="_blank" rel="noopener">canvas</a></li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>关于webpack的那些事</title>
    <url>/blog/2018/03/22/%E5%85%B3%E4%BA%8Ewebpack%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<h2 id="Entry-配置模块入口"><a href="#Entry-配置模块入口" class="headerlink" title="Entry - 配置模块入口"></a>Entry - 配置模块入口</h2><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>webpack.base.conf.js</span></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  配置多入口文件</span></span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>);</span><br><span class="line"><span class="keyword">const</span> pagePath = path.resolve(__dirname,<span class="string">'./src'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">entries</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> entryFiles = glob.sync(pagePath + <span class="string">'/*/*.js'</span>);</span><br><span class="line">  <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line">  entryFiles.forEach(<span class="function">(<span class="params">filePath</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> filename = filePath.substring(filePath.lastIndexOf(<span class="string">'\/'</span>) + <span class="number">1</span>, filePath.lastIndexOf(<span class="string">'.'</span>));</span><br><span class="line">  map[filename] = filePath</span><br><span class="line">&#125;);</span><br><span class="line">  <span class="keyword">return</span> map</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="Output-配置模块如何输出成为结果"><a href="#Output-配置模块如何输出成为结果" class="headerlink" title="Output - 配置模块如何输出成为结果"></a>Output - 配置模块如何输出成为结果</h2><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>webpack.base.conf.js</span></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  配置多个文件打包</span></span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>);</span><br><span class="line"><span class="keyword">const</span> pagePath = path.resolve(__dirname,<span class="string">'./src'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlPlugin</span>(<span class="params">options</span>) </span>&#123;  <span class="comment">//  options: 自定义缺省的htmlWebpackPlugin参数</span></span><br><span class="line">  <span class="keyword">let</span> entryHtml = glob.sync(pagePath + <span class="string">'/*/*.html'</span>);</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  entryHtml.forEach(<span class="function">(<span class="params">filePath</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> filename = filePath.substring(filePath.lastIndexOf(<span class="string">'\/'</span>) + <span class="number">1</span>, filePath.lastIndexOf(<span class="string">'.'</span>)); <span class="comment">//  获取文件名</span></span><br><span class="line">    <span class="keyword">let</span> conf = &#123;    <span class="comment">//  htmlWebpackPlugin配置选项</span></span><br><span class="line">      template: filePath,</span><br><span class="line">      filename: filename + <span class="string">'.html'</span>,   <span class="comment">//  文件名</span></span><br><span class="line">      chunks: [<span class="string">'manifest'</span>, <span class="string">'vendor'</span>, filename],    <span class="comment">// 页面模板需要加对应的js脚本，如果不加这行则每个页面都会引入所有的js脚本</span></span><br><span class="line">      title:options.title,    <span class="comment">// 文章标题</span></span><br><span class="line">      inject: <span class="literal">true</span>,</span><br><span class="line">      hash:<span class="literal">true</span>,</span><br><span class="line">      minify: &#123; <span class="comment">//压缩HTML文件</span></span><br><span class="line">        removeComments: <span class="literal">true</span>, <span class="comment">//移除HTML中的注释</span></span><br><span class="line">        collapseWhitespace: <span class="literal">false</span> <span class="comment">//删除空白符与换行符</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    arr.push(<span class="keyword">new</span> HtmlWebpackPlugin(conf))</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="Module-配置模块的处理规则"><a href="#Module-配置模块的处理规则" class="headerlink" title="Module - 配置模块的处理规则"></a>Module - 配置模块的处理规则</h2><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>webpack.base.conf.js</span></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">  rules:[</span><br><span class="line">    &#123;</span><br><span class="line">       test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">       use: <span class="string">'url-loader?limit=2000&amp;name=images/[hash:8].[name].[ext]'</span>,  <span class="comment">//  使用url-loader处理图像文件，小于2000转为base64，否则打包到images文件夹下名为[hash:8].[name].[ext]</span></span><br><span class="line">       include:path.resolve(__dirname,<span class="string">'src'</span>),  <span class="comment">//  打包时包含src文件夹</span></span><br><span class="line">         exclude:path.resolve(__dirname,<span class="string">'node_modules'</span>),  <span class="comment">// 打包时排除node_modules文件夹</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">      use: [&#123;   <span class="comment">//  loader的另一种配置方式(loader解析顺序从后往前)</span></span><br><span class="line">          loader: <span class="string">"style-loader"</span>,</span><br><span class="line">          options: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">"css-loader?minimize"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">"postcss-loader"</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            postcss()&#123;</span><br><span class="line">              <span class="built_in">require</span>(<span class="string">'autorefixer'</span>)(&#123;</span><br><span class="line">                browsers:[<span class="string">'ie&gt;8'</span>,<span class="string">'&gt;1% in CN'</span>]</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">"sass-loader"</span></span><br><span class="line">        &#125;],</span><br><span class="line">        exclude:path.resolve(__dirname,<span class="string">'node_modules'</span>),</span><br><span class="line">        include:path.resolve(__dirname,<span class="string">'src'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="Resolve-自定义模块的解析方式"><a href="#Resolve-自定义模块的解析方式" class="headerlink" title="Resolve - 自定义模块的解析方式"></a>Resolve - 自定义模块的解析方式</h2><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>webpack.base.conf.js</span></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">   <span class="comment">//  导入文件没有后缀时，webpack尝试自动补全，顺序由前到后</span></span><br><span class="line">   extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">   <span class="comment">//  允许自定义模块。以下例子中导入@/foo.js实际上是导入src/foo.js；并且支持使用$结尾缩小搜索范围(命中vue结尾的模块，及只会将 import vue 转换为 import vue/dist/vue.esm.js)</span></span><br><span class="line">   alias: &#123;</span><br><span class="line">     <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">     <span class="string">'@'</span>: resolve(<span class="string">'src'</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="Plugin-简单粗暴地解释：如果你遇到一个webpack无法处理的操作，那他一定可以通过插件来解决"><a href="#Plugin-简单粗暴地解释：如果你遇到一个webpack无法处理的操作，那他一定可以通过插件来解决" class="headerlink" title="Plugin - 简单粗暴地解释：如果你遇到一个webpack无法处理的操作，那他一定可以通过插件来解决"></a>Plugin - 简单粗暴地解释：如果你遇到一个webpack无法处理的操作，那他一定可以通过插件来解决</h2><blockquote>
<p>该配置简单到无法解释，接受一个数组，添加插件即可。所有插件及用法<a href="https://doc.webpack-china.org/plugins/" target="_blank" rel="noopener">看这里</a></p>
</blockquote>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>webpack.base.conf.js</span></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">plugin:[</span><br><span class="line">  <span class="keyword">new</span> webpack.ProvidePlugin(&#123; <span class="comment">//  这个插件用来配置全局jquery</span></span><br><span class="line">    $: <span class="string">"jquery"</span>,</span><br><span class="line">    jQuery: <span class="string">"jquery"</span>,</span><br><span class="line">    jquery: <span class="string">"jquery"</span>,</span><br><span class="line">    <span class="string">"window.jQuery"</span>: <span class="string">"jquery"</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>]), <span class="comment">//  这个插件用来清空dist文件夹</span></span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>
<h2 id="DevSever-构建本地开发环境"><a href="#DevSever-构建本地开发环境" class="headerlink" title="DevSever - 构建本地开发环境"></a>DevSever - 构建本地开发环境</h2><blockquote>
<p>具体配置<a href="https://doc.webpack-china.org/configuration/dev-server/" target="_blank" rel="noopener">移步这里</a></p>
</blockquote>
<h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><h3 id="项目中使用sass"><a href="#项目中使用sass" class="headerlink" title="项目中使用sass"></a>项目中使用sass</h3><p>webpack.base.conf.js中的module新加一项：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>webpack.base.conf.js</span></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">  use: [<span class="string">"style-loader"</span>,<span class="string">"css-loader?minimize"</span>,<span class="string">"sass-loader"</span>],</span><br><span class="line">  exclude:path.resolve(__dirname,<span class="string">'node_modules'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="项目中使用jquery插件"><a href="#项目中使用jquery插件" class="headerlink" title="项目中使用jquery插件"></a>项目中使用jquery插件</h3><p>webpack.base.conf.js中的module新加plugin：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"><span>webpack.base.conf.js</span></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">    $: <span class="string">"jquery"</span>,</span><br><span class="line">    jQuery: <span class="string">"jquery"</span>,</span><br><span class="line">    jquery: <span class="string">"jquery"</span>,</span><br><span class="line">    <span class="string">"window.jQuery"</span>: <span class="string">"jquery"</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>swiper-animate 的使用</title>
    <url>/blog/2018/02/03/swiper-animate%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>使用 swiper 创建动画时，有时需要制作一些 css 的动画丰富你的网页。swiper 提供了快速制作 css 动画效果的小插件，适用于所有版本 swiper。</p>
<blockquote>
<p><strong>该插件不适用于 loop 模式</strong></p>
</blockquote>
<h2 id="引用-swiper-animate-min-js-和-animate-css"><a href="#引用-swiper-animate-min-js-和-animate-css" class="headerlink" title="引用 swiper.animate.min.js 和 animate.css"></a>引用 <a href="https://pan.baidu.com/s/1i5U4jcD" target="_blank" rel="noopener">swiper.animate.min.js</a> 和 <a href="https://cdn.bootcss.com/animate.css/3.5.2/animate.min.css" target="_blank" rel="noopener">animate.css</a></h2><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">//  使用script引入</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"swiper.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"animate.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"swiper.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"swiper.animate.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  使用模块引入</span></span><br><span class="line"><span class="keyword">import</span> swiper <span class="keyword">from</span> <span class="string">"vue-awesome-swiper"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"swiper/dist/css/swiper.css"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"animate.css"</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">import</span> &#123;swiperAnimateCache, swiperAnimate, clearSwiperAnimate&#125; <span class="keyword">from</span> <span class="string">'swiper-animate-cn'</span></span><br></pre></td></tr></table></figure></div>
<h2 id="在-swiper-配置项中加入以下内容"><a href="#在-swiper-配置项中加入以下内容" class="headerlink" title="在 swiper 配置项中加入以下内容"></a>在 swiper 配置项中加入以下内容</h2><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// swiper4.x</span></span><br><span class="line">swiperOptions = &#123;</span><br><span class="line">  ...</span><br><span class="line">  on:&#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      swiperAnimateCache(<span class="keyword">this</span>); <span class="comment">//隐藏动画元素</span></span><br><span class="line">      swiperAnimate(<span class="keyword">this</span>); <span class="comment">//初始化完成开始动画</span></span><br><span class="line">    &#125;,</span><br><span class="line">    slideChangeTransitionEnd: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      swiperAnimate(<span class="keyword">this</span>); <span class="comment">//每个slide切换结束时也运行当前slide动画</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// swiper3.x、swiper2.x</span></span><br><span class="line">swiperOptions = &#123;</span><br><span class="line">  ...</span><br><span class="line">  onInit: <span class="function"><span class="keyword">function</span>(<span class="params">swiper</span>)</span>&#123; <span class="comment">//Swiper2.x的初始化是onFirstInit</span></span><br><span class="line">    swiperAnimateCache(swiper); <span class="comment">//隐藏动画元素</span></span><br><span class="line">    swiperAnimate(swiper); <span class="comment">//初始化完成开始动画</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onSlideChangeEnd: <span class="function"><span class="keyword">function</span>(<span class="params">swiper</span>)</span>&#123;</span><br><span class="line">    swiperAnimate(swiper); <span class="comment">//每个slide切换结束时也运行当前slide动画</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="添加动画"><a href="#添加动画" class="headerlink" title="添加动画"></a>添加动画</h2><p>在需要运动的元素上面增加类名 <strong>ani</strong> ，和其他的类似插件相同，Swiper Animate 需要指定几个参数：</p>
<ul>
<li>swiper-animate-effect：切换效果，例如 fadeInUp</li>
<li>swiper-animate-duration：可选，动画持续时间（单位秒），例如 0.5s</li>
<li>swiper-animate-delay：可选，动画延迟时间（单位秒），例如 0.3s</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"ani"</span> <span class="attr">swiper-animate-effect</span>=<span class="string">"fadeInUp"</span> <span class="attr">swiper-animate-duration</span>=<span class="string">"0.5s"</span> <span class="attr">swiper-animate-delay</span>=<span class="string">"0.3s"</span>&gt;</span>这个元素会在延时0.3s之后执行fadeInUp动画，整个动画持续0.5s<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="添加自定义动画"><a href="#添加自定义动画" class="headerlink" title="添加自定义动画"></a>添加自定义动画</h2><p>事实上，这款插件不仅支持 animate.css 动画，也支持自定义的动画。只需要你自己定义动画，然后将<code>swiper-animate-effect</code>设置成你的动画名就可以了。</p>
<blockquote>
<p>小技巧: 你可以给自己的动画定义特殊的类名，来规定动画的其他参数。</p>
</blockquote>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- my_ani.css --&gt;</span><br><span class="line">.my_ani&#123;</span><br><span class="line">    animation-timing-function: linear;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes my_ani &#123;</span><br><span class="line">  from &#123;</span><br><span class="line">    opacity: 0</span><br><span class="line">  &#125;</span><br><span class="line">  to&#123;</span><br><span class="line">    opacity: 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import &quot;my_ani.css&quot;</span><br><span class="line">&lt;p class=&quot;ani my_ani&quot; swiper-animate-effect=&quot;my_ani&quot; swiper-animate-duration=&quot;1s&quot; swiper-animate-delay=&quot;0&quot;&gt;这个元素会在一秒之内改变透明度，并且因为增加了my_ani类名。该动画将以匀速执行&lt;/p&gt;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>swiper</category>
      </categories>
      <tags>
        <tag>carousel</tag>
        <tag>animate</tag>
      </tags>
  </entry>
  <entry>
    <title>video小记</title>
    <url>/blog/2018/01/24/Video%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>html5新增的audio和video有很多的相同之处，本节中的绝大部分属性和方法在audio同样适用。</p>
</blockquote>
<h2 id="video标签的使用"><a href="#video标签的使用" class="headerlink" title="video标签的使用"></a>video标签的使用</h2><p>如果你想使用视频，最简单的方法:</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>但在大多数情况下不建议这样使用，因为视频格式可能不支持。所以你要写成这样:</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"video"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.ogg"</span> <span class="attr">type</span>=<span class="string">"video/ogg"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.webm"</span> <span class="attr">type</span>=<span class="string">"video/webm"</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line"> <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>这样你可以使用多种视频格式，如果不支持会尝试下一种格式。<strong>目前，video元素支持三种视频格式：MP4、WebM、Ogg。</strong></p>
<h2 id="video标签的属性"><a href="#video标签的属性" class="headerlink" title="video标签的属性"></a>video标签的属性</h2><p>本质上，video对象也是一个普通的DOM对象，你可以像选取普通的DOM对象一样选中它:</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  javascript</span></span><br><span class="line"><span class="keyword">var</span> video = <span class="built_in">document</span>.getElementById(<span class="string">'cideo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  jquery</span></span><br><span class="line"><span class="keyword">var</span> video =  $(<span class="string">'#video'</span>).get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></div>
<p>video标签有以下属性:</p>
<ul>
<li>autoplay: 如果出现该属性，则视频在就绪后马上播放</li>
<li>controls: 如果出现该属性，则向用户显示控件</li>
<li>width: 视频宽度</li>
<li>height: 视频高度</li>
<li>src: 视频的路径(video标签定义的路径)</li>
<li>poster: 视频封面，没有播放时显示的图片</li>
<li>preload: 如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性</li>
<li>muted: 如果出现该属性，视频的音频输出为静音。</li>
<li>loop: 如果出现该属性，则当媒介文件完成播放后再次开始播放</li>
</ul>
<h2 id="video对象的属性"><a href="#video对象的属性" class="headerlink" title="video对象的属性"></a>video对象的属性</h2><ul>
<li>audioTracks: 返回表示可用音频轨道的 AudioTrackList 对象。</li>
<li>autoplay: 设置或返回是否在就绪（加载完成）后随即播放视频。</li>
<li>buffered: 返回表示视频已缓冲部分的 TimeRanges 对象。</li>
<li>controller: 返回表示视频当前媒体控制器的 MediaController 对象。</li>
<li>controls: 设置或返回视频是否应该显示控件（比如播放/暂停等）。</li>
<li>crossOrigin: 设置或返回视频的 CORS 设置。</li>
<li>currentSrc: 返回当前视频的 URL。</li>
<li>currentTime: 设置或返回视频中的当前播放位置（以秒计）。</li>
<li>defaultMuted: 设置或返回视频默认是否静音。</li>
<li>defaultPlaybackRate: 设置或返回视频的默认播放速度。</li>
<li>duration: 返回视频的长度（以秒计）。</li>
<li>ended: 返回视频的播放是否已结束。</li>
<li>error: 返回表示视频错误状态的 MediaError 对象。</li>
<li>height: 设置或返回视频的 height 属性的值。</li>
<li>loop: 设置或返回视频是否应在结束时再次播放。</li>
<li>mediaGroup: 设置或返回视频所属媒介组合的名称。</li>
<li>muted: 设置或返回是否关闭声音。</li>
<li>networkState: 返回视频的当前网络状态。</li>
<li>paused: 设置或返回视频是否暂停。</li>
<li>playbackRate: 设置或返回视频播放的速度。</li>
<li>played: 返回表示视频已播放部分的 TimeRanges 对象。</li>
<li>poster: 设置或返回视频的 poster 属性的值。</li>
<li>preload: 设置或返回视频的 preload 属性的值。</li>
<li>readyState: 返回视频当前的就绪状态。</li>
<li>seekable: 返回表示视频可寻址部分的 TimeRanges 对象。</li>
<li>seeking: 返回用户当前是否正在视频中进行查找。</li>
<li>src: 设置或返回视频的 src 属性的值。</li>
<li>startDate: 返回表示当前时间偏移的 Date 对象。</li>
<li>textTracks: 返回表示可用文本轨道的 TextTrackList 对象。</li>
<li>videoTracks: 返回表示可用视频轨道的 VideoTrackList 对象。</li>
<li>volume: 设置或返回视频的音量。</li>
<li>width: 设置或返回视频的 width 属性的值。</li>
</ul>
<h2 id="video对象的方法"><a href="#video对象的方法" class="headerlink" title="video对象的方法"></a>video对象的方法</h2><ul>
<li>video.play(): 开始播放</li>
<li>video.pause(): 暂停播放</li>
</ul>
<h2 id="video对象的事件"><a href="#video对象的事件" class="headerlink" title="video对象的事件"></a>video对象的事件</h2><ul>
<li>video.onloadstart = fn(): 客户端开始请求数据时触发</li>
<li>video.onprogress = fn(): 客户端正在请求数据时触发</li>
<li>video.onsuspend = fn(): 延迟下载时触发</li>
<li>video.onabort = fn(): 客户端主动终止下载时触发（不是因为错误引起）</li>
<li>video.onerror = fn(): 请求数据时遇到错误时触发</li>
<li>video.onstalled = fn(): 网速失速时触发</li>
<li>video.onplay = fn(): 开始播放时触发</li>
<li>video.onpause = fn(): 暂停时触发</li>
<li>video.onloadedmetadata = fn(): 成功获取资源长度</li>
<li>video.onloadeddata = fn(): 当前帧的数据已加载，但没有足够的数据来播放指定视频的下一帧时触发</li>
<li>video.onwaiting = fn(): 等待数据，并非错误</li>
<li>video.onplaying = fn(): 开始回放时触发</li>
<li>video.oncanplay = fn(): 可以播放，但中途可能因为加载而暂停</li>
<li>video.oncanplaythrough = fn(): 可以播放，视屏全部加载完毕</li>
<li>video.onseeking = fn(): 寻找资源中不断触发</li>
<li>video.onseeked = fn(): 寻找资源完毕时触发</li>
<li>video.ontimeupdate = fn(): 播放时间改变时触发</li>
<li>video.onended = fn(): 播放结束时触发</li>
<li>video.onratechange = fn(): 播放速率改变时触发</li>
<li>video.ondurationchange = fn(): 资源长度改变时触发</li>
<li>video.onvolumechange = fn(): 音量改变时触发</li>
</ul>
<p>当视频处于加载过程中时，会依次触发以下事件:</p>
<ul>
<li>video.onloadstart</li>
<li>video.ondurationchange</li>
<li>video.onloadedmetadata</li>
<li>video.onloadeddata</li>
<li>video.onprogress</li>
<li>video.oncanplay</li>
<li>video.oncanplaythrough</li>
</ul>
]]></content>
      <categories>
        <category>video</category>
      </categories>
      <tags>
        <tag>video</tag>
      </tags>
  </entry>
  <entry>
    <title>前端配合微信授权</title>
    <url>/blog/2018/01/12/%E5%89%8D%E7%AB%AF%E9%85%8D%E5%90%88%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近做了一个微信的活动，功能主要是好友之间互相投票。所以需要进行微信的授权。因为是第一次接触，所以记录下来备不时之需。<strong>这篇博客主要参考官方<a href="https://mp.weixin.qq.com/wiki" target="_blank" rel="noopener">微信公众平台技术文档</a>，由于官方文档前后端教程混杂不方便阅读。所以整理出来这一篇。</strong></p>
<h3 id="关于网页授权回调域名的说明"><a href="#关于网页授权回调域名的说明" class="headerlink" title="关于网页授权回调域名的说明"></a>关于网页授权回调域名的说明</h3><ul>
<li>在微信公众号请求用户网页授权之前，开发者需要先到公众平台官网中的“开发 - 接口权限 - 网页服务 - 网页帐号 - 网页授权获取用户基本信息”的配置选项中，修改授权回调域名。请注意，这里填写的是域名（是一个字符串），而不是URL，因此请勿加 http:// 等协议头。</li>
<li>授权回调域名配置规范为全域名，比如需要网页授权的域名为：<a href="http://www.qq.com，配置以后此域名下面的页面`http://www.qq.com/music.html`" target="_blank" rel="noopener">www.qq.com，配置以后此域名下面的页面`http://www.qq.com/music.html`</a> 、 <code>http://www.qq.com/login.html</code> 都可以进行OAuth2.0鉴权。但<code>http://pay.qq.com</code> 、 <code>http://music.qq.com</code> 、 <code>http://qq.com</code>无法进行OAuth2.0鉴权。</li>
</ul>
<h3 id="关于网页授权的两种scope的区别说明"><a href="#关于网页授权的两种scope的区别说明" class="headerlink" title="关于网页授权的两种scope的区别说明"></a>关于网页授权的两种scope的区别说明</h3><ul>
<li>以snsapi_base为scope发起的网页授权，是用来获取进入页面的用户的openid的，并且是静默授权并自动跳转到回调页的。用户感知的就是直接进入了回调页（往往是业务页面）</li>
<li>以snsapi_userinfo为scope发起的网页授权，是用来获取用户的基本信息的。但这种授权需要用户手动同意，并且由于用户同意过，所以无须关注，就可在授权后获取该用户的基本信息。</li>
</ul>
<h3 id="关于网页授权access-token和普通access-token的区别"><a href="#关于网页授权access-token和普通access-token的区别" class="headerlink" title="关于网页授权access_token和普通access_token的区别"></a>关于网页授权access_token和普通access_token的区别</h3><ul>
<li>微信网页授权是通过OAuth2.0机制实现的，在用户授权给公众号后，公众号可以获取到一个网页授权特有的接口调用凭证（网页授权access_token），通过网页授权access_token可以进行授权后接口调用，如获取用户基本信息；</li>
<li>其他微信接口，需要通过基础支持中的“获取access_token”接口来获取到的普通access_token调用。</li>
</ul>
<h2 id="授权步骤"><a href="#授权步骤" class="headerlink" title="授权步骤"></a>授权步骤</h2><h3 id="用户同意授权，获取code"><a href="#用户同意授权，获取code" class="headerlink" title="用户同意授权，获取code"></a>用户同意授权，获取code</h3><p>在确保微信公众账号拥有授权作用域（scope参数）的权限的前提下（服务号获得高级接口后，默认拥有scope参数中的snsapi_base和snsapi_userinfo），引导关注者打开如下页面：<br><code>https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</code>。若提示“该链接无法访问”，请检查参数是否填写错误，是否拥有scope参数对应的授权作用域权限；并且由于授权操作安全等级较高，所以在发起授权请求时，微信会对授权链接做正则强匹配校验，如果链接的参数顺序不对，授权页面将无法正常访问。</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">是否必填</th>
<th style="text-align:center">参数说明/</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">appid</td>
<td style="text-align:center">是</td>
<td style="text-align:center">公众号的唯一标识</td>
</tr>
<tr>
<td style="text-align:center">redirect_uri</td>
<td style="text-align:center">是</td>
<td style="text-align:center">授权后重定向的回调链接地址， 需要使用<a href="http://tool.chinaz.com/Tools/urlencode.aspx" target="_blank" rel="noopener">urlEncode</a>对链接进行处理</td>
</tr>
<tr>
<td style="text-align:center">response_type</td>
<td style="text-align:center">是</td>
<td style="text-align:center">返回类型，请填写code</td>
</tr>
<tr>
<td style="text-align:center">scope</td>
<td style="text-align:center">是</td>
<td style="text-align:center">应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过openid拿到昵称、性别、所在地。并且， 即使在未关注的情况下，只要用户授权，也能获取其信息 ）</td>
</tr>
<tr>
<td style="text-align:center">state</td>
<td style="text-align:center">否</td>
<td style="text-align:center">重定向后会带上state参数，开发者可以填写a-zA-Z0-9的参数值，最多128字节</td>
</tr>
<tr>
<td style="text-align:center">#wechat_redirect</td>
<td style="text-align:center">是</td>
<td style="text-align:center">无论直接打开还是做页面302重定向时候，必须带此参数</td>
</tr>
</tbody>
</table>
<p>参考链接</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">PLAIN</span></header><figure class="iseeu highlight plain"><table><tr><td class="code"><pre><span class="line">scope为snsapi_base</span><br><span class="line">https://open.weixin.qq.com/connect/oauth2/authorize?</span><br><span class="line">appid=wx520c15f417810387</span><br><span class="line">&amp;redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60</span><br><span class="line">&amp;response_type=code</span><br><span class="line">&amp;scope=snsapi_base</span><br><span class="line">&amp;state=123</span><br><span class="line">#wechat_redirect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scope为snsapi_userinfo</span><br><span class="line">https://open.weixin.qq.com/connect/oauth2/authorize?</span><br><span class="line">appid=wx6ec33e01876afb1e</span><br><span class="line">&amp;redirect_uri=http%3a%2f%2fh5.dpandora.cn%2fpromote%2fhelp_index.html</span><br><span class="line">&amp;response_type=code</span><br><span class="line">&amp;scope=snsapi_userinfo</span><br><span class="line">&amp;state=STATE</span><br><span class="line">#wechat_redirect</span><br></pre></td></tr></table></figure></div>
<p>如果同意授权，页面将跳转至<code>redirect_uri/?code=CODE&amp;state=STATE</code>。 把code传给server，server会通过code获取授权access_token，获取用户信息。</p>
<h3 id="使用jssdk"><a href="#使用jssdk" class="headerlink" title="使用jssdk"></a>使用jssdk</h3><h4 id="步骤一：绑定域名"><a href="#步骤一：绑定域名" class="headerlink" title="步骤一：绑定域名"></a>步骤一：绑定域名</h4><p>先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。</p>
<h4 id="步骤二：引入JS文件"><a href="#步骤二：引入JS文件" class="headerlink" title="步骤二：引入JS文件"></a>步骤二：引入JS文件</h4><p>在需要调用JS接口的页面引入<code>https://res.wx.qq.com/open/js/jweixin-1.2.0.js</code></p>
<h4 id="步骤三：通过config接口注入权限验证配置"><a href="#步骤三：通过config接口注入权限验证配置" class="headerlink" title="步骤三：通过config接口注入权限验证配置"></a>步骤三：通过config接口注入权限验证配置</h4><p>所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用（同一个url仅需调用一次，对于变化url的SPA的web app可在每次url变化时进行调用,目前Android微信客户端不支持pushState的H5新特性，所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6.2中修复）。通过接口获取签名。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">    debug: <span class="literal">true</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来。</span></span><br><span class="line">    appId: <span class="string">''</span>, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">    timestamp: , <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">    nonceStr: <span class="string">''</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">    signature: <span class="string">''</span>,<span class="comment">// 必填，签名</span></span><br><span class="line">    jsApiList: [] <span class="comment">// 必填，需要使用的JS接口列表</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<h4 id="步骤四：通过ready接口处理成功验证"><a href="#步骤四：通过ready接口处理成功验证" class="headerlink" title="步骤四：通过ready接口处理成功验证"></a>步骤四：通过ready接口处理成功验证</h4><p>config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</p>
<h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="config-invalid-signature"><a href="#config-invalid-signature" class="headerlink" title="config:invalid signature"></a>config:invalid signature</h3><p>出现这个错误的原因一定是签名错误。原因可能有以下几种情况，可以逐一排查：</p>
<ul>
<li>确认签名算法是否正确，可用<code>http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign</code>页面工具进行校验。</li>
<li>确认config中nonceStr（js中驼峰标准大写S）, timestamp（没有驼峰标准）。</li>
<li>确认url格式。签名的url是页面完整的url，包括’http(s)://‘部分以及’？’后面的GET参数部分,但不包括’#’hash后面的部分。</li>
<li>确认 config 中的 appid 与用来获取 jsapi_ticket 的 appid 一致。</li>
<li>确保一定缓存access_token和jsapi_ticket。</li>
<li>确保你获取用来签名的url是动态获取的，动态页面可参见实例代码中php的实现方式。如果是html的静态页面在前端通过ajax将url传到后台签名，前端需要用js获取当前页面除去’#’hash部分的链接（可用<code>location.href.split(&#39;#&#39;)[0]</code>获取,而且需要encodeURIComponent），因为页面一旦分享，微信客户端会在你的链接末尾加入其它参数，如果不是动态获取当前链接，将导致分享后的页面签名失败。</li>
</ul>
<h3 id="获取用户昵称的特殊符号"><a href="#获取用户昵称的特殊符号" class="headerlink" title="获取用户昵称的特殊符号"></a>获取用户昵称的特殊符号</h3><p>有些用户的昵称中包含有非ASCLL字符，包括编码外的图像以及文字。可以使用base64进行处理。</p>
]]></content>
      <categories>
        <category>WeChat</category>
      </categories>
      <tags>
        <tag>WeChat</tag>
      </tags>
  </entry>
  <entry>
    <title>关于vue-awesome-swiper以及vue-cli升级随笔</title>
    <url>/blog/2017/12/10/%E5%85%B3%E4%BA%8Evue-awesome-swiper%E4%BB%A5%E5%8F%8Avue-cli%E5%8D%87%E7%BA%A7%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<h2 id="关于-vue-cli"><a href="#关于-vue-cli" class="headerlink" title="关于 vue-cli"></a>关于 vue-cli</h2><p>vue-cli 在最近更新到了2.9.x版本，新的 vue-lci 模板使用了更高版本的webpack进行打包，因而弃用了 express并改变了构建结构，对我本人目前遇到的问题：</p>
<h3 id="如何在基础上设置自己的接口"><a href="#如何在基础上设置自己的接口" class="headerlink" title="如何在基础上设置自己的接口"></a>如何在基础上设置自己的接口</h3><p>在之前版本可以在 dev-server.js 中通过express方便的设计路由并插入，而现有版本移除了express并且删除了dev-server.js文件，应该怎么做？新版本中使用了webpack-dev-server，查找文档后发现有一个接口方法为 devServer.before ,可以在这个方法中定义api接口。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.conf.js</span></span><br><span class="line"></span><br><span class="line">devServer: &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">  before(app)&#123;</span><br><span class="line">    app.get(<span class="string">'/api'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        author: <span class="string">'lost-dream'</span>,</span><br><span class="line">        age: <span class="number">24</span>,</span><br><span class="line">        sex: <span class="string">'man'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="使用css预处理器sass"><a href="#使用css预处理器sass" class="headerlink" title="使用css预处理器sass"></a>使用css预处理器sass</h3><p>新版本中想使用sass(其他预处理器我没有尝试)编译，需要手动配置。</p>
<ul>
<li>安装依赖 <code>cnpm install -D node-sass sass-loader</code></li>
<li>添加loader</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  ...</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(scss|sass)$/</span>,</span><br><span class="line">    loaders: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>
<h2 id="关于vue-awesome-swiper"><a href="#关于vue-awesome-swiper" class="headerlink" title="关于vue-awesome-swiper"></a>关于vue-awesome-swiper</h2><p>由于 swiper 更新到 swiper4，因此该插件在最近也得到了升级。首先他优化了文档（之前版本文档不全，为我带来了不少困扰），其次更新了使用的结构和方式，不过无论如何变化，vue-awesome-swiper始终坚持使用swpierAPI，因此有其他问题，还是要到swiper官网寻找答案。</p>
]]></content>
      <categories>
        <category>swiper</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>carousel</tag>
      </tags>
  </entry>
  <entry>
    <title>html 清除缓存</title>
    <url>/blog/2017/11/25/html%E6%B8%85%E9%99%A4%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h2 id="通过设置-meta-标签清除页面缓存"><a href="#通过设置-meta-标签清除页面缓存" class="headerlink" title="通过设置 meta 标签清除页面缓存"></a>通过设置 meta 标签清除页面缓存</h2><p>通过向 header 中添加以下代码可以清除页面缓存</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-cache, no-store, must-revalidate"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Expires"</span> <span class="attr">content</span>=<span class="string">"0"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="Cache-Control-头域"><a href="#Cache-Control-头域" class="headerlink" title="Cache-Control 头域"></a>Cache-Control 头域</h3><p>Cache-Control 指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置 Cache-Control 并不会修改另一个消息处理过程中的缓存处理过程。请求时的缓存指令包括 <strong>no-cache</strong>、<strong>no-store</strong>、<strong>max-age</strong>、<strong>max-stale</strong>、<strong>min-fresh</strong>、<strong>only-if-cached</strong>，响应消息中的指令包括 <strong>public</strong>、<strong>private</strong>、<strong>no-cache</strong>、<strong>no-store</strong>、<strong>no-transform</strong>、<strong>must-revalidate</strong>、<strong>proxy-revalidate</strong>、<strong>max-age</strong>。各个消息中的指令含义如下</p>
<ul>
<li>Public 指示响应可被任何缓存区缓存</li>
<li>Private 指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效</li>
<li>no-cache 指示请求或响应消息不能缓存</li>
<li>no-store 用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。</li>
<li>must-revalidation/proxy-revalidation 如果缓存的内容失效，请求必须发送到服务器/代理以进行重新验证</li>
<li>max-age 指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应</li>
<li>min-fresh 指示客户机可以接收响应时间小于当前时间加上指定时间的响应</li>
<li>max-stale 指示客户机可以接收超出超时期间的响应消息。如果指定 max-stale 消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。</li>
</ul>
<p>更多具体信息可以移步<a href="https://baike.baidu.com/item/Cache-control/1885913?fr=aladdin" target="_blank" rel="noopener">百度百科</a>查看</p>
<h3 id="pragma-与-no-cache-用于定义页面缓存-不缓存页面"><a href="#pragma-与-no-cache-用于定义页面缓存-不缓存页面" class="headerlink" title="pragma 与 no-cache 用于定义页面缓存,不缓存页面"></a>pragma 与 no-cache 用于定义页面缓存,不缓存页面</h3><h3 id="Expires-可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新调阅。可以把该值设置为一个早已过去的时间，那么访问此网时若重复在地址栏按回车，那么每次都会重复访问。注意：必须使用-GMT-的时间格式"><a href="#Expires-可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新调阅。可以把该值设置为一个早已过去的时间，那么访问此网时若重复在地址栏按回车，那么每次都会重复访问。注意：必须使用-GMT-的时间格式" class="headerlink" title="Expires 可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新调阅。可以把该值设置为一个早已过去的时间，那么访问此网时若重复在地址栏按回车，那么每次都会重复访问。注意：必须使用 GMT 的时间格式"></a>Expires 可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新调阅。可以把该值设置为一个早已过去的时间，那么访问此网时若重复在地址栏按回车，那么每次都会重复访问。注意：必须使用 GMT 的时间格式</h3><h3 id="如果这些还不够，就必须从代码中做文章。可以给每个文件加一个后缀，告诉浏览器这是一个新文件。这一效果通常选择在打包自动生成"><a href="#如果这些还不够，就必须从代码中做文章。可以给每个文件加一个后缀，告诉浏览器这是一个新文件。这一效果通常选择在打包自动生成" class="headerlink" title="如果这些还不够，就必须从代码中做文章。可以给每个文件加一个后缀，告诉浏览器这是一个新文件。这一效果通常选择在打包自动生成"></a>如果这些还不够，就必须从代码中做文章。可以给每个文件加一个后缀，告诉浏览器这是一个新文件。这一效果通常选择在打包自动生成</h3><h2 id="通过异步请求更新数据"><a href="#通过异步请求更新数据" class="headerlink" title="通过异步请求更新数据"></a>通过异步请求更新数据</h2><h3 id="使用-ajax-请求文件时加上请求头-If-Modified-Since-和-Cache-Control"><a href="#使用-ajax-请求文件时加上请求头-If-Modified-Since-和-Cache-Control" class="headerlink" title="使用 ajax 请求文件时加上请求头 If-Modified-Since 和 Cache-Control"></a>使用 ajax 请求文件时加上请求头 <strong>If-Modified-Since</strong> 和 <strong>Cache-Control</strong></h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JAVASCRIPT</span></header><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url:<span class="string">'/'</span>,</span><br><span class="line">  dataType:<span class="string">'json'</span>,</span><br><span class="line">  beforeSend :<span class="function"><span class="keyword">function</span>(<span class="params">xmlHttp</span>)</span>&#123;</span><br><span class="line">    xmlHttp.setRequestHeader(<span class="string">"If-Modified-Since"</span>,<span class="string">"0"</span>);</span><br><span class="line">    xmlHttp.setRequestHeader(<span class="string">"Cache-Control"</span>,<span class="string">"no-cache"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span>:<span class="literal">false</span>,</span><br><span class="line">  success:<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<h3 id="你也可以试试直接使用-cache-false"><a href="#你也可以试试直接使用-cache-false" class="headerlink" title="你也可以试试直接使用 cache:false"></a>你也可以试试直接使用 <strong>cache:false</strong></h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url:<span class="string">'/'</span>,</span><br><span class="line">  dataType:<span class="string">'json'</span>,</span><br><span class="line">  data:&#123;&#125;,</span><br><span class="line">  cache:<span class="literal">false</span>,</span><br><span class="line">  ifModified :<span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">async</span>:<span class="literal">false</span>,</span><br><span class="line">  success:<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>html5</category>
      </categories>
      <tags>
        <tag>html5</tag>
        <tag>cache</tag>
      </tags>
  </entry>
  <entry>
    <title>全局设置npm镜像</title>
    <url>/blog/2017/11/15/%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AEnpm%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<p>通过命令<code>npm config set registry https://registry.npm.taobao.org</code>设置<br>或者通过命令<code>npm config ls -s</code>查看详细的全局配置<br>留意一个选项<code>globalconfig</code>，地址指向一个文件npmrc；一个<code>userconfig</code>，地址指向一个文件.npmrc（如果没有新建一个），添加以下内容即可</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">registry=https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>NodeJs</category>
      </categories>
      <tags>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5原生拖放</title>
    <url>/blog/2017/11/07/HTML5%E5%8E%9F%E7%94%9F%E6%8B%96%E6%94%BE/</url>
    <content><![CDATA[<blockquote>
<p>拖放（Drag 和 drop）是HTML5标准的组成部分</p>
</blockquote>
<h2 id="拖放"><a href="#拖放" class="headerlink" title="拖放"></a>拖放</h2><p>拖放是一种常见的特性，即抓取对象以后拖放到其他位置。在 HTML5 中，拖放是标准的一部分，任何元素都可以被拖放。</p>
<h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><p>Internet Explorer 9 + 、Firefox、Opera 12 + 、Chrome 以及 Safari 5 +  支持拖放。</p>
<h2 id="拖放API"><a href="#拖放API" class="headerlink" title="拖放API"></a>拖放API</h2><h3 id="draggable属性"><a href="#draggable属性" class="headerlink" title="draggable属性"></a>draggable属性</h3><p>如果希望一个网页元素可以被拖动，只需要将他的draggable属性设置为true，这个元素就可以拖动了。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>拖动我试试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>拖动的过程会触发许多事件，主要有下面这些：</p>
<ul>
<li><code>dragstart</code>：网页元素开始拖动时触发。</li>
<li><code>drag</code>：被拖动的元素在拖动过程中持续触发。</li>
<li><code>dragenter</code>：被拖动的元素进入目标元素时触发，应在目标元素监听该事件。</li>
<li><code>dragleave</code>：被拖动的元素离开目标元素时触发，应在目标元素监听该事件。</li>
<li><code>dragover</code>：被拖动元素停留在目标元素之中时持续触发，应在目标元素监听该事件。</li>
<li><code>drop</code>：被拖动元素或从文件系统选中的文件，拖放落下时触发。</li>
<li><code>dragend</code>：网页元素拖动结束时触发。</li>
</ul>
<p>以上函数均可以指定回调函数：</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">draggableElement.addEventListener(<span class="string">'dragstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'拖放开始！'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>拖动过程中，鼠标移动事件将不会被触发。</p>
</blockquote>
<h3 id="dataTransfer对象"><a href="#dataTransfer对象" class="headerlink" title="dataTransfer对象"></a>dataTransfer对象</h3><p>拖动过程中，回调函数接受的事件参数，有一个<code>dataTransfer</code>属性。它指向一个对象，包含了与拖动相关的各种信息。<br>dataTransfer对象的属性：</p>
<ul>
<li>dropEffect：拖放的操作类型，决定了浏览器如何显示鼠标形状，可能的值为copy、move、link和none。</li>
<li>effectAllowed：指定所允许的操作，可能的值为copy、move、link、copyLink、copyMove、linkMove、all、none和uninitialized（默认值，等同于all，即允许一切操作）。</li>
<li>files：包含一个FileList对象，表示拖放所涉及的文件，主要用于处理从文件系统拖入浏览器的文件。</li>
<li>types：储存在DataTransfer对象的数据的类型。</li>
</ul>
<p>dataTransfer对象的方法：</p>
<ul>
<li>setData(format, data)：在dataTransfer对象上储存数据。第一个参数format用来指定储存的数据类型，比如text、url、text/html等。</li>
<li>getData(format)：从dataTransfer对象取出数据。</li>
<li>clearData(format)：清除dataTransfer对象所储存的数据。如果指定了format参数，则只清除该格式的数据，否则清除所有数据。</li>
<li>setDragImage(imgElement, x, y)：指定拖动过程中显示的图像。默认情况下，许多浏览器显示一个被拖动元素的半透明版本。参数imgElement必须是一个图像元素，而不是指向图像的路径，参数x和y表示图像相对于鼠标的位置。</li>
</ul>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">draggableElement.addEventListener(<span class="string">'dragstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.dataTransfer.setData(<span class="string">'text'</span>, <span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<p>上面代码在拖动开始时，在dataTransfer对象上储存一条文本信息，内容为“Hello World！”。当拖放结束时，可以用getData方法取出这条信息。</p>
<blockquote>
<p>dataTransfer对象允许在其上存储数据，这使得在被拖动元素与目标元素之间传送信息成为可能。</p>
</blockquote>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="简单拖放"><a href="#简单拖放" class="headerlink" title="简单拖放"></a>简单拖放</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"drag-elements"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"A"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"B"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"C"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"D"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"E"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"F"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"6.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"G"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"7.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"H"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"8.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">ul &#123;</span><br><span class="line">  margin:0 auto;</span><br><span class="line">  width:800px;</span><br><span class="line">&#125;</span><br><span class="line">ul:after&#123;</span><br><span class="line">  content:"";</span><br><span class="line">  display:block;</span><br><span class="line">  clear:both;</span><br><span class="line">&#125;</span><br><span class="line">li &#123;</span><br><span class="line">  width:200px;</span><br><span class="line">  height:125px;</span><br><span class="line">  float:left;</span><br><span class="line">  background-color:#CCC;</span><br><span class="line">  text-align:center;</span><br><span class="line">  line-height:120px;</span><br><span class="line">  font-size:50px;</span><br><span class="line">  color:#F60;</span><br><span class="line">&#125;</span><br><span class="line">.dragStart img &#123;</span><br><span class="line">  width:200px;</span><br><span class="line">  height:125px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> dragElements = <span class="built_in">document</span>.querySelectorAll(<span class="string">'#drag-elements li'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> elementDragged = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dragElements.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">  dragElements[i].addEventListener(<span class="string">'dragstart'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    e.dataTransfer.setData(<span class="string">'text'</span>, <span class="keyword">this</span>.id);</span></span><br><span class="line"><span class="javascript">    elementDragged = <span class="keyword">this</span>;</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="javascript">  dragElements[i].addEventListener(<span class="string">'dragover'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">    e.preventDefault();</span><br><span class="line"><span class="javascript">    e.dataTransfer.dropEffect = <span class="string">'move'</span>;</span></span><br><span class="line"><span class="javascript">    elementDragged.setAttribute(<span class="string">'class'</span>, <span class="string">'dragStart'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="javascript">  dragElements[i].addEventListener(<span class="string">'dragenter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">    e.preventDefault();</span><br><span class="line">    e.stopPropagation();</span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="keyword">this</span>.id != elementDragged.id) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> tempInnerHtml = <span class="keyword">this</span>.innerHTML;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.innerHTML = elementDragged.innerHTML;</span></span><br><span class="line">      elementDragged.innerHTML = tempInnerHtml;</span><br><span class="line"><span class="javascript">      elementDragged.removeAttribute(<span class="string">'class'</span>);</span></span><br><span class="line"><span class="javascript">      elementDragged = <span class="keyword">this</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="javascript">  dragElements[i].addEventListener(<span class="string">'dragleave'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">    e.preventDefault();</span><br><span class="line">    e.stopPropagation();</span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="keyword">this</span>.id != elementDragged.id) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.removeAttribute(<span class="string">'class'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="javascript">  dragElements[i].addEventListener(<span class="string">'drop'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">    e.preventDefault();</span><br><span class="line">    e.stopPropagation();</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> targetId = e.dataTransfer.getData(<span class="string">'text'</span>);</span></span><br><span class="line"><span class="javascript">    elementDragged.removeAttribute(<span class="string">'class'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="javascript">  dragElements[i].addEventListener(<span class="string">'dragend'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    elementDragged = <span class="literal">null</span>;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="拖放网元素"><a href="#拖放网元素" class="headerlink" title="拖放网元素"></a>拖放网元素</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"drag-elements"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"drop-target"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">ul&#123;</span><br><span class="line">    min-height:100px;</span><br><span class="line">    background-color:#EEE;</span><br><span class="line">    margin:20px;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">ul li&#123;</span><br><span class="line">    background-color:#CCC;</span><br><span class="line">    padding:10px;</span><br><span class="line">    margin-bottom:10px;</span><br><span class="line">    list-style: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取dom元素</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> target = <span class="built_in">document</span>.querySelector(<span class="string">'#drop-target'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> dragElements = <span class="built_in">document</span>.querySelectorAll(<span class="string">'#drag-elements li'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 定义变量跟踪被拖动的元素</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> elementDragged = <span class="literal">null</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 对可以拖放的元素绑定 dragstart 和 dragend 事件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;script dragElements.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">  dragElements[i].addEventListener(<span class="string">'dragstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    e.dataTransfer.setData(<span class="string">'text'</span>, <span class="keyword">this</span>.innerHTML);</span></span><br><span class="line"><span class="javascript">    elementDragged = <span class="keyword">this</span>;</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="javascript">  dragElements[i].addEventListener(<span class="string">'dragend'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    elementDragged = <span class="literal">null</span>;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 向目标元素绑定 dragover 事件,来处理元素拖动进入目标元素之后的事情</span></span></span><br><span class="line"><span class="javascript">target.addEventListener(<span class="string">'dragover'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">  e.preventDefault();</span><br><span class="line"><span class="javascript">  e.dataTransfer.dropEffect = <span class="string">'move'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 最后定义目标元素的 drop事件,将被拖动元素从原来的位置删除</span></span></span><br><span class="line"><span class="javascript">target.addEventListener(<span class="string">'drop'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">  e.preventDefault();</span><br><span class="line">  e.stopPropagation();</span><br><span class="line"><span class="javascript">  <span class="keyword">this</span>.innerHTML = <span class="string">'Dropped '</span> + e.dataTransfer.getData(<span class="string">'text'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">'#drag-elements'</span>).removeChild(elementDragged);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="拖放文件"><a href="#拖放文件" class="headerlink" title="拖放文件"></a>拖放文件</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span> <span class="attr">title</span>=<span class="string">"拖动文件到这里"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">#target&#123;</span><br><span class="line">  margin:10px;</span><br><span class="line">  min-height:100px;</span><br><span class="line">  max-height:600px;</span><br><span class="line">  background-color:#EEE;</span><br><span class="line">  border-radius:5px;</span><br><span class="line">  overflow:auto;</span><br><span class="line">&#125;</span><br><span class="line">#content&#123;</span><br><span class="line">  padding:10px;</span><br><span class="line">  font-size:18px;</span><br><span class="line">  line-height:25px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">/* js */</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 首先获取拖动的目标元素和内容展示区域</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> target = <span class="built_in">document</span>.querySelector(<span class="string">'#target'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> contentDiv = <span class="built_in">document</span>.querySelector(<span class="string">'#content'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 然后定义目标元素的dragover事件,定义了当文件进入目标元素后要做的事情</span></span></span><br><span class="line"><span class="javascript">target.addEventListener(<span class="string">'dragover'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">  e.preventDefault();</span><br><span class="line">  e.stopPropagation();</span><br><span class="line"><span class="javascript">  e.dataTransfer.dropEffect = <span class="string">'copy'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 最后定义目标元素的drop事件,展示文件内容</span></span></span><br><span class="line"><span class="javascript">target.addEventListener(<span class="string">'drop'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">  e.preventDefault();</span><br><span class="line">  e.stopPropagation();</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> fileList = e.dataTransfer.files;</span></span><br><span class="line">  if (fileList.length &gt; 0) &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> file = fileList[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line"><span class="javascript">    reader.onloadend = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">      if (e.target.readyState == FileReader.DONE) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> content = reader.result;</span></span><br><span class="line"><span class="javascript">        contentDiv.innerHTML = <span class="string">"File: "</span> + file.name + <span class="string">"\n\n"</span> + content;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reader.readAsBinaryString(file);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="最后附一份最近完成的基于Vue的完整的拖放实例"><a href="#最后附一份最近完成的基于Vue的完整的拖放实例" class="headerlink" title="最后附一份最近完成的基于Vue的完整的拖放实例"></a>最后附一份最近完成的基于Vue的完整的拖放实例</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jquery --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.5.3/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- element-ui --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/element-ui/lib/theme-chalk/index.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">"tableData"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"date"</span> <span class="attr">label</span>=<span class="string">"日期"</span> <span class="attr">width</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"name"</span> <span class="attr">label</span>=<span class="string">"姓名"</span> <span class="attr">width</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"address"</span> <span class="attr">label</span>=<span class="string">"地址"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">dragStart</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> el = e.target;</span></span><br><span class="line"><span class="javascript">        el = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">        start = <span class="keyword">this</span>.id;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">dragOver</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> el = ev.target;</span></span><br><span class="line">        ev.preventDefault();</span><br><span class="line"><span class="javascript">        ev.dataTransfer.dropEffect = <span class="string">'move'</span>;</span></span><br><span class="line"><span class="javascript">        $(el).addClass(<span class="string">'dragStart'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">dragEnter</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> el = ev.target;</span></span><br><span class="line">        ev.preventDefault();</span><br><span class="line">        ev.stopPropagation();</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">this</span>.id !== el.id) &#123;</span></span><br><span class="line"><span class="javascript">            $(el).addClass(<span class="string">'dragstart'</span>);</span></span><br><span class="line"><span class="javascript">            el = <span class="keyword">this</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">dragLeave</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> el = ev.target;</span></span><br><span class="line">        ev.preventDefault();</span><br><span class="line">        ev.stopPropagation();</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">this</span>.id !== el.id) &#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="keyword">this</span>).removeClass(<span class="string">'dragstart'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        $(<span class="string">'td'</span>).css(<span class="string">"borderBottomColor"</span>, <span class="string">""</span>)</span></span><br><span class="line"><span class="javascript">        $(<span class="keyword">this</span>).find(<span class="string">'td'</span>).css(<span class="string">"borderBottomColor"</span>, <span class="string">"#f66e04"</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">drop</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> el = e.target;</span></span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">this</span>.id !== el.id) &#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="keyword">this</span>).removeClass(<span class="string">'dragstart'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        end = <span class="keyword">this</span>.id;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">dragEnd</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> el = e.target;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'td'</span>).css(<span class="string">"borderBottomColor"</span>, <span class="string">""</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> lists = app.$data.tableData;</span></span><br><span class="line"><span class="javascript">        el = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> flag;</span></span><br><span class="line">        flag = lists[start];</span><br><span class="line">        lists[start] = lists[end];</span><br><span class="line">        lists[end] = flag;</span><br><span class="line">        app.$data.tableData = lists.concat([]);</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"从索引"</span> + start + <span class="string">"移动到索引"</span> + end)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="javascript">        data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                tableData: []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.tableData = [&#123;</span></span><br><span class="line"><span class="javascript">                date: <span class="string">'2016-05-02'</span>,</span></span><br><span class="line"><span class="javascript">                name: <span class="string">'王小虎1'</span>,</span></span><br><span class="line"><span class="javascript">                address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span></span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line"><span class="javascript">                date: <span class="string">'2016-05-04'</span>,</span></span><br><span class="line"><span class="javascript">                name: <span class="string">'王小虎2'</span>,</span></span><br><span class="line"><span class="javascript">                address: <span class="string">'上海市普陀区金沙江路 1517 弄'</span></span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line"><span class="javascript">                date: <span class="string">'2016-05-01'</span>,</span></span><br><span class="line"><span class="javascript">                name: <span class="string">'王小虎3'</span>,</span></span><br><span class="line"><span class="javascript">                address: <span class="string">'上海市普陀区金沙江路 1519 弄'</span></span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line"><span class="javascript">                date: <span class="string">'2016-05-03'</span>,</span></span><br><span class="line"><span class="javascript">                name: <span class="string">'王小虎4'</span>,</span></span><br><span class="line"><span class="javascript">                address: <span class="string">'上海市普陀区金沙江路 1516 弄'</span></span></span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line"><span class="javascript">            tableData: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.StartDrag()</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            StartDrag: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> start, end;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> dragElements = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'el-table__row'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dragElements.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                    dragElements[i].setAttribute(<span class="string">'draggable'</span>, <span class="string">'true'</span>);</span></span><br><span class="line"><span class="javascript">                    dragElements[i].setAttribute(<span class="string">'id'</span>, i)</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dragElements.length; i++) &#123;</span></span><br><span class="line">                    /*</span><br><span class="line">                    *因为涉及到翻页和全局搜索之类的功能</span><br><span class="line">                    *会大量的树新数据导致dom变化</span><br><span class="line">                    *因此在绑定时间之前重新渲染页面</span><br><span class="line">                    *移除之前的事件重新绑定</span><br><span class="line">                    */</span><br><span class="line"><span class="javascript">                    <span class="comment">// removeEventListener</span></span></span><br><span class="line"><span class="javascript">                    dragElements[i].removeEventListener(<span class="string">'dragstart'</span>, dragStart);</span></span><br><span class="line"><span class="javascript">                    dragElements[i].removeEventListener(<span class="string">'dragover'</span>, dragOver);</span></span><br><span class="line"><span class="javascript">                    dragElements[i].removeEventListener(<span class="string">'dragenter'</span>, dragEnter);</span></span><br><span class="line"><span class="javascript">                    dragElements[i].removeEventListener(<span class="string">'dragleave'</span>, dragLeave);</span></span><br><span class="line"><span class="javascript">                    dragElements[i].removeEventListener(<span class="string">'drop'</span>, drop);</span></span><br><span class="line"><span class="javascript">                    dragElements[i].removeEventListener(<span class="string">'dragend'</span>, dragEnd);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// addEventListener</span></span></span><br><span class="line"><span class="javascript">                    dragElements[i].addEventListener(<span class="string">'dragstart'</span>, dragStart);</span></span><br><span class="line"><span class="javascript">                    dragElements[i].addEventListener(<span class="string">'dragover'</span>, dragOver);</span></span><br><span class="line"><span class="javascript">                    dragElements[i].addEventListener(<span class="string">'dragenter'</span>, dragEnter);</span></span><br><span class="line"><span class="javascript">                    dragElements[i].addEventListener(<span class="string">'dragleave'</span>, dragLeave);</span></span><br><span class="line"><span class="javascript">                    dragElements[i].addEventListener(<span class="string">'drop'</span>, drop);</span></span><br><span class="line"><span class="javascript">                    dragElements[i].addEventListener(<span class="string">'dragend'</span>, dragEnd);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>html5</category>
      </categories>
      <tags>
        <tag>draggable</tag>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title>关于sticky-footer兼容性最好的一种解决方案</title>
    <url>/blog/2017/10/31/%E5%85%B3%E4%BA%8Esticky-footer%E5%85%BC%E5%AE%B9%E6%80%A7%E6%9C%80%E5%A5%BD%E7%9A%84%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="什么是-sticky-footer？"><a href="#什么是-sticky-footer？" class="headerlink" title="什么是 sticky-footer？"></a>什么是 sticky-footer？</h2><p>sticky-footer是一种最古老的同时也最常见的网页效果，具体表现为：当内容足够时，页脚被内容向下推送，如果内容不足以撑开高度，页脚应当粘贴在窗口底部。这种效果非常常见且看似简单，但实际上实现起来比想象中要复杂得多。目前为止至少有5种方式可以实现sticky-footer布局，但各有优势和劣势，这里介绍兼容性最强的一种写法。</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>这是内容部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>这是页脚部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  html,body&#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">    min-height: 100%;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#ace</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.wrapper</span> <span class="selector-class">.content</span>&#123;</span></span><br><span class="line">    padding-bottom: 100px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.footer</span>&#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line"><span class="css">    <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">    margin-top: -100px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>以防万一，需要清除浮动</p>
<div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">CSS</span></header><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>微信浏览器播放音乐的坑</title>
    <url>/blog/2017/10/30/%E5%BE%AE%E4%BF%A1%E6%B5%8F%E8%A7%88%E5%99%A8%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h2 id="如果只是简单的希望向微信环境下添加默认播放的背景音乐而不需要其他操作"><a href="#如果只是简单的希望向微信环境下添加默认播放的背景音乐而不需要其他操作" class="headerlink" title="如果只是简单的希望向微信环境下添加默认播放的背景音乐而不需要其他操作"></a>如果只是简单的希望向微信环境下添加默认播放的背景音乐而不需要其他操作</h2><h3 id="给你的-js绑定微信浏览器特有的事件"><a href="#给你的-js绑定微信浏览器特有的事件" class="headerlink" title="给你的 js绑定微信浏览器特有的事件"></a>给你的 js绑定微信浏览器特有的事件</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">HTML</span></header><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"audio"</span> <span class="attr">class</span>=<span class="string">"media-audio"</span> <span class="attr">autoplay</span> <span class="attr">preload</span> <span class="attr">loop</span>=<span class="string">"loop"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"music.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"music.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="keyword">function</span> <span class="title">audioAutoPlay</span>(<span class="params">ID</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> audio = <span class="built_in">document</span>.getElementById(ID);</span></span><br><span class="line">     audio.play();</span><br><span class="line"><span class="javascript">     <span class="built_in">document</span>.addEventListener(<span class="string">"WeixinJSBridgeReady"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">       audio.play();</span><br><span class="line"><span class="javascript">     &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">     <span class="built_in">document</span>.addEventListener(<span class="string">'YixinJSBridgeReady'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">       audio.play();</span><br><span class="line"><span class="javascript">     &#125;, <span class="literal">false</span>);</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="javascript">   audioAutoPlay(<span class="string">'audio'</span>);</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="如果有关于微信SDK的操作，将这段逻辑放在SDK中也是极好的"><a href="#如果有关于微信SDK的操作，将这段逻辑放在SDK中也是极好的" class="headerlink" title="如果有关于微信SDK的操作，将这段逻辑放在SDK中也是极好的"></a>如果有关于微信SDK的操作，将这段逻辑放在SDK中也是极好的</h2><h3 id="博主默认你已经正确的引用了-SDK，如果无法引用请查找其他文档"><a href="#博主默认你已经正确的引用了-SDK，如果无法引用请查找其他文档" class="headerlink" title="博主默认你已经正确的引用了 SDK，如果无法引用请查找其他文档"></a>博主默认你已经正确的引用了 SDK，如果无法引用请查找其他文档</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">JS</span></header><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">wx.config(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line">wx.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  audio.play();</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>WeChat</category>
      </categories>
      <tags>
        <tag>WeChat</tag>
        <tag>audio</tag>
      </tags>
  </entry>
  <entry>
    <title>github下fork后同步个人仓库和源仓库</title>
    <url>/blog/2017/10/19/github%E5%92%8Cgitlab%E4%B8%8Bfork%E5%90%8E%E5%90%8C%E6%AD%A5%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93%E5%92%8C%E6%BA%90%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h3 id="首先要先确定一下是否建立了主repo的远程源"><a href="#首先要先确定一下是否建立了主repo的远程源" class="headerlink" title="首先要先确定一下是否建立了主repo的远程源"></a>首先要先确定一下是否建立了主repo的远程源</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></div>
<h3 id="如果里面只能看到你自己的两个源-fetch-和-push-，那就需要添加主repo的源"><a href="#如果里面只能看到你自己的两个源-fetch-和-push-，那就需要添加主repo的源" class="headerlink" title="如果里面只能看到你自己的两个源(fetch 和 push)，那就需要添加主repo的源"></a>如果里面只能看到你自己的两个源(fetch 和 push)，那就需要添加主repo的源</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add upstream URL</span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure></div>
<p>然后你就能看到upstream了</p>
<h3 id="如果想与主repo合并"><a href="#如果想与主repo合并" class="headerlink" title="如果想与主repo合并"></a>如果想与主repo合并</h3><div class="code-panel__wrapper" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><header class="mac-panel"><span class="doc-path"></span><span class="mac-panel__language">SHELL</span></header><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch upstream</span><br><span class="line">git merge upstream/master</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令</title>
    <url>/blog/2017/09/25/git%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<blockquote>
<p>本博客旨在记录常用git命令。如果希望得到更多关于git的知识，请移步到<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰的git教程</a>，有非常详细的教程资料。</p>
</blockquote>
<h2 id="添加文件、查看状态、删除文件、提交文件、找回文件，重置修改文件"><a href="#添加文件、查看状态、删除文件、提交文件、找回文件，重置修改文件" class="headerlink" title="添加文件、查看状态、删除文件、提交文件、找回文件，重置修改文件"></a>添加文件、查看状态、删除文件、提交文件、找回文件，重置修改文件</h2><ul>
<li>git help &lt;command&gt; &nbsp;&nbsp;&nbsp;&nbsp; 显示command的帮助文档</li>
<li>git show (commitID) &nbsp;&nbsp;&nbsp;&nbsp; 显示最近一次（某一次）提交的内容详情</li>
<li>git co – <file> &nbsp;&nbsp;&nbsp;&nbsp; 抛弃工作区某一文件的修改</file></li>
<li>git co . &nbsp;&nbsp;&nbsp;&nbsp; 抛弃工作区修改</li>
<li>git add <file> &nbsp;&nbsp;&nbsp;&nbsp; 将工作文件修改提交到本地暂存区</file></li>
<li>git add . &nbsp;&nbsp;&nbsp;&nbsp; 将所有修改过的工作文件提交暂存区</li>
<li>git rm <file> &nbsp;&nbsp;&nbsp;&nbsp; 从版本库中删除文件</file></li>
<li>git rm <file> –cached &nbsp;&nbsp;&nbsp;&nbsp; 从版本库中删除文件，但不删除本地文件</file></li>
<li>git reset <file> &nbsp;&nbsp;&nbsp;&nbsp; 从暂存区恢复到工作文件</file></li>
<li>git reset – . &nbsp;&nbsp;&nbsp;&nbsp; 从暂存区恢复到工作文件</li>
<li>git reset –hard &nbsp;&nbsp;&nbsp;&nbsp; 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</li>
<li>git ci <file> git ci . git ci -a &nbsp;&nbsp;&nbsp;&nbsp; 将git add, git rm和git ci等操作都合并在一起做git ci -am “some comments”</file></li>
<li>git ci –amend &nbsp;&nbsp;&nbsp;&nbsp; 修改最后一次提交记录</li>
<li>git revert <commitid> &nbsp;&nbsp;&nbsp;&nbsp; 恢复某次提交的状态，恢复动作本身也创建次提交对象</commitid></li>
<li>git revert HEAD &nbsp;&nbsp;&nbsp;&nbsp; 恢复最后一次提交的状态</li>
</ul>
<h2 id="查看文件diff"><a href="#查看文件diff" class="headerlink" title="查看文件diff"></a>查看文件diff</h2><ul>
<li>git diff <file> &nbsp;&nbsp;&nbsp;&nbsp; 比较当前文件和暂存区文件差异 git diff</file></li>
<li>git diff <id1><id2> &nbsp;&nbsp;&nbsp;&nbsp; 比较两次提交之间的差异</id2></id1></li>
<li>git diff <branch1>..<branch2> &nbsp;&nbsp;&nbsp;&nbsp; 在两个分支之间比较</branch2></branch1></li>
<li>git diff –staged &nbsp;&nbsp;&nbsp;&nbsp; 比较暂存区和版本库差异</li>
<li>git diff –cached &nbsp;&nbsp;&nbsp;&nbsp; 比较暂存区和版本库差异</li>
<li>git diff –stat &nbsp;&nbsp;&nbsp;&nbsp; 仅仅比较统计信息</li>
</ul>
<h2 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h2><ul>
<li>git log git log <file> &nbsp;&nbsp;&nbsp;&nbsp; 查看该文件每次提交记录</file></li>
<li>git log -p <file> &nbsp;&nbsp;&nbsp;&nbsp; 查看每次详细修改内容的diff</file></li>
<li>git log -p -2 &nbsp;&nbsp;&nbsp;&nbsp; 查看最近两次详细修改内容的diff</li>
<li>git log –stat &nbsp;&nbsp;&nbsp;&nbsp;查看提交统计信息</li>
</ul>
<h2 id="Git-本地分支管理"><a href="#Git-本地分支管理" class="headerlink" title="Git 本地分支管理"></a>Git 本地分支管理</h2><h3 id="查看、切换、创建和删除分支"><a href="#查看、切换、创建和删除分支" class="headerlink" title="查看、切换、创建和删除分支"></a>查看、切换、创建和删除分支</h3><ul>
<li>git branch -r &nbsp;&nbsp;&nbsp;&nbsp; 查看远程分支</li>
<li>git branch &lt;new_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 创建新的分支</li>
<li>git branch -v &nbsp;&nbsp;&nbsp;&nbsp; 查看各个分支最后提交信息</li>
<li>git branch –merged &nbsp;&nbsp;&nbsp;&nbsp; 查看已经被合并到当前分支的分支</li>
<li>git branch –no-merged &nbsp;&nbsp;&nbsp;&nbsp; 查看尚未被合并到当前分支的分支</li>
<li>git checkout <branch> &nbsp;&nbsp;&nbsp;&nbsp; 切换到某个分支</branch></li>
<li>git checkout -b &lt;new_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 创建新的分支，并且切换过去</li>
<li>git checkout -b &lt;new_branch&gt; <branch> &nbsp;&nbsp;&nbsp;&nbsp; 基于branch创建新的new_branch</branch></li>
<li>git checkout commitID &nbsp;&nbsp;&nbsp;&nbsp; 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</li>
<li>git checkout commitID -b &lt;new_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 把某次历史提交记录checkout出来，创建成一个分支</li>
<li>git branch -d <branch> &nbsp;&nbsp;&nbsp;&nbsp; 删除某个分支</branch></li>
<li>git branch -D <branch> &nbsp;&nbsp;&nbsp;&nbsp; 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</branch></li>
</ul>
<h2 id="分支合并和rebase"><a href="#分支合并和rebase" class="headerlink" title="分支合并和rebase"></a>分支合并和rebase</h2><ul>
<li>git merge <branch> &nbsp;&nbsp;&nbsp;&nbsp; 将branch分支合并到当前分支</branch></li>
<li>git merge origin/master –no-ff &nbsp;&nbsp;&nbsp;&nbsp; 不要Fast-Foward合并，这样可以生成merge提交</li>
<li>git rebase master <branch> &nbsp;&nbsp;&nbsp;&nbsp; 将master rebase到branch，相当于： git co <branch> &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge <branch></branch></branch></branch></li>
</ul>
<h2 id="Git补丁管理-方便在多台机器上开发同步时用"><a href="#Git补丁管理-方便在多台机器上开发同步时用" class="headerlink" title="Git补丁管理(方便在多台机器上开发同步时用)"></a>Git补丁管理(方便在多台机器上开发同步时用)</h2><ul>
<li>git diff &gt; ../sync.patch &nbsp;&nbsp;&nbsp;&nbsp; 生成补丁</li>
<li>git apply ../sync.patch &nbsp;&nbsp;&nbsp;&nbsp; 打补丁</li>
<li>git apply –check ../sync.patch &nbsp;&nbsp;&nbsp;&nbsp;测试补丁能否成功</li>
</ul>
<h2 id="Git暂存管理"><a href="#Git暂存管理" class="headerlink" title="Git暂存管理"></a>Git暂存管理</h2><ul>
<li>git stash &nbsp;&nbsp;&nbsp;&nbsp; 暂存</li>
<li>git stash list &nbsp;&nbsp;&nbsp;&nbsp; 列出所有stash</li>
<li>git stash apply &nbsp;&nbsp;&nbsp;&nbsp; 恢复暂存的内容</li>
<li>git stash drop &nbsp;&nbsp;&nbsp;&nbsp; 删除暂存区</li>
</ul>
<h2 id="Git远程分支管理"><a href="#Git远程分支管理" class="headerlink" title="Git远程分支管理"></a>Git远程分支管理</h2><ul>
<li>git pull &nbsp;&nbsp;&nbsp;&nbsp; 抓取远程仓库所有分支更新并合并到本地</li>
<li>git pull –no-ff &nbsp;&nbsp;&nbsp;&nbsp; 抓取远程仓库所有分支更新并合并到本地，不要快进合并</li>
<li>git fetch origin &nbsp;&nbsp;&nbsp;&nbsp; 抓取远程仓库更新</li>
<li>git merge origin/master &nbsp;&nbsp;&nbsp;&nbsp; 将远程主分支合并到本地当前分支</li>
<li>git co –track origin/branch &nbsp;&nbsp;&nbsp;&nbsp; 跟踪某个远程分支创建相应的本地分支</li>
<li>git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 基于远程分支创建本地分支，功能同上</li>
<li>git push &nbsp;&nbsp;&nbsp;&nbsp; push所有分支</li>
<li>git push origin master &nbsp;&nbsp;&nbsp;&nbsp; 将本地主分支推到远程主分支</li>
<li>git push -u origin master &nbsp;&nbsp;&nbsp;&nbsp; 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</li>
<li>git push origin &lt;local_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 创建远程分支， origin是远程仓库名</li>
<li>git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 创建远程分支</li>
<li>git push origin :&lt;remote_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp;先删除本地分支(git br -d <branch>)，然后再push删除远程分支</branch></li>
</ul>
<h2 id="Git远程仓库管理"><a href="#Git远程仓库管理" class="headerlink" title="Git远程仓库管理"></a>Git远程仓库管理</h2><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><ul>
<li>git remote -v &nbsp;&nbsp;&nbsp;&nbsp; 查看远程服务器地址和仓库名称</li>
<li>git remote show origin &nbsp;&nbsp;&nbsp;&nbsp; 查看远程服务器仓库状态</li>
<li>git remote add origin git@ github:####/####.git &nbsp;&nbsp;&nbsp;&nbsp; 添加远程仓库地址</li>
<li>git remote set-url origin git@ github.com:####/####.git &nbsp;&nbsp;&nbsp;&nbsp; 设置远程仓库地址(用于修改远程仓库地址)</li>
<li>git remote rm <repository> &nbsp;&nbsp;&nbsp;&nbsp; 删除远程仓库</repository></li>
</ul>
<h2 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h2><ul>
<li>git clone –bare robbin_site robbin_site.git &nbsp;&nbsp;&nbsp;&nbsp; 用带版本的项目创建纯版本仓库</li>
<li>scp -r my_project.git git@ git.csdn.net:~ &nbsp;&nbsp;&nbsp;&nbsp; 将纯仓库上传到服务器上</li>
<li>mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git –bare init &nbsp;&nbsp;&nbsp;&nbsp; 在服务器创建纯仓库</li>
<li>git remote add origin git@ github.com:robbin/robbin_site.git &nbsp;&nbsp;&nbsp;&nbsp; 设置远程仓库地址</li>
<li>git push -u origin master &nbsp;&nbsp;&nbsp;&nbsp; 客户端首次提交</li>
<li>git push -u origin develop &nbsp;&nbsp;&nbsp;&nbsp; 首次将本地develop分支提交到远程develop分支，并且track</li>
<li>git remote set-head origin master &nbsp;&nbsp;&nbsp;&nbsp; 设置远程仓库的HEAD指向master分支</li>
</ul>
<h2 id="设置跟踪远程库和本地库"><a href="#设置跟踪远程库和本地库" class="headerlink" title="设置跟踪远程库和本地库"></a>设置跟踪远程库和本地库</h2><ul>
<li>git branch –set-upstream master origin/master</li>
<li>git branch –set-upstream develop origin/develop</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>css3选择器简介</title>
    <url>/blog/2017/08/24/hello-world/</url>
    <content><![CDATA[<p>作为前端开发人员，css样式永远是我们讨论的重点，毕竟在高速发展的现在，颜值的重要性不言而喻。作为网页样式的首选，一张网页的美观程度可以说完全由css来决定，其中选择器是css中的一大重点。在css3之前，对于选中正确的标签是让人头疼的工作，尤其是层次越来越深。对此，css3的新增加了很多选择器，减轻了开发者的不少负担。<br>css3新增加的选择器大致可以分为几类</p>
<ul>
<li>属性选择器</li>
<li>伪类选择器</li>
<li>伪元素选择器</li>
</ul>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>顾名思义，属性选择器是通过标签的属性来捕获目标标签。属性可以是标签自己本身的属性（src、title等），也可以是自己定义的标签。具体使用方式: E[attr]:匹配含有属<br>性attr的元素。</p>
<ul>
<li>div[id]: 可以匹配到<div id="one"></div>以及<div id="two"></div></li>
<li>E[attr=value]: 匹配含有属性attr,并且attr属性的值为value的元素。</li>
<li>div[id=one]: 可以匹配到<div id="one"></div></li>
<li>E[attr~=value]: 标签元素可以有多个自定义的属性，这就像可以同时拥有很多类名一样。这个选择器可以选中一条属性中具有多个空格分隔开的其中一个值为value的元素。</li>
<li>div[me~=man]: 可以匹配到<div me=" 14 man chinese"></div> 或者 <div me=" man chinese tianjin"></div></li>
<li>E[attr|=value]: 这个选择器可以选中一条属性中有“-”分隔符并且分隔符开头是value的元素。</li>
<li>div[me|=a]: 可以匹配到<div me=" a-man"></div>以及<div me="a-chinese tianjin"></div></li>
<li>E[attr^=value]: 这个选择器可以选中具有attr并且值以value开头的元素。</li>
<li>div[me^=a]: 可以匹配到<div me=" aman"></div>以及<div me="achinese tianjin"></div></li>
<li>E[attr$=value]: 这个选择器可以选中具有attr并且值以value结尾的元素。</li>
<li>div[me$=a]: 可以匹配到<div me=" amana"></div>以及<div me="achinesa tianjina"></div></li>
<li>E[attr*=value]: 这个选择器可以选中具有attr并且值包含value的元素，无论value在什么位置。</li>
<li>div[me*=a]: 可以匹配到<div me=" amana"></div>以及<div me="chineas tian"></div></li>
</ul>
<h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>通过操作伪类来选中目标元素也是css常用的一种手段。<br>作为经验丰富的前端开发者，你对这些伪元素已经烂熟于心：</p>
<ul>
<li>E:first-child    匹配元素E的第一个子元素</li>
<li>E:link    匹配所有未被点击的链接</li>
<li>E:visited    匹配所有已被点击的链接</li>
<li>E:active    匹配鼠标已经其上按下、还没有释放的E元素</li>
<li>E:hover    匹配鼠标悬停其上的E元素</li>
<li>E:focus    匹配获得当前焦点的E元素</li>
<li>E:lang(c)    匹配lang属性等于c的E元素</li>
<li>E:enabled    匹配表单中可用的元素</li>
<li>E:disabled    匹配表单中禁用的元素</li>
<li>E:checked    匹配表单中被选中的radio或checkbox元素</li>
<li>E::selection    匹配用户当前选中的元素</li>
<li>E:root    匹配文档的根元素，对于HTML文档，就是HTML元素</li>
</ul>
<p>在css3中提供了全新的伪类选择器，可以更方便的选取目标元素。</p>
<ul>
<li>E:nth-child(n)匹配其父元素的第n个子元素，<strong>第一个编号为1</strong></li>
<li>E:nth-last-child(n)匹配其父元素的倒数第n个子元素，<strong>最后一个编号为1</strong></li>
<li>E:nth-of-type(n)与:nth-child()作用类似，但是仅匹配使用同种标签的元素</li>
<li>E:nth-last-of-type(n)    与:nth-last-child() 作用类似，但是仅匹配使用同种标签的元素</li>
<li>E:last-child    匹配父元素的最后一个子元素，等同于:nth-last-child(1)</li>
<li>E:first-of-type    匹配父元素下使用同种标签的第一个子元素，等同于:nth-of-type(1)</li>
<li>E:last-of-type    匹配父元素下使用同种标签的最后一个子元素，等同于:nth-last-of-type(1)</li>
<li>E:only-child    匹配父元素下仅有的一个子元素，等同于:first-child:last-child或 :nth-child(1):nth-last-child(1)</li>
<li>E:only-of-type    匹配父元素下使用同种标签的唯一一个子元素，等同于:first-of-type:last-of-type或 :nth-of-type(1):nth-last-of-type(1)</li>
<li>E:empty    匹配一个不包含任何子元素的元素，文本节点也被看作子元素</li>
<li>E:not(selector)    匹配不符合当前选择器的任何元素</li>
</ul>
<h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><p>css允许我们向文档内部添加一个额外的元素而不扰乱文档本身，具体表现为在元素内部插入一个元素，并且可以通过选择器控制这个元素的行为。</p>
<ul>
<li>E:first-line    匹配E元素内容的第一行</li>
<li>E:first-letter    匹配E元素内容的第一个字母</li>
<li>E:before    在E元素之前插入生成的内容</li>
<li>E:after    在E元素之后插入生成的内容</li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
</search>
